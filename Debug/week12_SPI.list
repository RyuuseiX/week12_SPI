
week12_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08008798  08008798  00018798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c78  08008c78  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c78  08008c78  00018c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c80  08008c80  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c80  08008c80  00018c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c84  08008c84  00018c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000080  08008d04  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08008d04  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114ed  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000240a  00000000  00000000  00031599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  000339a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00034998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182c9  00000000  00000000  000358b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011437  00000000  00000000  0004db79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c56b  00000000  00000000  0005efb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb51b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b84  00000000  00000000  000fb570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800877c 	.word	0x0800877c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800877c 	.word	0x0800877c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96e 	b.w	8000d90 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8083 	bne.w	8000be2 <__udivmoddi4+0x116>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4617      	mov	r7, r2
 8000ae0:	d947      	bls.n	8000b72 <__udivmoddi4+0xa6>
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	b142      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	f1c2 0020 	rsb	r0, r2, #32
 8000aec:	fa24 f000 	lsr.w	r0, r4, r0
 8000af0:	4091      	lsls	r1, r2
 8000af2:	4097      	lsls	r7, r2
 8000af4:	ea40 0c01 	orr.w	ip, r0, r1
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbbc f6f8 	udiv	r6, ip, r8
 8000b04:	fa1f fe87 	uxth.w	lr, r7
 8000b08:	fb08 c116 	mls	r1, r8, r6, ip
 8000b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b10:	fb06 f10e 	mul.w	r1, r6, lr
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b1e:	f080 8119 	bcs.w	8000d54 <__udivmoddi4+0x288>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8116 	bls.w	8000d54 <__udivmoddi4+0x288>
 8000b28:	3e02      	subs	r6, #2
 8000b2a:	443b      	add	r3, r7
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3310 	mls	r3, r8, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b40:	45a6      	cmp	lr, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	193c      	adds	r4, r7, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8105 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b4e:	45a6      	cmp	lr, r4
 8000b50:	f240 8102 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b54:	3802      	subs	r0, #2
 8000b56:	443c      	add	r4, r7
 8000b58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5c:	eba4 040e 	sub.w	r4, r4, lr
 8000b60:	2600      	movs	r6, #0
 8000b62:	b11d      	cbz	r5, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c5 4300 	strd	r4, r3, [r5]
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	b902      	cbnz	r2, 8000b76 <__udivmoddi4+0xaa>
 8000b74:	deff      	udf	#255	; 0xff
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d150      	bne.n	8000c20 <__udivmoddi4+0x154>
 8000b7e:	1bcb      	subs	r3, r1, r7
 8000b80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b84:	fa1f f887 	uxth.w	r8, r7
 8000b88:	2601      	movs	r6, #1
 8000b8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b8e:	0c21      	lsrs	r1, r4, #16
 8000b90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b98:	fb08 f30c 	mul.w	r3, r8, ip
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ba0:	1879      	adds	r1, r7, r1
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0xe2>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	f200 80e9 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1ac9      	subs	r1, r1, r3
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x10c>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x10a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80d9 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e7bf      	b.n	8000b62 <__udivmoddi4+0x96>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x12e>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	f000 80b1 	beq.w	8000d4e <__udivmoddi4+0x282>
 8000bec:	2600      	movs	r6, #0
 8000bee:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f683 	clz	r6, r3
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d14a      	bne.n	8000c98 <__udivmoddi4+0x1cc>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0x140>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80b8 	bhi.w	8000d7c <__udivmoddi4+0x2b0>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	468c      	mov	ip, r1
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0a8      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000c1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c1e:	e7a5      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000c20:	f1c2 0320 	rsb	r3, r2, #32
 8000c24:	fa20 f603 	lsr.w	r6, r0, r3
 8000c28:	4097      	lsls	r7, r2
 8000c2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c32:	40d9      	lsrs	r1, r3
 8000c34:	4330      	orrs	r0, r6
 8000c36:	0c03      	lsrs	r3, r0, #16
 8000c38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c3c:	fa1f f887 	uxth.w	r8, r7
 8000c40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb06 f108 	mul.w	r1, r6, r8
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x19c>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c5a:	f080 808d 	bcs.w	8000d78 <__udivmoddi4+0x2ac>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 808a 	bls.w	8000d78 <__udivmoddi4+0x2ac>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b281      	uxth	r1, r0
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb00 f308 	mul.w	r3, r0, r8
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x1c4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c86:	d273      	bcs.n	8000d70 <__udivmoddi4+0x2a4>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d971      	bls.n	8000d70 <__udivmoddi4+0x2a4>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4439      	add	r1, r7
 8000c90:	1acb      	subs	r3, r1, r3
 8000c92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c96:	e778      	b.n	8000b8a <__udivmoddi4+0xbe>
 8000c98:	f1c6 0c20 	rsb	ip, r6, #32
 8000c9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca4:	431c      	orrs	r4, r3
 8000ca6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000caa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	0c3b      	lsrs	r3, r7, #16
 8000cba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cbe:	fa1f f884 	uxth.w	r8, r4
 8000cc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cca:	fb09 fa08 	mul.w	sl, r9, r8
 8000cce:	458a      	cmp	sl, r1
 8000cd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x220>
 8000cda:	1861      	adds	r1, r4, r1
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce0:	d248      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce2:	458a      	cmp	sl, r1
 8000ce4:	d946      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4421      	add	r1, r4
 8000cec:	eba1 010a 	sub.w	r1, r1, sl
 8000cf0:	b2bf      	uxth	r7, r7
 8000cf2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cfe:	fb00 f808 	mul.w	r8, r0, r8
 8000d02:	45b8      	cmp	r8, r7
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x24a>
 8000d06:	19e7      	adds	r7, r4, r7
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d22e      	bcs.n	8000d6c <__udivmoddi4+0x2a0>
 8000d0e:	45b8      	cmp	r8, r7
 8000d10:	d92c      	bls.n	8000d6c <__udivmoddi4+0x2a0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4427      	add	r7, r4
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	eba7 0708 	sub.w	r7, r7, r8
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	454f      	cmp	r7, r9
 8000d24:	46c6      	mov	lr, r8
 8000d26:	4649      	mov	r1, r9
 8000d28:	d31a      	bcc.n	8000d60 <__udivmoddi4+0x294>
 8000d2a:	d017      	beq.n	8000d5c <__udivmoddi4+0x290>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x27a>
 8000d2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d32:	eb67 0701 	sbc.w	r7, r7, r1
 8000d36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3a:	40f2      	lsrs	r2, r6
 8000d3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d40:	40f7      	lsrs	r7, r6
 8000d42:	e9c5 2700 	strd	r2, r7, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e70b      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6fd      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d5c:	4543      	cmp	r3, r8
 8000d5e:	d2e5      	bcs.n	8000d2c <__udivmoddi4+0x260>
 8000d60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d64:	eb69 0104 	sbc.w	r1, r9, r4
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7df      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e7d2      	b.n	8000d16 <__udivmoddi4+0x24a>
 8000d70:	4660      	mov	r0, ip
 8000d72:	e78d      	b.n	8000c90 <__udivmoddi4+0x1c4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7b9      	b.n	8000cec <__udivmoddi4+0x220>
 8000d78:	4666      	mov	r6, ip
 8000d7a:	e775      	b.n	8000c68 <__udivmoddi4+0x19c>
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0x14a>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	4439      	add	r1, r7
 8000d86:	e713      	b.n	8000bb0 <__udivmoddi4+0xe4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	e724      	b.n	8000bd8 <__udivmoddi4+0x10c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b5b0      	push	{r4, r5, r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9a:	f002 f8a1 	bl	8002ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9e:	f000 f879 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da2:	f000 fa23 	bl	80011ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000da6:	f000 fa01 	bl	80011ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000daa:	f000 f9d5 	bl	8001158 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000dae:	f000 f8d9 	bl	8000f64 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000db2:	f000 f929 	bl	8001008 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000db6:	f000 f95f 	bl	8001078 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000dba:	f000 f9a9 	bl	8001110 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000dbe:	4828      	ldr	r0, [pc, #160]	; (8000e60 <main+0xcc>)
 8000dc0:	f004 fd88 	bl	80058d4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000dc4:	4827      	ldr	r0, [pc, #156]	; (8000e64 <main+0xd0>)
 8000dc6:	f004 fddf 	bl	8005988 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4926      	ldr	r1, [pc, #152]	; (8000e68 <main+0xd4>)
 8000dce:	4827      	ldr	r0, [pc, #156]	; (8000e6c <main+0xd8>)
 8000dd0:	f002 fa7c 	bl	80032cc <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dda:	4825      	ldr	r0, [pc, #148]	; (8000e70 <main+0xdc>)
 8000ddc:	f003 fcf8 	bl	80047d0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000de0:	2220      	movs	r2, #32
 8000de2:	4924      	ldr	r1, [pc, #144]	; (8000e74 <main+0xe0>)
 8000de4:	4824      	ldr	r0, [pc, #144]	; (8000e78 <main+0xe4>)
 8000de6:	f005 faa0 	bl	800632a <HAL_UART_Receive_IT>

		int16_t inputchar = UARTRecieveIT();
 8000dea:	f000 fa9f 	bl	800132c <UARTRecieveIT>
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
		Menu(inputchar);
 8000df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fac8 	bl	800138c <Menu>
		Function_Gen();
 8000dfc:	f001 fc8c 	bl	8002718 <Function_Gen>
		if (micros() - timestamp >= Period)
 8000e00:	f001 fdfa 	bl	80029f8 <micros>
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <main+0xe8>)
 8000e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0a:	1a84      	subs	r4, r0, r2
 8000e0c:	eb61 0503 	sbc.w	r5, r1, r3
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <main+0xec>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	429d      	cmp	r5, r3
 8000e1c:	bf08      	it	eq
 8000e1e:	4294      	cmpeq	r4, r2
 8000e20:	d3de      	bcc.n	8000de0 <main+0x4c>
		{
			timestamp = micros();
 8000e22:	f001 fde9 	bl	80029f8 <micros>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4914      	ldr	r1, [pc, #80]	; (8000e7c <main+0xe8>)
 8000e2c:	e9c1 2300 	strd	r2, r3, [r1]

			if (hspi3.State == HAL_SPI_STATE_READY
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <main+0xf0>)
 8000e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d1d1      	bne.n	8000de0 <main+0x4c>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8000e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <main+0xf4>)
 8000e42:	f003 fcad 	bl	80047a0 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d1c9      	bne.n	8000de0 <main+0x4c>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <main+0xf8>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <main+0xfc>)
 8000e52:	8812      	ldrh	r2, [r2, #0]
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fd74 	bl	8002944 <MCP4922SetOutput>
	{
 8000e5c:	e7c0      	b.n	8000de0 <main+0x4c>
 8000e5e:	bf00      	nop
 8000e60:	20000154 	.word	0x20000154
 8000e64:	2000023c 	.word	0x2000023c
 8000e68:	2000009c 	.word	0x2000009c
 8000e6c:	200001f4 	.word	0x200001f4
 8000e70:	40020000 	.word	0x40020000
 8000e74:	20000114 	.word	0x20000114
 8000e78:	200002e4 	.word	0x200002e4
 8000e7c:	200000a8 	.word	0x200000a8
 8000e80:	20000000 	.word	0x20000000
 8000e84:	2000019c 	.word	0x2000019c
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000138 	.word	0x20000138

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	2230      	movs	r2, #48	; 0x30
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 fffe 	bl	8006ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <SystemClock_Config+0xc8>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <SystemClock_Config+0xc8>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <SystemClock_Config+0xc8>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <SystemClock_Config+0xcc>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <SystemClock_Config+0xcc>)
 8000ede:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <SystemClock_Config+0xcc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f04:	2308      	movs	r3, #8
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f10:	2304      	movs	r3, #4
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 fc73 	bl	8004804 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f24:	f001 fd82 	bl	8002a2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2103      	movs	r1, #3
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fed5 	bl	8004cf4 <HAL_RCC_ClockConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f50:	f001 fd6c 	bl	8002a2c <Error_Handler>
  }
}
 8000f54:	bf00      	nop
 8000f56:	3750      	adds	r7, #80	; 0x50
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000

08000f64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <MX_ADC1_Init+0xa0>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f7c:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fca:	f001 fffb 	bl	8002fc4 <HAL_ADC_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000fd4:	f001 fd2a 	bl	8002a2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_ADC1_Init+0x9c>)
 8000fea:	f002 fa87 	bl	80034fc <HAL_ADC_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ff4:	f001 fd1a 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200001f4 	.word	0x200001f4
 8001004:	40012000 	.word	0x40012000

08001008 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_SPI3_Init+0x68>)
 800100e:	4a19      	ldr	r2, [pc, #100]	; (8001074 <MX_SPI3_Init+0x6c>)
 8001010:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_SPI3_Init+0x68>)
 8001014:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001018:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_SPI3_Init+0x68>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <MX_SPI3_Init+0x68>)
 8001022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001026:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_SPI3_Init+0x68>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <MX_SPI3_Init+0x68>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_SPI3_Init+0x68>)
 8001036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_SPI3_Init+0x68>)
 800103e:	2208      	movs	r2, #8
 8001040:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_SPI3_Init+0x68>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_SPI3_Init+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_SPI3_Init+0x68>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_SPI3_Init+0x68>)
 8001056:	220a      	movs	r2, #10
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_SPI3_Init+0x68>)
 800105c:	f004 f846 	bl	80050ec <HAL_SPI_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001066:	f001 fce1 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000019c 	.word	0x2000019c
 8001074:	40003c00 	.word	0x40003c00

08001078 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <MX_TIM3_Init+0x90>)
 8001096:	4a1d      	ldr	r2, [pc, #116]	; (800110c <MX_TIM3_Init+0x94>)
 8001098:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <MX_TIM3_Init+0x90>)
 800109c:	2263      	movs	r2, #99	; 0x63
 800109e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <MX_TIM3_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_TIM3_Init+0x90>)
 80010a8:	2264      	movs	r2, #100	; 0x64
 80010aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_TIM3_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_TIM3_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010b8:	4813      	ldr	r0, [pc, #76]	; (8001108 <MX_TIM3_Init+0x90>)
 80010ba:	f004 fbbb 	bl	8005834 <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80010c4:	f001 fcb2 	bl	8002a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4619      	mov	r1, r3
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_TIM3_Init+0x90>)
 80010d6:	f004 fdc1 	bl	8005c5c <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80010e0:	f001 fca4 	bl	8002a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010e4:	2320      	movs	r3, #32
 80010e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_TIM3_Init+0x90>)
 80010f2:	f004 ffb9 	bl	8006068 <HAL_TIMEx_MasterConfigSynchronization>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80010fc:	f001 fc96 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000154 	.word	0x20000154
 800110c:	40000400 	.word	0x40000400

08001110 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_TIM11_Init+0x40>)
 8001116:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <MX_TIM11_Init+0x44>)
 8001118:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <MX_TIM11_Init+0x40>)
 800111c:	2263      	movs	r2, #99	; 0x63
 800111e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_TIM11_Init+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_TIM11_Init+0x40>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_TIM11_Init+0x40>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_TIM11_Init+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_TIM11_Init+0x40>)
 800113c:	f004 fb7a 	bl	8005834 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001146:	f001 fc71 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000023c 	.word	0x2000023c
 8001154:	40014800 	.word	0x40014800

08001158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_USART2_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USART2_UART_Init+0x4c>)
 8001190:	f004 ffec 	bl	800616c <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f001 fc47 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002e4 	.word	0x200002e4
 80011a8:	40004400 	.word	0x40004400

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2038      	movs	r0, #56	; 0x38
 80011d4:	f002 fd27 	bl	8003c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011d8:	2038      	movs	r0, #56	; 0x38
 80011da:	f002 fd40 	bl	8003c5e <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b44      	ldr	r3, [pc, #272]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a43      	ldr	r2, [pc, #268]	; (8001318 <MX_GPIO_Init+0x12c>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a3c      	ldr	r2, [pc, #240]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b36      	ldr	r3, [pc, #216]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a35      	ldr	r2, [pc, #212]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b33      	ldr	r3, [pc, #204]	; (8001318 <MX_GPIO_Init+0x12c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <MX_GPIO_Init+0x12c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2e      	ldr	r2, [pc, #184]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <MX_GPIO_Init+0x12c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2120      	movs	r1, #32
 8001276:	4829      	ldr	r0, [pc, #164]	; (800131c <MX_GPIO_Init+0x130>)
 8001278:	f003 faaa 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001282:	4827      	ldr	r0, [pc, #156]	; (8001320 <MX_GPIO_Init+0x134>)
 8001284:	f003 faa4 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	4825      	ldr	r0, [pc, #148]	; (8001324 <MX_GPIO_Init+0x138>)
 800128e:	f003 fa9f 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001298:	4820      	ldr	r0, [pc, #128]	; (800131c <MX_GPIO_Init+0x130>)
 800129a:	f003 fa99 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a4:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MX_GPIO_Init+0x13c>)
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	481c      	ldr	r0, [pc, #112]	; (8001324 <MX_GPIO_Init+0x138>)
 80012b4:	f003 f8f0 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 80012b8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <MX_GPIO_Init+0x130>)
 80012d2:	f003 f8e1 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	480c      	ldr	r0, [pc, #48]	; (8001320 <MX_GPIO_Init+0x134>)
 80012f0:	f003 f8d2 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_GPIO_Init+0x138>)
 800130c:	f003 f8c4 	bl	8004498 <HAL_GPIO_Init>

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	10210000 	.word	0x10210000

0800132c <UARTRecieveIT>:

/* USER CODE BEGIN 4 */
uint16_t UARTRecieveIT()
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8001332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001336:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <UARTRecieveIT+0x54>)
 800133a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800133c:	461a      	mov	r2, r3
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <UARTRecieveIT+0x54>)
 8001340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001342:	b29b      	uxth	r3, r3
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <UARTRecieveIT+0x58>)
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	4293      	cmp	r3, r2
 800134c:	d010      	beq.n	8001370 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <UARTRecieveIT+0x58>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <UARTRecieveIT+0x5c>)
 8001354:	5cd3      	ldrb	r3, [r2, r3]
 8001356:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <UARTRecieveIT+0x58>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <UARTRecieveIT+0x54>)
 8001360:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001362:	fbb3 f1f2 	udiv	r1, r3, r2
 8001366:	fb02 f201 	mul.w	r2, r2, r1
 800136a:	1a9b      	subs	r3, r3, r2
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <UARTRecieveIT+0x58>)
 800136e:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001370:	88fb      	ldrh	r3, [r7, #6]
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200002e4 	.word	0x200002e4
 8001384:	2000013c 	.word	0x2000013c
 8001388:	20000114 	.word	0x20000114

0800138c <Menu>:

void Menu(int16_t input)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
	if ((input <= 90) && (input >= 65))
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	2b5a      	cmp	r3, #90	; 0x5a
 800139c:	dc07      	bgt.n	80013ae <Menu+0x22>
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	2b40      	cmp	r3, #64	; 0x40
 80013a4:	dd03      	ble.n	80013ae <Menu+0x22>
	{
		input += 32;
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	3320      	adds	r3, #32
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	80fb      	strh	r3, [r7, #6]
	}

	switch (State)
 80013ae:	4ba4      	ldr	r3, [pc, #656]	; (8001640 <Menu+0x2b4>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	f201 819a 	bhi.w	80026ec <Menu+0x1360>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <Menu+0x34>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013e1 	.word	0x080013e1
 80013c4:	08001493 	.word	0x08001493
 80013c8:	08001501 	.word	0x08001501
 80013cc:	0800168d 	.word	0x0800168d
 80013d0:	08001ae7 	.word	0x08001ae7
 80013d4:	08001c09 	.word	0x08001c09
 80013d8:	0800208d 	.word	0x0800208d
 80013dc:	080021e5 	.word	0x080021e5
	{
	case Mode_Menu:
		sprintf(TxDataBuffer, "--------------\r\n");
 80013e0:	4998      	ldr	r1, [pc, #608]	; (8001644 <Menu+0x2b8>)
 80013e2:	4899      	ldr	r0, [pc, #612]	; (8001648 <Menu+0x2bc>)
 80013e4:	f005 fd66 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80013e8:	4897      	ldr	r0, [pc, #604]	; (8001648 <Menu+0x2bc>)
 80013ea:	f7fe fef9 	bl	80001e0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	2364      	movs	r3, #100	; 0x64
 80013f4:	4994      	ldr	r1, [pc, #592]	; (8001648 <Menu+0x2bc>)
 80013f6:	4895      	ldr	r0, [pc, #596]	; (800164c <Menu+0x2c0>)
 80013f8:	f004 ff05 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "Mode Select\r\n");
 80013fc:	4994      	ldr	r1, [pc, #592]	; (8001650 <Menu+0x2c4>)
 80013fe:	4892      	ldr	r0, [pc, #584]	; (8001648 <Menu+0x2bc>)
 8001400:	f005 fd58 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001404:	4890      	ldr	r0, [pc, #576]	; (8001648 <Menu+0x2bc>)
 8001406:	f7fe feeb 	bl	80001e0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	2364      	movs	r3, #100	; 0x64
 8001410:	498d      	ldr	r1, [pc, #564]	; (8001648 <Menu+0x2bc>)
 8001412:	488e      	ldr	r0, [pc, #568]	; (800164c <Menu+0x2c0>)
 8001414:	f004 fef7 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  1 : Sawtooth\r\n");
 8001418:	498e      	ldr	r1, [pc, #568]	; (8001654 <Menu+0x2c8>)
 800141a:	488b      	ldr	r0, [pc, #556]	; (8001648 <Menu+0x2bc>)
 800141c:	f005 fd4a 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001420:	4889      	ldr	r0, [pc, #548]	; (8001648 <Menu+0x2bc>)
 8001422:	f7fe fedd 	bl	80001e0 <strlen>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	2364      	movs	r3, #100	; 0x64
 800142c:	4986      	ldr	r1, [pc, #536]	; (8001648 <Menu+0x2bc>)
 800142e:	4887      	ldr	r0, [pc, #540]	; (800164c <Menu+0x2c0>)
 8001430:	f004 fee9 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  2 : Sine\r\n");
 8001434:	4988      	ldr	r1, [pc, #544]	; (8001658 <Menu+0x2cc>)
 8001436:	4884      	ldr	r0, [pc, #528]	; (8001648 <Menu+0x2bc>)
 8001438:	f005 fd3c 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800143c:	4882      	ldr	r0, [pc, #520]	; (8001648 <Menu+0x2bc>)
 800143e:	f7fe fecf 	bl	80001e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	2364      	movs	r3, #100	; 0x64
 8001448:	497f      	ldr	r1, [pc, #508]	; (8001648 <Menu+0x2bc>)
 800144a:	4880      	ldr	r0, [pc, #512]	; (800164c <Menu+0x2c0>)
 800144c:	f004 fedb 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  3 : Square\r\n");
 8001450:	4982      	ldr	r1, [pc, #520]	; (800165c <Menu+0x2d0>)
 8001452:	487d      	ldr	r0, [pc, #500]	; (8001648 <Menu+0x2bc>)
 8001454:	f005 fd2e 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001458:	487b      	ldr	r0, [pc, #492]	; (8001648 <Menu+0x2bc>)
 800145a:	f7fe fec1 	bl	80001e0 <strlen>
 800145e:	4603      	mov	r3, r0
 8001460:	b29a      	uxth	r2, r3
 8001462:	2364      	movs	r3, #100	; 0x64
 8001464:	4978      	ldr	r1, [pc, #480]	; (8001648 <Menu+0x2bc>)
 8001466:	4879      	ldr	r0, [pc, #484]	; (800164c <Menu+0x2c0>)
 8001468:	f004 fecd 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "--------------\r\n");
 800146c:	4975      	ldr	r1, [pc, #468]	; (8001644 <Menu+0x2b8>)
 800146e:	4876      	ldr	r0, [pc, #472]	; (8001648 <Menu+0x2bc>)
 8001470:	f005 fd20 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001474:	4874      	ldr	r0, [pc, #464]	; (8001648 <Menu+0x2bc>)
 8001476:	f7fe feb3 	bl	80001e0 <strlen>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	4971      	ldr	r1, [pc, #452]	; (8001648 <Menu+0x2bc>)
 8001482:	4872      	ldr	r0, [pc, #456]	; (800164c <Menu+0x2c0>)
 8001484:	f004 febf 	bl	8006206 <HAL_UART_Transmit>
		State = Mode_Wait;
 8001488:	4b6d      	ldr	r3, [pc, #436]	; (8001640 <Menu+0x2b4>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
		break;
 800148e:	f001 b92d 	b.w	80026ec <Menu+0x1360>
	case Mode_Wait:
		switch (input)
 8001492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001496:	2b33      	cmp	r3, #51	; 0x33
 8001498:	d018      	beq.n	80014cc <Menu+0x140>
 800149a:	2b33      	cmp	r3, #51	; 0x33
 800149c:	dc1d      	bgt.n	80014da <Menu+0x14e>
 800149e:	2b32      	cmp	r3, #50	; 0x32
 80014a0:	d00d      	beq.n	80014be <Menu+0x132>
 80014a2:	2b32      	cmp	r3, #50	; 0x32
 80014a4:	dc19      	bgt.n	80014da <Menu+0x14e>
 80014a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014aa:	d026      	beq.n	80014fa <Menu+0x16e>
 80014ac:	2b31      	cmp	r3, #49	; 0x31
 80014ae:	d114      	bne.n	80014da <Menu+0x14e>
		{
		case -1:
			break;
		case 49:
			State = Saw_Menu;
 80014b0:	4b63      	ldr	r3, [pc, #396]	; (8001640 <Menu+0x2b4>)
 80014b2:	2202      	movs	r2, #2
 80014b4:	701a      	strb	r2, [r3, #0]
			Mode = Sawtooth;
 80014b6:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <Menu+0x2d4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
			break;
 80014bc:	e01e      	b.n	80014fc <Menu+0x170>
		case 50:
			State = Sine_Menu;
 80014be:	4b60      	ldr	r3, [pc, #384]	; (8001640 <Menu+0x2b4>)
 80014c0:	2204      	movs	r2, #4
 80014c2:	701a      	strb	r2, [r3, #0]
			Mode = Sine;
 80014c4:	4b66      	ldr	r3, [pc, #408]	; (8001660 <Menu+0x2d4>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	701a      	strb	r2, [r3, #0]
			break;
 80014ca:	e017      	b.n	80014fc <Menu+0x170>
		case 51:
			State = Square_Menu;
 80014cc:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <Menu+0x2b4>)
 80014ce:	2206      	movs	r2, #6
 80014d0:	701a      	strb	r2, [r3, #0]
			Mode = Square;
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <Menu+0x2d4>)
 80014d4:	2203      	movs	r2, #3
 80014d6:	701a      	strb	r2, [r3, #0]
			break;
 80014d8:	e010      	b.n	80014fc <Menu+0x170>
		default:
			sprintf(TxDataBuffer, "Wrong Input\r\n");
 80014da:	4962      	ldr	r1, [pc, #392]	; (8001664 <Menu+0x2d8>)
 80014dc:	485a      	ldr	r0, [pc, #360]	; (8001648 <Menu+0x2bc>)
 80014de:	f005 fce9 	bl	8006eb4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80014e2:	4859      	ldr	r0, [pc, #356]	; (8001648 <Menu+0x2bc>)
 80014e4:	f7fe fe7c 	bl	80001e0 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	4955      	ldr	r1, [pc, #340]	; (8001648 <Menu+0x2bc>)
 80014f2:	4856      	ldr	r0, [pc, #344]	; (800164c <Menu+0x2c0>)
 80014f4:	f004 fe87 	bl	8006206 <HAL_UART_Transmit>
			break;
 80014f8:	e000      	b.n	80014fc <Menu+0x170>
			break;
 80014fa:	bf00      	nop
		}
		break;
 80014fc:	f001 b8f6 	b.w	80026ec <Menu+0x1360>
	case Saw_Menu:
		sprintf(TxDataBuffer, "--------------\r\n");
 8001500:	4950      	ldr	r1, [pc, #320]	; (8001644 <Menu+0x2b8>)
 8001502:	4851      	ldr	r0, [pc, #324]	; (8001648 <Menu+0x2bc>)
 8001504:	f005 fcd6 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001508:	484f      	ldr	r0, [pc, #316]	; (8001648 <Menu+0x2bc>)
 800150a:	f7fe fe69 	bl	80001e0 <strlen>
 800150e:	4603      	mov	r3, r0
 8001510:	b29a      	uxth	r2, r3
 8001512:	2364      	movs	r3, #100	; 0x64
 8001514:	494c      	ldr	r1, [pc, #304]	; (8001648 <Menu+0x2bc>)
 8001516:	484d      	ldr	r0, [pc, #308]	; (800164c <Menu+0x2c0>)
 8001518:	f004 fe75 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "Sawtooth\r\n");
 800151c:	4952      	ldr	r1, [pc, #328]	; (8001668 <Menu+0x2dc>)
 800151e:	484a      	ldr	r0, [pc, #296]	; (8001648 <Menu+0x2bc>)
 8001520:	f005 fcc8 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001524:	4848      	ldr	r0, [pc, #288]	; (8001648 <Menu+0x2bc>)
 8001526:	f7fe fe5b 	bl	80001e0 <strlen>
 800152a:	4603      	mov	r3, r0
 800152c:	b29a      	uxth	r2, r3
 800152e:	2364      	movs	r3, #100	; 0x64
 8001530:	4945      	ldr	r1, [pc, #276]	; (8001648 <Menu+0x2bc>)
 8001532:	4846      	ldr	r0, [pc, #280]	; (800164c <Menu+0x2c0>)
 8001534:	f004 fe67 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  1 : Frequency +\r\n");
 8001538:	494c      	ldr	r1, [pc, #304]	; (800166c <Menu+0x2e0>)
 800153a:	4843      	ldr	r0, [pc, #268]	; (8001648 <Menu+0x2bc>)
 800153c:	f005 fcba 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001540:	4841      	ldr	r0, [pc, #260]	; (8001648 <Menu+0x2bc>)
 8001542:	f7fe fe4d 	bl	80001e0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	2364      	movs	r3, #100	; 0x64
 800154c:	493e      	ldr	r1, [pc, #248]	; (8001648 <Menu+0x2bc>)
 800154e:	483f      	ldr	r0, [pc, #252]	; (800164c <Menu+0x2c0>)
 8001550:	f004 fe59 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  2 : Frequency -\r\n");
 8001554:	4946      	ldr	r1, [pc, #280]	; (8001670 <Menu+0x2e4>)
 8001556:	483c      	ldr	r0, [pc, #240]	; (8001648 <Menu+0x2bc>)
 8001558:	f005 fcac 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800155c:	483a      	ldr	r0, [pc, #232]	; (8001648 <Menu+0x2bc>)
 800155e:	f7fe fe3f 	bl	80001e0 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	b29a      	uxth	r2, r3
 8001566:	2364      	movs	r3, #100	; 0x64
 8001568:	4937      	ldr	r1, [pc, #220]	; (8001648 <Menu+0x2bc>)
 800156a:	4838      	ldr	r0, [pc, #224]	; (800164c <Menu+0x2c0>)
 800156c:	f004 fe4b 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  3 : V_Max +\r\n");
 8001570:	4940      	ldr	r1, [pc, #256]	; (8001674 <Menu+0x2e8>)
 8001572:	4835      	ldr	r0, [pc, #212]	; (8001648 <Menu+0x2bc>)
 8001574:	f005 fc9e 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001578:	4833      	ldr	r0, [pc, #204]	; (8001648 <Menu+0x2bc>)
 800157a:	f7fe fe31 	bl	80001e0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b29a      	uxth	r2, r3
 8001582:	2364      	movs	r3, #100	; 0x64
 8001584:	4930      	ldr	r1, [pc, #192]	; (8001648 <Menu+0x2bc>)
 8001586:	4831      	ldr	r0, [pc, #196]	; (800164c <Menu+0x2c0>)
 8001588:	f004 fe3d 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  4 : V_Max -\r\n");
 800158c:	493a      	ldr	r1, [pc, #232]	; (8001678 <Menu+0x2ec>)
 800158e:	482e      	ldr	r0, [pc, #184]	; (8001648 <Menu+0x2bc>)
 8001590:	f005 fc90 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001594:	482c      	ldr	r0, [pc, #176]	; (8001648 <Menu+0x2bc>)
 8001596:	f7fe fe23 	bl	80001e0 <strlen>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	2364      	movs	r3, #100	; 0x64
 80015a0:	4929      	ldr	r1, [pc, #164]	; (8001648 <Menu+0x2bc>)
 80015a2:	482a      	ldr	r0, [pc, #168]	; (800164c <Menu+0x2c0>)
 80015a4:	f004 fe2f 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  5 : V_Min +\r\n");
 80015a8:	4934      	ldr	r1, [pc, #208]	; (800167c <Menu+0x2f0>)
 80015aa:	4827      	ldr	r0, [pc, #156]	; (8001648 <Menu+0x2bc>)
 80015ac:	f005 fc82 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80015b0:	4825      	ldr	r0, [pc, #148]	; (8001648 <Menu+0x2bc>)
 80015b2:	f7fe fe15 	bl	80001e0 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	2364      	movs	r3, #100	; 0x64
 80015bc:	4922      	ldr	r1, [pc, #136]	; (8001648 <Menu+0x2bc>)
 80015be:	4823      	ldr	r0, [pc, #140]	; (800164c <Menu+0x2c0>)
 80015c0:	f004 fe21 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  6 : V_Min -\r\n");
 80015c4:	492e      	ldr	r1, [pc, #184]	; (8001680 <Menu+0x2f4>)
 80015c6:	4820      	ldr	r0, [pc, #128]	; (8001648 <Menu+0x2bc>)
 80015c8:	f005 fc74 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80015cc:	481e      	ldr	r0, [pc, #120]	; (8001648 <Menu+0x2bc>)
 80015ce:	f7fe fe07 	bl	80001e0 <strlen>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	2364      	movs	r3, #100	; 0x64
 80015d8:	491b      	ldr	r1, [pc, #108]	; (8001648 <Menu+0x2bc>)
 80015da:	481c      	ldr	r0, [pc, #112]	; (800164c <Menu+0x2c0>)
 80015dc:	f004 fe13 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  7 : Slope Up/Down\r\n");
 80015e0:	4928      	ldr	r1, [pc, #160]	; (8001684 <Menu+0x2f8>)
 80015e2:	4819      	ldr	r0, [pc, #100]	; (8001648 <Menu+0x2bc>)
 80015e4:	f005 fc66 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80015e8:	4817      	ldr	r0, [pc, #92]	; (8001648 <Menu+0x2bc>)
 80015ea:	f7fe fdf9 	bl	80001e0 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	2364      	movs	r3, #100	; 0x64
 80015f4:	4914      	ldr	r1, [pc, #80]	; (8001648 <Menu+0x2bc>)
 80015f6:	4815      	ldr	r0, [pc, #84]	; (800164c <Menu+0x2c0>)
 80015f8:	f004 fe05 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  9 : back\r\n");
 80015fc:	4922      	ldr	r1, [pc, #136]	; (8001688 <Menu+0x2fc>)
 80015fe:	4812      	ldr	r0, [pc, #72]	; (8001648 <Menu+0x2bc>)
 8001600:	f005 fc58 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <Menu+0x2bc>)
 8001606:	f7fe fdeb 	bl	80001e0 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	b29a      	uxth	r2, r3
 800160e:	2364      	movs	r3, #100	; 0x64
 8001610:	490d      	ldr	r1, [pc, #52]	; (8001648 <Menu+0x2bc>)
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <Menu+0x2c0>)
 8001614:	f004 fdf7 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "--------------\r\n");
 8001618:	490a      	ldr	r1, [pc, #40]	; (8001644 <Menu+0x2b8>)
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <Menu+0x2bc>)
 800161c:	f005 fc4a 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <Menu+0x2bc>)
 8001622:	f7fe fddd 	bl	80001e0 <strlen>
 8001626:	4603      	mov	r3, r0
 8001628:	b29a      	uxth	r2, r3
 800162a:	2364      	movs	r3, #100	; 0x64
 800162c:	4906      	ldr	r1, [pc, #24]	; (8001648 <Menu+0x2bc>)
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <Menu+0x2c0>)
 8001630:	f004 fde9 	bl	8006206 <HAL_UART_Transmit>
		State = Saw_Wait;
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <Menu+0x2b4>)
 8001636:	2203      	movs	r2, #3
 8001638:	701a      	strb	r2, [r3, #0]
		break;
 800163a:	f001 b857 	b.w	80026ec <Menu+0x1360>
 800163e:	bf00      	nop
 8001640:	20000135 	.word	0x20000135
 8001644:	08008798 	.word	0x08008798
 8001648:	200000b0 	.word	0x200000b0
 800164c:	200002e4 	.word	0x200002e4
 8001650:	080087ac 	.word	0x080087ac
 8001654:	080087bc 	.word	0x080087bc
 8001658:	080087d0 	.word	0x080087d0
 800165c:	080087e0 	.word	0x080087e0
 8001660:	20000136 	.word	0x20000136
 8001664:	080087f0 	.word	0x080087f0
 8001668:	08008800 	.word	0x08008800
 800166c:	0800880c 	.word	0x0800880c
 8001670:	08008820 	.word	0x08008820
 8001674:	08008834 	.word	0x08008834
 8001678:	08008844 	.word	0x08008844
 800167c:	08008854 	.word	0x08008854
 8001680:	08008864 	.word	0x08008864
 8001684:	08008874 	.word	0x08008874
 8001688:	0800888c 	.word	0x0800888c
	case Saw_Wait:
		switch (input)
 800168c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001690:	3301      	adds	r3, #1
 8001692:	2b3a      	cmp	r3, #58	; 0x3a
 8001694:	f200 8214 	bhi.w	8001ac0 <Menu+0x734>
 8001698:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <Menu+0x314>)
 800169a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169e:	bf00      	nop
 80016a0:	08001ae1 	.word	0x08001ae1
 80016a4:	08001ac1 	.word	0x08001ac1
 80016a8:	08001ac1 	.word	0x08001ac1
 80016ac:	08001ac1 	.word	0x08001ac1
 80016b0:	08001ac1 	.word	0x08001ac1
 80016b4:	08001ac1 	.word	0x08001ac1
 80016b8:	08001ac1 	.word	0x08001ac1
 80016bc:	08001ac1 	.word	0x08001ac1
 80016c0:	08001ac1 	.word	0x08001ac1
 80016c4:	08001ac1 	.word	0x08001ac1
 80016c8:	08001ac1 	.word	0x08001ac1
 80016cc:	08001ac1 	.word	0x08001ac1
 80016d0:	08001ac1 	.word	0x08001ac1
 80016d4:	08001ac1 	.word	0x08001ac1
 80016d8:	08001ac1 	.word	0x08001ac1
 80016dc:	08001ac1 	.word	0x08001ac1
 80016e0:	08001ac1 	.word	0x08001ac1
 80016e4:	08001ac1 	.word	0x08001ac1
 80016e8:	08001ac1 	.word	0x08001ac1
 80016ec:	08001ac1 	.word	0x08001ac1
 80016f0:	08001ac1 	.word	0x08001ac1
 80016f4:	08001ac1 	.word	0x08001ac1
 80016f8:	08001ac1 	.word	0x08001ac1
 80016fc:	08001ac1 	.word	0x08001ac1
 8001700:	08001ac1 	.word	0x08001ac1
 8001704:	08001ac1 	.word	0x08001ac1
 8001708:	08001ac1 	.word	0x08001ac1
 800170c:	08001ac1 	.word	0x08001ac1
 8001710:	08001ac1 	.word	0x08001ac1
 8001714:	08001ac1 	.word	0x08001ac1
 8001718:	08001ac1 	.word	0x08001ac1
 800171c:	08001ac1 	.word	0x08001ac1
 8001720:	08001ac1 	.word	0x08001ac1
 8001724:	08001ac1 	.word	0x08001ac1
 8001728:	08001ac1 	.word	0x08001ac1
 800172c:	08001ac1 	.word	0x08001ac1
 8001730:	08001ac1 	.word	0x08001ac1
 8001734:	08001ac1 	.word	0x08001ac1
 8001738:	08001ac1 	.word	0x08001ac1
 800173c:	08001ac1 	.word	0x08001ac1
 8001740:	08001ac1 	.word	0x08001ac1
 8001744:	08001ac1 	.word	0x08001ac1
 8001748:	08001ac1 	.word	0x08001ac1
 800174c:	08001ac1 	.word	0x08001ac1
 8001750:	08001ac1 	.word	0x08001ac1
 8001754:	08001ac1 	.word	0x08001ac1
 8001758:	08001ac1 	.word	0x08001ac1
 800175c:	08001ac1 	.word	0x08001ac1
 8001760:	08001ac1 	.word	0x08001ac1
 8001764:	08001ac1 	.word	0x08001ac1
 8001768:	0800178d 	.word	0x0800178d
 800176c:	080017fb 	.word	0x080017fb
 8001770:	08001869 	.word	0x08001869
 8001774:	080018d7 	.word	0x080018d7
 8001778:	08001955 	.word	0x08001955
 800177c:	080019d3 	.word	0x080019d3
 8001780:	08001a7b 	.word	0x08001a7b
 8001784:	08001ac1 	.word	0x08001ac1
 8001788:	08001ab3 	.word	0x08001ab3
		{
		case -1:
			break;
		case 49:  //1 F+
			if (Hz < 100)
 800178c:	4ba3      	ldr	r3, [pc, #652]	; (8001a1c <Menu+0x690>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b63      	cmp	r3, #99	; 0x63
 8001792:	d81f      	bhi.n	80017d4 <Menu+0x448>
			{
				Hz += 1;
 8001794:	4ba1      	ldr	r3, [pc, #644]	; (8001a1c <Menu+0x690>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b9f      	ldr	r3, [pc, #636]	; (8001a1c <Menu+0x690>)
 800179e:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "Frequency = %d.%d Hz\r\n", Hz/10, Hz%10);
 80017a0:	4b9e      	ldr	r3, [pc, #632]	; (8001a1c <Menu+0x690>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4a9e      	ldr	r2, [pc, #632]	; (8001a20 <Menu+0x694>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	08db      	lsrs	r3, r3, #3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	4b9a      	ldr	r3, [pc, #616]	; (8001a1c <Menu+0x690>)
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	4b9a      	ldr	r3, [pc, #616]	; (8001a20 <Menu+0x694>)
 80017b6:	fba3 1302 	umull	r1, r3, r3, r2
 80017ba:	08d9      	lsrs	r1, r3, #3
 80017bc:	460b      	mov	r3, r1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	4602      	mov	r2, r0
 80017ca:	4996      	ldr	r1, [pc, #600]	; (8001a24 <Menu+0x698>)
 80017cc:	4896      	ldr	r0, [pc, #600]	; (8001a28 <Menu+0x69c>)
 80017ce:	f005 fb71 	bl	8006eb4 <siprintf>
 80017d2:	e007      	b.n	80017e4 <Menu+0x458>
			}
			else if (Hz == 100)
 80017d4:	4b91      	ldr	r3, [pc, #580]	; (8001a1c <Menu+0x690>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d103      	bne.n	80017e4 <Menu+0x458>
			{
				sprintf(TxDataBuffer, "Frequency upper limit is 10 Hz\r\n");
 80017dc:	4993      	ldr	r1, [pc, #588]	; (8001a2c <Menu+0x6a0>)
 80017de:	4892      	ldr	r0, [pc, #584]	; (8001a28 <Menu+0x69c>)
 80017e0:	f005 fb68 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80017e4:	4890      	ldr	r0, [pc, #576]	; (8001a28 <Menu+0x69c>)
 80017e6:	f7fe fcfb 	bl	80001e0 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	2364      	movs	r3, #100	; 0x64
 80017f0:	498d      	ldr	r1, [pc, #564]	; (8001a28 <Menu+0x69c>)
 80017f2:	488f      	ldr	r0, [pc, #572]	; (8001a30 <Menu+0x6a4>)
 80017f4:	f004 fd07 	bl	8006206 <HAL_UART_Transmit>
			break;
 80017f8:	e173      	b.n	8001ae2 <Menu+0x756>
		case 50:  //2 F-
			if (Hz > 0)
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <Menu+0x690>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01f      	beq.n	8001842 <Menu+0x4b6>
			{
				Hz -= 1;
 8001802:	4b86      	ldr	r3, [pc, #536]	; (8001a1c <Menu+0x690>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	3b01      	subs	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <Menu+0x690>)
 800180c:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "Frequency = %d.%d Hz\r\n", Hz/10, Hz%10);
 800180e:	4b83      	ldr	r3, [pc, #524]	; (8001a1c <Menu+0x690>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4a83      	ldr	r2, [pc, #524]	; (8001a20 <Menu+0x694>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	08db      	lsrs	r3, r3, #3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <Menu+0x690>)
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <Menu+0x694>)
 8001824:	fba3 1302 	umull	r1, r3, r3, r2
 8001828:	08d9      	lsrs	r1, r3, #3
 800182a:	460b      	mov	r3, r1
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4602      	mov	r2, r0
 8001838:	497a      	ldr	r1, [pc, #488]	; (8001a24 <Menu+0x698>)
 800183a:	487b      	ldr	r0, [pc, #492]	; (8001a28 <Menu+0x69c>)
 800183c:	f005 fb3a 	bl	8006eb4 <siprintf>
 8001840:	e007      	b.n	8001852 <Menu+0x4c6>
			}
			else if (Hz == 0)
 8001842:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <Menu+0x690>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <Menu+0x4c6>
			{
				sprintf(TxDataBuffer, "Frequency lower limit is 0 Hz\r\n");
 800184a:	497a      	ldr	r1, [pc, #488]	; (8001a34 <Menu+0x6a8>)
 800184c:	4876      	ldr	r0, [pc, #472]	; (8001a28 <Menu+0x69c>)
 800184e:	f005 fb31 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001852:	4875      	ldr	r0, [pc, #468]	; (8001a28 <Menu+0x69c>)
 8001854:	f7fe fcc4 	bl	80001e0 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	2364      	movs	r3, #100	; 0x64
 800185e:	4972      	ldr	r1, [pc, #456]	; (8001a28 <Menu+0x69c>)
 8001860:	4873      	ldr	r0, [pc, #460]	; (8001a30 <Menu+0x6a4>)
 8001862:	f004 fcd0 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001866:	e13c      	b.n	8001ae2 <Menu+0x756>
		case 51:  //3 V_Max+
			if (V_Max < 33)
 8001868:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <Menu+0x6ac>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b20      	cmp	r3, #32
 800186e:	d81f      	bhi.n	80018b0 <Menu+0x524>
			{
				V_Max += 1;
 8001870:	4b71      	ldr	r3, [pc, #452]	; (8001a38 <Menu+0x6ac>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <Menu+0x6ac>)
 800187a:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Max = %d.%d V\r\n", V_Max/10, V_Max%10);
 800187c:	4b6e      	ldr	r3, [pc, #440]	; (8001a38 <Menu+0x6ac>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4a67      	ldr	r2, [pc, #412]	; (8001a20 <Menu+0x694>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	08db      	lsrs	r3, r3, #3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4618      	mov	r0, r3
 800188c:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <Menu+0x6ac>)
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <Menu+0x694>)
 8001892:	fba3 1302 	umull	r1, r3, r3, r2
 8001896:	08d9      	lsrs	r1, r3, #3
 8001898:	460b      	mov	r3, r1
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	4602      	mov	r2, r0
 80018a6:	4965      	ldr	r1, [pc, #404]	; (8001a3c <Menu+0x6b0>)
 80018a8:	485f      	ldr	r0, [pc, #380]	; (8001a28 <Menu+0x69c>)
 80018aa:	f005 fb03 	bl	8006eb4 <siprintf>
 80018ae:	e007      	b.n	80018c0 <Menu+0x534>
			}
			else if (V_Max == 33)
 80018b0:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <Menu+0x6ac>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b21      	cmp	r3, #33	; 0x21
 80018b6:	d103      	bne.n	80018c0 <Menu+0x534>
			{
				sprintf(TxDataBuffer, "V_Max upper limit is 3.3 V\r\n");
 80018b8:	4961      	ldr	r1, [pc, #388]	; (8001a40 <Menu+0x6b4>)
 80018ba:	485b      	ldr	r0, [pc, #364]	; (8001a28 <Menu+0x69c>)
 80018bc:	f005 fafa 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80018c0:	4859      	ldr	r0, [pc, #356]	; (8001a28 <Menu+0x69c>)
 80018c2:	f7fe fc8d 	bl	80001e0 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	2364      	movs	r3, #100	; 0x64
 80018cc:	4956      	ldr	r1, [pc, #344]	; (8001a28 <Menu+0x69c>)
 80018ce:	4858      	ldr	r0, [pc, #352]	; (8001a30 <Menu+0x6a4>)
 80018d0:	f004 fc99 	bl	8006206 <HAL_UART_Transmit>
			break;
 80018d4:	e105      	b.n	8001ae2 <Menu+0x756>
		case 52:  //4 V_Max-
			if (V_Max == V_Min+1)
 80018d6:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <Menu+0x6ac>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <Menu+0x6b8>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d104      	bne.n	80018f0 <Menu+0x564>
			{
				sprintf(TxDataBuffer, "V_Max must be more than V_Min\r\n");
 80018e6:	4958      	ldr	r1, [pc, #352]	; (8001a48 <Menu+0x6bc>)
 80018e8:	484f      	ldr	r0, [pc, #316]	; (8001a28 <Menu+0x69c>)
 80018ea:	f005 fae3 	bl	8006eb4 <siprintf>
 80018ee:	e026      	b.n	800193e <Menu+0x5b2>
			}
			else if (V_Max > V_Min+1)
 80018f0:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <Menu+0x6ac>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <Menu+0x6b8>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dd1e      	ble.n	800193e <Menu+0x5b2>
			{
				V_Max -= 1;
 8001900:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <Menu+0x6ac>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <Menu+0x6ac>)
 800190a:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Max = %d.%d V\r\n", V_Max/10, V_Max%10);
 800190c:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <Menu+0x6ac>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4a43      	ldr	r2, [pc, #268]	; (8001a20 <Menu+0x694>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	08db      	lsrs	r3, r3, #3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <Menu+0x6ac>)
 800191e:	781a      	ldrb	r2, [r3, #0]
 8001920:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <Menu+0x694>)
 8001922:	fba3 1302 	umull	r1, r3, r3, r2
 8001926:	08d9      	lsrs	r1, r3, #3
 8001928:	460b      	mov	r3, r1
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4602      	mov	r2, r0
 8001936:	4941      	ldr	r1, [pc, #260]	; (8001a3c <Menu+0x6b0>)
 8001938:	483b      	ldr	r0, [pc, #236]	; (8001a28 <Menu+0x69c>)
 800193a:	f005 fabb 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800193e:	483a      	ldr	r0, [pc, #232]	; (8001a28 <Menu+0x69c>)
 8001940:	f7fe fc4e 	bl	80001e0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	2364      	movs	r3, #100	; 0x64
 800194a:	4937      	ldr	r1, [pc, #220]	; (8001a28 <Menu+0x69c>)
 800194c:	4838      	ldr	r0, [pc, #224]	; (8001a30 <Menu+0x6a4>)
 800194e:	f004 fc5a 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001952:	e0c6      	b.n	8001ae2 <Menu+0x756>
		case 53:  //5 V_Min+
			if (V_Min == V_Max-1)
 8001954:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <Menu+0x6b8>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <Menu+0x6ac>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	3b01      	subs	r3, #1
 8001960:	429a      	cmp	r2, r3
 8001962:	d104      	bne.n	800196e <Menu+0x5e2>
			{
				sprintf(TxDataBuffer, "V_Min must be less than to V_Max\r\n");
 8001964:	4939      	ldr	r1, [pc, #228]	; (8001a4c <Menu+0x6c0>)
 8001966:	4830      	ldr	r0, [pc, #192]	; (8001a28 <Menu+0x69c>)
 8001968:	f005 faa4 	bl	8006eb4 <siprintf>
 800196c:	e026      	b.n	80019bc <Menu+0x630>
			}
			else if (V_Min < V_Max-1)
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <Menu+0x6b8>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <Menu+0x6ac>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	3b01      	subs	r3, #1
 800197a:	429a      	cmp	r2, r3
 800197c:	da1e      	bge.n	80019bc <Menu+0x630>
			{
				V_Min += 1;
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <Menu+0x6b8>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <Menu+0x6b8>)
 8001988:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Min = %d.%d V\r\n", V_Min/10, V_Min%10);
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <Menu+0x6b8>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <Menu+0x694>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <Menu+0x6b8>)
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <Menu+0x694>)
 80019a0:	fba3 1302 	umull	r1, r3, r3, r2
 80019a4:	08d9      	lsrs	r1, r3, #3
 80019a6:	460b      	mov	r3, r1
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4602      	mov	r2, r0
 80019b4:	4926      	ldr	r1, [pc, #152]	; (8001a50 <Menu+0x6c4>)
 80019b6:	481c      	ldr	r0, [pc, #112]	; (8001a28 <Menu+0x69c>)
 80019b8:	f005 fa7c 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80019bc:	481a      	ldr	r0, [pc, #104]	; (8001a28 <Menu+0x69c>)
 80019be:	f7fe fc0f 	bl	80001e0 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	2364      	movs	r3, #100	; 0x64
 80019c8:	4917      	ldr	r1, [pc, #92]	; (8001a28 <Menu+0x69c>)
 80019ca:	4819      	ldr	r0, [pc, #100]	; (8001a30 <Menu+0x6a4>)
 80019cc:	f004 fc1b 	bl	8006206 <HAL_UART_Transmit>
			break;
 80019d0:	e087      	b.n	8001ae2 <Menu+0x756>
		case 54:  //6 V_Min-
			if (V_Min > 0)
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <Menu+0x6b8>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d03c      	beq.n	8001a54 <Menu+0x6c8>
			{
				V_Min -= 1;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <Menu+0x6b8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	3b01      	subs	r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <Menu+0x6b8>)
 80019e4:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Min = %d.%d V\r\n", V_Min/10, V_Min%10);
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <Menu+0x6b8>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <Menu+0x694>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	08db      	lsrs	r3, r3, #3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <Menu+0x6b8>)
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <Menu+0x694>)
 80019fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001a00:	08d9      	lsrs	r1, r3, #3
 8001a02:	460b      	mov	r3, r1
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4602      	mov	r2, r0
 8001a10:	490f      	ldr	r1, [pc, #60]	; (8001a50 <Menu+0x6c4>)
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <Menu+0x69c>)
 8001a14:	f005 fa4e 	bl	8006eb4 <siprintf>
 8001a18:	e024      	b.n	8001a64 <Menu+0x6d8>
 8001a1a:	bf00      	nop
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	cccccccd 	.word	0xcccccccd
 8001a24:	0800889c 	.word	0x0800889c
 8001a28:	200000b0 	.word	0x200000b0
 8001a2c:	080088b4 	.word	0x080088b4
 8001a30:	200002e4 	.word	0x200002e4
 8001a34:	080088d8 	.word	0x080088d8
 8001a38:	20000005 	.word	0x20000005
 8001a3c:	080088f8 	.word	0x080088f8
 8001a40:	0800890c 	.word	0x0800890c
 8001a44:	20000134 	.word	0x20000134
 8001a48:	0800892c 	.word	0x0800892c
 8001a4c:	0800894c 	.word	0x0800894c
 8001a50:	08008970 	.word	0x08008970
			}
			else if (V_Min == 0)
 8001a54:	4bbe      	ldr	r3, [pc, #760]	; (8001d50 <Menu+0x9c4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d103      	bne.n	8001a64 <Menu+0x6d8>
			{
				sprintf(TxDataBuffer, "V_Min lower limit is 0 V\r\n");
 8001a5c:	49bd      	ldr	r1, [pc, #756]	; (8001d54 <Menu+0x9c8>)
 8001a5e:	48be      	ldr	r0, [pc, #760]	; (8001d58 <Menu+0x9cc>)
 8001a60:	f005 fa28 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001a64:	48bc      	ldr	r0, [pc, #752]	; (8001d58 <Menu+0x9cc>)
 8001a66:	f7fe fbbb 	bl	80001e0 <strlen>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	2364      	movs	r3, #100	; 0x64
 8001a70:	49b9      	ldr	r1, [pc, #740]	; (8001d58 <Menu+0x9cc>)
 8001a72:	48ba      	ldr	r0, [pc, #744]	; (8001d5c <Menu+0x9d0>)
 8001a74:	f004 fbc7 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001a78:	e033      	b.n	8001ae2 <Menu+0x756>
		case 55:  //7 S
			Slope = -Slope;
 8001a7a:	4bb9      	ldr	r3, [pc, #740]	; (8001d60 <Menu+0x9d4>)
 8001a7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	425b      	negs	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	b25a      	sxtb	r2, r3
 8001a88:	4bb5      	ldr	r3, [pc, #724]	; (8001d60 <Menu+0x9d4>)
 8001a8a:	701a      	strb	r2, [r3, #0]
			sprintf(TxDataBuffer, "Slope = %d \r\n", Slope);
 8001a8c:	4bb4      	ldr	r3, [pc, #720]	; (8001d60 <Menu+0x9d4>)
 8001a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a92:	461a      	mov	r2, r3
 8001a94:	49b3      	ldr	r1, [pc, #716]	; (8001d64 <Menu+0x9d8>)
 8001a96:	48b0      	ldr	r0, [pc, #704]	; (8001d58 <Menu+0x9cc>)
 8001a98:	f005 fa0c 	bl	8006eb4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001a9c:	48ae      	ldr	r0, [pc, #696]	; (8001d58 <Menu+0x9cc>)
 8001a9e:	f7fe fb9f 	bl	80001e0 <strlen>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	2364      	movs	r3, #100	; 0x64
 8001aa8:	49ab      	ldr	r1, [pc, #684]	; (8001d58 <Menu+0x9cc>)
 8001aaa:	48ac      	ldr	r0, [pc, #688]	; (8001d5c <Menu+0x9d0>)
 8001aac:	f004 fbab 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001ab0:	e017      	b.n	8001ae2 <Menu+0x756>
		case 57:  //9 back
			State = Mode_Menu;
 8001ab2:	4bad      	ldr	r3, [pc, #692]	; (8001d68 <Menu+0x9dc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
			Mode = None;
 8001ab8:	4bac      	ldr	r3, [pc, #688]	; (8001d6c <Menu+0x9e0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
			break;
 8001abe:	e010      	b.n	8001ae2 <Menu+0x756>
		default:
			sprintf(TxDataBuffer, "Wrong Input\r\n");
 8001ac0:	49ab      	ldr	r1, [pc, #684]	; (8001d70 <Menu+0x9e4>)
 8001ac2:	48a5      	ldr	r0, [pc, #660]	; (8001d58 <Menu+0x9cc>)
 8001ac4:	f005 f9f6 	bl	8006eb4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001ac8:	48a3      	ldr	r0, [pc, #652]	; (8001d58 <Menu+0x9cc>)
 8001aca:	f7fe fb89 	bl	80001e0 <strlen>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad6:	49a0      	ldr	r1, [pc, #640]	; (8001d58 <Menu+0x9cc>)
 8001ad8:	48a0      	ldr	r0, [pc, #640]	; (8001d5c <Menu+0x9d0>)
 8001ada:	f004 fb94 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001ade:	e000      	b.n	8001ae2 <Menu+0x756>
			break;
 8001ae0:	bf00      	nop
		}
		break;
 8001ae2:	f000 be03 	b.w	80026ec <Menu+0x1360>
	case Sine_Menu:
		sprintf(TxDataBuffer, "--------------\r\n");
 8001ae6:	49a3      	ldr	r1, [pc, #652]	; (8001d74 <Menu+0x9e8>)
 8001ae8:	489b      	ldr	r0, [pc, #620]	; (8001d58 <Menu+0x9cc>)
 8001aea:	f005 f9e3 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001aee:	489a      	ldr	r0, [pc, #616]	; (8001d58 <Menu+0x9cc>)
 8001af0:	f7fe fb76 	bl	80001e0 <strlen>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	2364      	movs	r3, #100	; 0x64
 8001afa:	4997      	ldr	r1, [pc, #604]	; (8001d58 <Menu+0x9cc>)
 8001afc:	4897      	ldr	r0, [pc, #604]	; (8001d5c <Menu+0x9d0>)
 8001afe:	f004 fb82 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "Sine\r\n");
 8001b02:	499d      	ldr	r1, [pc, #628]	; (8001d78 <Menu+0x9ec>)
 8001b04:	4894      	ldr	r0, [pc, #592]	; (8001d58 <Menu+0x9cc>)
 8001b06:	f005 f9d5 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001b0a:	4893      	ldr	r0, [pc, #588]	; (8001d58 <Menu+0x9cc>)
 8001b0c:	f7fe fb68 	bl	80001e0 <strlen>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2364      	movs	r3, #100	; 0x64
 8001b16:	4990      	ldr	r1, [pc, #576]	; (8001d58 <Menu+0x9cc>)
 8001b18:	4890      	ldr	r0, [pc, #576]	; (8001d5c <Menu+0x9d0>)
 8001b1a:	f004 fb74 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  1 : Frequency +\r\n");
 8001b1e:	4997      	ldr	r1, [pc, #604]	; (8001d7c <Menu+0x9f0>)
 8001b20:	488d      	ldr	r0, [pc, #564]	; (8001d58 <Menu+0x9cc>)
 8001b22:	f005 f9c7 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001b26:	488c      	ldr	r0, [pc, #560]	; (8001d58 <Menu+0x9cc>)
 8001b28:	f7fe fb5a 	bl	80001e0 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	4989      	ldr	r1, [pc, #548]	; (8001d58 <Menu+0x9cc>)
 8001b34:	4889      	ldr	r0, [pc, #548]	; (8001d5c <Menu+0x9d0>)
 8001b36:	f004 fb66 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  2 : Frequency -\r\n");
 8001b3a:	4991      	ldr	r1, [pc, #580]	; (8001d80 <Menu+0x9f4>)
 8001b3c:	4886      	ldr	r0, [pc, #536]	; (8001d58 <Menu+0x9cc>)
 8001b3e:	f005 f9b9 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001b42:	4885      	ldr	r0, [pc, #532]	; (8001d58 <Menu+0x9cc>)
 8001b44:	f7fe fb4c 	bl	80001e0 <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2364      	movs	r3, #100	; 0x64
 8001b4e:	4982      	ldr	r1, [pc, #520]	; (8001d58 <Menu+0x9cc>)
 8001b50:	4882      	ldr	r0, [pc, #520]	; (8001d5c <Menu+0x9d0>)
 8001b52:	f004 fb58 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  3 : V_Max +\r\n");
 8001b56:	498b      	ldr	r1, [pc, #556]	; (8001d84 <Menu+0x9f8>)
 8001b58:	487f      	ldr	r0, [pc, #508]	; (8001d58 <Menu+0x9cc>)
 8001b5a:	f005 f9ab 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001b5e:	487e      	ldr	r0, [pc, #504]	; (8001d58 <Menu+0x9cc>)
 8001b60:	f7fe fb3e 	bl	80001e0 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	2364      	movs	r3, #100	; 0x64
 8001b6a:	497b      	ldr	r1, [pc, #492]	; (8001d58 <Menu+0x9cc>)
 8001b6c:	487b      	ldr	r0, [pc, #492]	; (8001d5c <Menu+0x9d0>)
 8001b6e:	f004 fb4a 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  4 : V_Max -\r\n");
 8001b72:	4985      	ldr	r1, [pc, #532]	; (8001d88 <Menu+0x9fc>)
 8001b74:	4878      	ldr	r0, [pc, #480]	; (8001d58 <Menu+0x9cc>)
 8001b76:	f005 f99d 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001b7a:	4877      	ldr	r0, [pc, #476]	; (8001d58 <Menu+0x9cc>)
 8001b7c:	f7fe fb30 	bl	80001e0 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	2364      	movs	r3, #100	; 0x64
 8001b86:	4974      	ldr	r1, [pc, #464]	; (8001d58 <Menu+0x9cc>)
 8001b88:	4874      	ldr	r0, [pc, #464]	; (8001d5c <Menu+0x9d0>)
 8001b8a:	f004 fb3c 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  5 : V_Min +\r\n");
 8001b8e:	497f      	ldr	r1, [pc, #508]	; (8001d8c <Menu+0xa00>)
 8001b90:	4871      	ldr	r0, [pc, #452]	; (8001d58 <Menu+0x9cc>)
 8001b92:	f005 f98f 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001b96:	4870      	ldr	r0, [pc, #448]	; (8001d58 <Menu+0x9cc>)
 8001b98:	f7fe fb22 	bl	80001e0 <strlen>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	2364      	movs	r3, #100	; 0x64
 8001ba2:	496d      	ldr	r1, [pc, #436]	; (8001d58 <Menu+0x9cc>)
 8001ba4:	486d      	ldr	r0, [pc, #436]	; (8001d5c <Menu+0x9d0>)
 8001ba6:	f004 fb2e 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  6 : V_Min -\r\n");
 8001baa:	4979      	ldr	r1, [pc, #484]	; (8001d90 <Menu+0xa04>)
 8001bac:	486a      	ldr	r0, [pc, #424]	; (8001d58 <Menu+0x9cc>)
 8001bae:	f005 f981 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001bb2:	4869      	ldr	r0, [pc, #420]	; (8001d58 <Menu+0x9cc>)
 8001bb4:	f7fe fb14 	bl	80001e0 <strlen>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2364      	movs	r3, #100	; 0x64
 8001bbe:	4966      	ldr	r1, [pc, #408]	; (8001d58 <Menu+0x9cc>)
 8001bc0:	4866      	ldr	r0, [pc, #408]	; (8001d5c <Menu+0x9d0>)
 8001bc2:	f004 fb20 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  9 : back\r\n");
 8001bc6:	4973      	ldr	r1, [pc, #460]	; (8001d94 <Menu+0xa08>)
 8001bc8:	4863      	ldr	r0, [pc, #396]	; (8001d58 <Menu+0x9cc>)
 8001bca:	f005 f973 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001bce:	4862      	ldr	r0, [pc, #392]	; (8001d58 <Menu+0x9cc>)
 8001bd0:	f7fe fb06 	bl	80001e0 <strlen>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	2364      	movs	r3, #100	; 0x64
 8001bda:	495f      	ldr	r1, [pc, #380]	; (8001d58 <Menu+0x9cc>)
 8001bdc:	485f      	ldr	r0, [pc, #380]	; (8001d5c <Menu+0x9d0>)
 8001bde:	f004 fb12 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "--------------\r\n");
 8001be2:	4964      	ldr	r1, [pc, #400]	; (8001d74 <Menu+0x9e8>)
 8001be4:	485c      	ldr	r0, [pc, #368]	; (8001d58 <Menu+0x9cc>)
 8001be6:	f005 f965 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001bea:	485b      	ldr	r0, [pc, #364]	; (8001d58 <Menu+0x9cc>)
 8001bec:	f7fe faf8 	bl	80001e0 <strlen>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	2364      	movs	r3, #100	; 0x64
 8001bf6:	4958      	ldr	r1, [pc, #352]	; (8001d58 <Menu+0x9cc>)
 8001bf8:	4858      	ldr	r0, [pc, #352]	; (8001d5c <Menu+0x9d0>)
 8001bfa:	f004 fb04 	bl	8006206 <HAL_UART_Transmit>
		State = Sine_Wait;
 8001bfe:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <Menu+0x9dc>)
 8001c00:	2205      	movs	r2, #5
 8001c02:	701a      	strb	r2, [r3, #0]
		break;
 8001c04:	f000 bd72 	b.w	80026ec <Menu+0x1360>
	case Sine_Wait:
		switch (input)
 8001c08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	2b3a      	cmp	r3, #58	; 0x3a
 8001c10:	f200 8205 	bhi.w	800201e <Menu+0xc92>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <Menu+0x890>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	0800203f 	.word	0x0800203f
 8001c20:	0800201f 	.word	0x0800201f
 8001c24:	0800201f 	.word	0x0800201f
 8001c28:	0800201f 	.word	0x0800201f
 8001c2c:	0800201f 	.word	0x0800201f
 8001c30:	0800201f 	.word	0x0800201f
 8001c34:	0800201f 	.word	0x0800201f
 8001c38:	0800201f 	.word	0x0800201f
 8001c3c:	0800201f 	.word	0x0800201f
 8001c40:	0800201f 	.word	0x0800201f
 8001c44:	0800201f 	.word	0x0800201f
 8001c48:	0800201f 	.word	0x0800201f
 8001c4c:	0800201f 	.word	0x0800201f
 8001c50:	0800201f 	.word	0x0800201f
 8001c54:	0800201f 	.word	0x0800201f
 8001c58:	0800201f 	.word	0x0800201f
 8001c5c:	0800201f 	.word	0x0800201f
 8001c60:	0800201f 	.word	0x0800201f
 8001c64:	0800201f 	.word	0x0800201f
 8001c68:	0800201f 	.word	0x0800201f
 8001c6c:	0800201f 	.word	0x0800201f
 8001c70:	0800201f 	.word	0x0800201f
 8001c74:	0800201f 	.word	0x0800201f
 8001c78:	0800201f 	.word	0x0800201f
 8001c7c:	0800201f 	.word	0x0800201f
 8001c80:	0800201f 	.word	0x0800201f
 8001c84:	0800201f 	.word	0x0800201f
 8001c88:	0800201f 	.word	0x0800201f
 8001c8c:	0800201f 	.word	0x0800201f
 8001c90:	0800201f 	.word	0x0800201f
 8001c94:	0800201f 	.word	0x0800201f
 8001c98:	0800201f 	.word	0x0800201f
 8001c9c:	0800201f 	.word	0x0800201f
 8001ca0:	0800201f 	.word	0x0800201f
 8001ca4:	0800201f 	.word	0x0800201f
 8001ca8:	0800201f 	.word	0x0800201f
 8001cac:	0800201f 	.word	0x0800201f
 8001cb0:	0800201f 	.word	0x0800201f
 8001cb4:	0800201f 	.word	0x0800201f
 8001cb8:	0800201f 	.word	0x0800201f
 8001cbc:	0800201f 	.word	0x0800201f
 8001cc0:	0800201f 	.word	0x0800201f
 8001cc4:	0800201f 	.word	0x0800201f
 8001cc8:	0800201f 	.word	0x0800201f
 8001ccc:	0800201f 	.word	0x0800201f
 8001cd0:	0800201f 	.word	0x0800201f
 8001cd4:	0800201f 	.word	0x0800201f
 8001cd8:	0800201f 	.word	0x0800201f
 8001cdc:	0800201f 	.word	0x0800201f
 8001ce0:	0800201f 	.word	0x0800201f
 8001ce4:	08001d09 	.word	0x08001d09
 8001ce8:	08001dcb 	.word	0x08001dcb
 8001cec:	08001e39 	.word	0x08001e39
 8001cf0:	08001ea7 	.word	0x08001ea7
 8001cf4:	08001f25 	.word	0x08001f25
 8001cf8:	08001fa3 	.word	0x08001fa3
 8001cfc:	0800201f 	.word	0x0800201f
 8001d00:	0800201f 	.word	0x0800201f
 8001d04:	08002011 	.word	0x08002011
		{
		case -1:
			break;
		case 49:  //1 F+
			if (Hz < 100)
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <Menu+0xa0c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b63      	cmp	r3, #99	; 0x63
 8001d0e:	d849      	bhi.n	8001da4 <Menu+0xa18>
			{
				Hz += 1;
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <Menu+0xa0c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <Menu+0xa0c>)
 8001d1a:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "Frequency = %d.%d Hz\r\n", Hz/10, Hz%10);
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <Menu+0xa0c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <Menu+0xa10>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <Menu+0xa0c>)
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <Menu+0xa10>)
 8001d32:	fba3 1302 	umull	r1, r3, r3, r2
 8001d36:	08d9      	lsrs	r1, r3, #3
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4602      	mov	r2, r0
 8001d46:	4916      	ldr	r1, [pc, #88]	; (8001da0 <Menu+0xa14>)
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <Menu+0x9cc>)
 8001d4a:	f005 f8b3 	bl	8006eb4 <siprintf>
 8001d4e:	e031      	b.n	8001db4 <Menu+0xa28>
 8001d50:	20000134 	.word	0x20000134
 8001d54:	08008984 	.word	0x08008984
 8001d58:	200000b0 	.word	0x200000b0
 8001d5c:	200002e4 	.word	0x200002e4
 8001d60:	20000006 	.word	0x20000006
 8001d64:	080089a0 	.word	0x080089a0
 8001d68:	20000135 	.word	0x20000135
 8001d6c:	20000136 	.word	0x20000136
 8001d70:	080087f0 	.word	0x080087f0
 8001d74:	08008798 	.word	0x08008798
 8001d78:	080089b0 	.word	0x080089b0
 8001d7c:	0800880c 	.word	0x0800880c
 8001d80:	08008820 	.word	0x08008820
 8001d84:	08008834 	.word	0x08008834
 8001d88:	08008844 	.word	0x08008844
 8001d8c:	08008854 	.word	0x08008854
 8001d90:	08008864 	.word	0x08008864
 8001d94:	0800888c 	.word	0x0800888c
 8001d98:	20000004 	.word	0x20000004
 8001d9c:	cccccccd 	.word	0xcccccccd
 8001da0:	0800889c 	.word	0x0800889c
			}
			else if (Hz == 100)
 8001da4:	4ba7      	ldr	r3, [pc, #668]	; (8002044 <Menu+0xcb8>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b64      	cmp	r3, #100	; 0x64
 8001daa:	d103      	bne.n	8001db4 <Menu+0xa28>
			{
				sprintf(TxDataBuffer, "Frequency upper limit is 10 Hz\r\n");
 8001dac:	49a6      	ldr	r1, [pc, #664]	; (8002048 <Menu+0xcbc>)
 8001dae:	48a7      	ldr	r0, [pc, #668]	; (800204c <Menu+0xcc0>)
 8001db0:	f005 f880 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001db4:	48a5      	ldr	r0, [pc, #660]	; (800204c <Menu+0xcc0>)
 8001db6:	f7fe fa13 	bl	80001e0 <strlen>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	49a2      	ldr	r1, [pc, #648]	; (800204c <Menu+0xcc0>)
 8001dc2:	48a3      	ldr	r0, [pc, #652]	; (8002050 <Menu+0xcc4>)
 8001dc4:	f004 fa1f 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001dc8:	e13a      	b.n	8002040 <Menu+0xcb4>
		case 50:  //2 F-
			if (Hz > 0)
 8001dca:	4b9e      	ldr	r3, [pc, #632]	; (8002044 <Menu+0xcb8>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d01f      	beq.n	8001e12 <Menu+0xa86>
			{
				Hz -= 1;
 8001dd2:	4b9c      	ldr	r3, [pc, #624]	; (8002044 <Menu+0xcb8>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b9a      	ldr	r3, [pc, #616]	; (8002044 <Menu+0xcb8>)
 8001ddc:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "Frequency = %d.%d Hz\r\n", Hz/10, Hz%10);
 8001dde:	4b99      	ldr	r3, [pc, #612]	; (8002044 <Menu+0xcb8>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4a9c      	ldr	r2, [pc, #624]	; (8002054 <Menu+0xcc8>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	4b95      	ldr	r3, [pc, #596]	; (8002044 <Menu+0xcb8>)
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	4b98      	ldr	r3, [pc, #608]	; (8002054 <Menu+0xcc8>)
 8001df4:	fba3 1302 	umull	r1, r3, r3, r2
 8001df8:	08d9      	lsrs	r1, r3, #3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	4602      	mov	r2, r0
 8001e08:	4993      	ldr	r1, [pc, #588]	; (8002058 <Menu+0xccc>)
 8001e0a:	4890      	ldr	r0, [pc, #576]	; (800204c <Menu+0xcc0>)
 8001e0c:	f005 f852 	bl	8006eb4 <siprintf>
 8001e10:	e007      	b.n	8001e22 <Menu+0xa96>
			}
			else if (Hz == 0)
 8001e12:	4b8c      	ldr	r3, [pc, #560]	; (8002044 <Menu+0xcb8>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <Menu+0xa96>
			{
				sprintf(TxDataBuffer, "Frequency lower limit is 0 Hz\r\n");
 8001e1a:	4990      	ldr	r1, [pc, #576]	; (800205c <Menu+0xcd0>)
 8001e1c:	488b      	ldr	r0, [pc, #556]	; (800204c <Menu+0xcc0>)
 8001e1e:	f005 f849 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001e22:	488a      	ldr	r0, [pc, #552]	; (800204c <Menu+0xcc0>)
 8001e24:	f7fe f9dc 	bl	80001e0 <strlen>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	2364      	movs	r3, #100	; 0x64
 8001e2e:	4987      	ldr	r1, [pc, #540]	; (800204c <Menu+0xcc0>)
 8001e30:	4887      	ldr	r0, [pc, #540]	; (8002050 <Menu+0xcc4>)
 8001e32:	f004 f9e8 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001e36:	e103      	b.n	8002040 <Menu+0xcb4>
		case 51:  //3 V_Max+
			if (V_Max < 33)
 8001e38:	4b89      	ldr	r3, [pc, #548]	; (8002060 <Menu+0xcd4>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d81f      	bhi.n	8001e80 <Menu+0xaf4>
			{
				V_Max += 1;
 8001e40:	4b87      	ldr	r3, [pc, #540]	; (8002060 <Menu+0xcd4>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b85      	ldr	r3, [pc, #532]	; (8002060 <Menu+0xcd4>)
 8001e4a:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Max = %d.%d V\r\n",V_Max/10, V_Max%10);
 8001e4c:	4b84      	ldr	r3, [pc, #528]	; (8002060 <Menu+0xcd4>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4a80      	ldr	r2, [pc, #512]	; (8002054 <Menu+0xcc8>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	08db      	lsrs	r3, r3, #3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4b80      	ldr	r3, [pc, #512]	; (8002060 <Menu+0xcd4>)
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <Menu+0xcc8>)
 8001e62:	fba3 1302 	umull	r1, r3, r3, r2
 8001e66:	08d9      	lsrs	r1, r3, #3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4602      	mov	r2, r0
 8001e76:	497b      	ldr	r1, [pc, #492]	; (8002064 <Menu+0xcd8>)
 8001e78:	4874      	ldr	r0, [pc, #464]	; (800204c <Menu+0xcc0>)
 8001e7a:	f005 f81b 	bl	8006eb4 <siprintf>
 8001e7e:	e007      	b.n	8001e90 <Menu+0xb04>
			}
			else if (V_Max == 33)
 8001e80:	4b77      	ldr	r3, [pc, #476]	; (8002060 <Menu+0xcd4>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b21      	cmp	r3, #33	; 0x21
 8001e86:	d103      	bne.n	8001e90 <Menu+0xb04>
			{
				sprintf(TxDataBuffer, "V_Max upper limit is 3.3 V\r\n");
 8001e88:	4977      	ldr	r1, [pc, #476]	; (8002068 <Menu+0xcdc>)
 8001e8a:	4870      	ldr	r0, [pc, #448]	; (800204c <Menu+0xcc0>)
 8001e8c:	f005 f812 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001e90:	486e      	ldr	r0, [pc, #440]	; (800204c <Menu+0xcc0>)
 8001e92:	f7fe f9a5 	bl	80001e0 <strlen>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	2364      	movs	r3, #100	; 0x64
 8001e9c:	496b      	ldr	r1, [pc, #428]	; (800204c <Menu+0xcc0>)
 8001e9e:	486c      	ldr	r0, [pc, #432]	; (8002050 <Menu+0xcc4>)
 8001ea0:	f004 f9b1 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001ea4:	e0cc      	b.n	8002040 <Menu+0xcb4>
		case 52:  //4 V_Max-
			if (V_Max == V_Min+1)
 8001ea6:	4b6e      	ldr	r3, [pc, #440]	; (8002060 <Menu+0xcd4>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b6f      	ldr	r3, [pc, #444]	; (800206c <Menu+0xce0>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d104      	bne.n	8001ec0 <Menu+0xb34>
			{
				sprintf(TxDataBuffer, "V_Max must be more than V_Min\r\n");
 8001eb6:	496e      	ldr	r1, [pc, #440]	; (8002070 <Menu+0xce4>)
 8001eb8:	4864      	ldr	r0, [pc, #400]	; (800204c <Menu+0xcc0>)
 8001eba:	f004 fffb 	bl	8006eb4 <siprintf>
 8001ebe:	e026      	b.n	8001f0e <Menu+0xb82>
			}
			else if (V_Max > V_Min+1)
 8001ec0:	4b67      	ldr	r3, [pc, #412]	; (8002060 <Menu+0xcd4>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b69      	ldr	r3, [pc, #420]	; (800206c <Menu+0xce0>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dd1e      	ble.n	8001f0e <Menu+0xb82>
			{
				V_Max -= 1;
 8001ed0:	4b63      	ldr	r3, [pc, #396]	; (8002060 <Menu+0xcd4>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <Menu+0xcd4>)
 8001eda:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Max = %d.%d V\r\n", V_Max/10, V_Max%10);
 8001edc:	4b60      	ldr	r3, [pc, #384]	; (8002060 <Menu+0xcd4>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4a5c      	ldr	r2, [pc, #368]	; (8002054 <Menu+0xcc8>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	08db      	lsrs	r3, r3, #3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <Menu+0xcd4>)
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	4b58      	ldr	r3, [pc, #352]	; (8002054 <Menu+0xcc8>)
 8001ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef6:	08d9      	lsrs	r1, r3, #3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4602      	mov	r2, r0
 8001f06:	4957      	ldr	r1, [pc, #348]	; (8002064 <Menu+0xcd8>)
 8001f08:	4850      	ldr	r0, [pc, #320]	; (800204c <Menu+0xcc0>)
 8001f0a:	f004 ffd3 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001f0e:	484f      	ldr	r0, [pc, #316]	; (800204c <Menu+0xcc0>)
 8001f10:	f7fe f966 	bl	80001e0 <strlen>
 8001f14:	4603      	mov	r3, r0
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	2364      	movs	r3, #100	; 0x64
 8001f1a:	494c      	ldr	r1, [pc, #304]	; (800204c <Menu+0xcc0>)
 8001f1c:	484c      	ldr	r0, [pc, #304]	; (8002050 <Menu+0xcc4>)
 8001f1e:	f004 f972 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001f22:	e08d      	b.n	8002040 <Menu+0xcb4>
		case 53:  //5 V_Min+
			if (V_Min == V_Max-1)
 8001f24:	4b51      	ldr	r3, [pc, #324]	; (800206c <Menu+0xce0>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b4d      	ldr	r3, [pc, #308]	; (8002060 <Menu+0xcd4>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d104      	bne.n	8001f3e <Menu+0xbb2>
			{
				sprintf(TxDataBuffer, "V_Min must be less than to V_Max\r\n");
 8001f34:	494f      	ldr	r1, [pc, #316]	; (8002074 <Menu+0xce8>)
 8001f36:	4845      	ldr	r0, [pc, #276]	; (800204c <Menu+0xcc0>)
 8001f38:	f004 ffbc 	bl	8006eb4 <siprintf>
 8001f3c:	e026      	b.n	8001f8c <Menu+0xc00>
			}
			else if (V_Min < V_Max-1)
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	; (800206c <Menu+0xce0>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b46      	ldr	r3, [pc, #280]	; (8002060 <Menu+0xcd4>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	da1e      	bge.n	8001f8c <Menu+0xc00>
			{
				V_Min += 1;
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <Menu+0xce0>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4b45      	ldr	r3, [pc, #276]	; (800206c <Menu+0xce0>)
 8001f58:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Min = %d.%d V\r\n", V_Min/10, V_Min%10);
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <Menu+0xce0>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4a3d      	ldr	r2, [pc, #244]	; (8002054 <Menu+0xcc8>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	08db      	lsrs	r3, r3, #3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	4b40      	ldr	r3, [pc, #256]	; (800206c <Menu+0xce0>)
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	4b39      	ldr	r3, [pc, #228]	; (8002054 <Menu+0xcc8>)
 8001f70:	fba3 1302 	umull	r1, r3, r3, r2
 8001f74:	08d9      	lsrs	r1, r3, #3
 8001f76:	460b      	mov	r3, r1
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4602      	mov	r2, r0
 8001f84:	493c      	ldr	r1, [pc, #240]	; (8002078 <Menu+0xcec>)
 8001f86:	4831      	ldr	r0, [pc, #196]	; (800204c <Menu+0xcc0>)
 8001f88:	f004 ff94 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001f8c:	482f      	ldr	r0, [pc, #188]	; (800204c <Menu+0xcc0>)
 8001f8e:	f7fe f927 	bl	80001e0 <strlen>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	2364      	movs	r3, #100	; 0x64
 8001f98:	492c      	ldr	r1, [pc, #176]	; (800204c <Menu+0xcc0>)
 8001f9a:	482d      	ldr	r0, [pc, #180]	; (8002050 <Menu+0xcc4>)
 8001f9c:	f004 f933 	bl	8006206 <HAL_UART_Transmit>
			break;
 8001fa0:	e04e      	b.n	8002040 <Menu+0xcb4>
		case 54:  //6 V_Min-
			if (V_Min > 0)
 8001fa2:	4b32      	ldr	r3, [pc, #200]	; (800206c <Menu+0xce0>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01f      	beq.n	8001fea <Menu+0xc5e>
			{
				V_Min -= 1;
 8001faa:	4b30      	ldr	r3, [pc, #192]	; (800206c <Menu+0xce0>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <Menu+0xce0>)
 8001fb4:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Min = %d.%d V\r\n", V_Min/10, V_Min%10);
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <Menu+0xce0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <Menu+0xcc8>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <Menu+0xce0>)
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <Menu+0xcc8>)
 8001fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd0:	08d9      	lsrs	r1, r3, #3
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4925      	ldr	r1, [pc, #148]	; (8002078 <Menu+0xcec>)
 8001fe2:	481a      	ldr	r0, [pc, #104]	; (800204c <Menu+0xcc0>)
 8001fe4:	f004 ff66 	bl	8006eb4 <siprintf>
 8001fe8:	e007      	b.n	8001ffa <Menu+0xc6e>
			}
			else if (V_Min == 0)
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <Menu+0xce0>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <Menu+0xc6e>
			{
				sprintf(TxDataBuffer, "V_Min lower limit is 0 V\r\n");
 8001ff2:	4922      	ldr	r1, [pc, #136]	; (800207c <Menu+0xcf0>)
 8001ff4:	4815      	ldr	r0, [pc, #84]	; (800204c <Menu+0xcc0>)
 8001ff6:	f004 ff5d 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8001ffa:	4814      	ldr	r0, [pc, #80]	; (800204c <Menu+0xcc0>)
 8001ffc:	f7fe f8f0 	bl	80001e0 <strlen>
 8002000:	4603      	mov	r3, r0
 8002002:	b29a      	uxth	r2, r3
 8002004:	2364      	movs	r3, #100	; 0x64
 8002006:	4911      	ldr	r1, [pc, #68]	; (800204c <Menu+0xcc0>)
 8002008:	4811      	ldr	r0, [pc, #68]	; (8002050 <Menu+0xcc4>)
 800200a:	f004 f8fc 	bl	8006206 <HAL_UART_Transmit>
			break;
 800200e:	e017      	b.n	8002040 <Menu+0xcb4>
		case 57:  //back
			State = Mode_Menu;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <Menu+0xcf4>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
			Mode = None;
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <Menu+0xcf8>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
			break;
 800201c:	e010      	b.n	8002040 <Menu+0xcb4>
		default:
			sprintf(TxDataBuffer, "Wrong Input\r\n");
 800201e:	491a      	ldr	r1, [pc, #104]	; (8002088 <Menu+0xcfc>)
 8002020:	480a      	ldr	r0, [pc, #40]	; (800204c <Menu+0xcc0>)
 8002022:	f004 ff47 	bl	8006eb4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002026:	4809      	ldr	r0, [pc, #36]	; (800204c <Menu+0xcc0>)
 8002028:	f7fe f8da 	bl	80001e0 <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	b29a      	uxth	r2, r3
 8002030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002034:	4905      	ldr	r1, [pc, #20]	; (800204c <Menu+0xcc0>)
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <Menu+0xcc4>)
 8002038:	f004 f8e5 	bl	8006206 <HAL_UART_Transmit>
			break;
 800203c:	e000      	b.n	8002040 <Menu+0xcb4>
			break;
 800203e:	bf00      	nop
		}
		break;
 8002040:	e354      	b.n	80026ec <Menu+0x1360>
 8002042:	bf00      	nop
 8002044:	20000004 	.word	0x20000004
 8002048:	080088b4 	.word	0x080088b4
 800204c:	200000b0 	.word	0x200000b0
 8002050:	200002e4 	.word	0x200002e4
 8002054:	cccccccd 	.word	0xcccccccd
 8002058:	0800889c 	.word	0x0800889c
 800205c:	080088d8 	.word	0x080088d8
 8002060:	20000005 	.word	0x20000005
 8002064:	080088f8 	.word	0x080088f8
 8002068:	0800890c 	.word	0x0800890c
 800206c:	20000134 	.word	0x20000134
 8002070:	0800892c 	.word	0x0800892c
 8002074:	0800894c 	.word	0x0800894c
 8002078:	08008970 	.word	0x08008970
 800207c:	08008984 	.word	0x08008984
 8002080:	20000135 	.word	0x20000135
 8002084:	20000136 	.word	0x20000136
 8002088:	080087f0 	.word	0x080087f0
	case Square_Menu:
		sprintf(TxDataBuffer, "--------------\r\n");
 800208c:	49b1      	ldr	r1, [pc, #708]	; (8002354 <Menu+0xfc8>)
 800208e:	48b2      	ldr	r0, [pc, #712]	; (8002358 <Menu+0xfcc>)
 8002090:	f004 ff10 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8002094:	48b0      	ldr	r0, [pc, #704]	; (8002358 <Menu+0xfcc>)
 8002096:	f7fe f8a3 	bl	80001e0 <strlen>
 800209a:	4603      	mov	r3, r0
 800209c:	b29a      	uxth	r2, r3
 800209e:	2364      	movs	r3, #100	; 0x64
 80020a0:	49ad      	ldr	r1, [pc, #692]	; (8002358 <Menu+0xfcc>)
 80020a2:	48ae      	ldr	r0, [pc, #696]	; (800235c <Menu+0xfd0>)
 80020a4:	f004 f8af 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "Square\r\n");
 80020a8:	49ad      	ldr	r1, [pc, #692]	; (8002360 <Menu+0xfd4>)
 80020aa:	48ab      	ldr	r0, [pc, #684]	; (8002358 <Menu+0xfcc>)
 80020ac:	f004 ff02 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80020b0:	48a9      	ldr	r0, [pc, #676]	; (8002358 <Menu+0xfcc>)
 80020b2:	f7fe f895 	bl	80001e0 <strlen>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	49a6      	ldr	r1, [pc, #664]	; (8002358 <Menu+0xfcc>)
 80020be:	48a7      	ldr	r0, [pc, #668]	; (800235c <Menu+0xfd0>)
 80020c0:	f004 f8a1 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  1 : Frequency +\r\n");
 80020c4:	49a7      	ldr	r1, [pc, #668]	; (8002364 <Menu+0xfd8>)
 80020c6:	48a4      	ldr	r0, [pc, #656]	; (8002358 <Menu+0xfcc>)
 80020c8:	f004 fef4 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80020cc:	48a2      	ldr	r0, [pc, #648]	; (8002358 <Menu+0xfcc>)
 80020ce:	f7fe f887 	bl	80001e0 <strlen>
 80020d2:	4603      	mov	r3, r0
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	2364      	movs	r3, #100	; 0x64
 80020d8:	499f      	ldr	r1, [pc, #636]	; (8002358 <Menu+0xfcc>)
 80020da:	48a0      	ldr	r0, [pc, #640]	; (800235c <Menu+0xfd0>)
 80020dc:	f004 f893 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  2 : Frequency -\r\n");
 80020e0:	49a1      	ldr	r1, [pc, #644]	; (8002368 <Menu+0xfdc>)
 80020e2:	489d      	ldr	r0, [pc, #628]	; (8002358 <Menu+0xfcc>)
 80020e4:	f004 fee6 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80020e8:	489b      	ldr	r0, [pc, #620]	; (8002358 <Menu+0xfcc>)
 80020ea:	f7fe f879 	bl	80001e0 <strlen>
 80020ee:	4603      	mov	r3, r0
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	2364      	movs	r3, #100	; 0x64
 80020f4:	4998      	ldr	r1, [pc, #608]	; (8002358 <Menu+0xfcc>)
 80020f6:	4899      	ldr	r0, [pc, #612]	; (800235c <Menu+0xfd0>)
 80020f8:	f004 f885 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  3 : V_Max +\r\n");
 80020fc:	499b      	ldr	r1, [pc, #620]	; (800236c <Menu+0xfe0>)
 80020fe:	4896      	ldr	r0, [pc, #600]	; (8002358 <Menu+0xfcc>)
 8002100:	f004 fed8 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8002104:	4894      	ldr	r0, [pc, #592]	; (8002358 <Menu+0xfcc>)
 8002106:	f7fe f86b 	bl	80001e0 <strlen>
 800210a:	4603      	mov	r3, r0
 800210c:	b29a      	uxth	r2, r3
 800210e:	2364      	movs	r3, #100	; 0x64
 8002110:	4991      	ldr	r1, [pc, #580]	; (8002358 <Menu+0xfcc>)
 8002112:	4892      	ldr	r0, [pc, #584]	; (800235c <Menu+0xfd0>)
 8002114:	f004 f877 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  4 : V_Max -\r\n");
 8002118:	4995      	ldr	r1, [pc, #596]	; (8002370 <Menu+0xfe4>)
 800211a:	488f      	ldr	r0, [pc, #572]	; (8002358 <Menu+0xfcc>)
 800211c:	f004 feca 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8002120:	488d      	ldr	r0, [pc, #564]	; (8002358 <Menu+0xfcc>)
 8002122:	f7fe f85d 	bl	80001e0 <strlen>
 8002126:	4603      	mov	r3, r0
 8002128:	b29a      	uxth	r2, r3
 800212a:	2364      	movs	r3, #100	; 0x64
 800212c:	498a      	ldr	r1, [pc, #552]	; (8002358 <Menu+0xfcc>)
 800212e:	488b      	ldr	r0, [pc, #556]	; (800235c <Menu+0xfd0>)
 8002130:	f004 f869 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  5 : V_Min +\r\n");
 8002134:	498f      	ldr	r1, [pc, #572]	; (8002374 <Menu+0xfe8>)
 8002136:	4888      	ldr	r0, [pc, #544]	; (8002358 <Menu+0xfcc>)
 8002138:	f004 febc 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800213c:	4886      	ldr	r0, [pc, #536]	; (8002358 <Menu+0xfcc>)
 800213e:	f7fe f84f 	bl	80001e0 <strlen>
 8002142:	4603      	mov	r3, r0
 8002144:	b29a      	uxth	r2, r3
 8002146:	2364      	movs	r3, #100	; 0x64
 8002148:	4983      	ldr	r1, [pc, #524]	; (8002358 <Menu+0xfcc>)
 800214a:	4884      	ldr	r0, [pc, #528]	; (800235c <Menu+0xfd0>)
 800214c:	f004 f85b 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  6 : V_Min -\r\n");
 8002150:	4989      	ldr	r1, [pc, #548]	; (8002378 <Menu+0xfec>)
 8002152:	4881      	ldr	r0, [pc, #516]	; (8002358 <Menu+0xfcc>)
 8002154:	f004 feae 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8002158:	487f      	ldr	r0, [pc, #508]	; (8002358 <Menu+0xfcc>)
 800215a:	f7fe f841 	bl	80001e0 <strlen>
 800215e:	4603      	mov	r3, r0
 8002160:	b29a      	uxth	r2, r3
 8002162:	2364      	movs	r3, #100	; 0x64
 8002164:	497c      	ldr	r1, [pc, #496]	; (8002358 <Menu+0xfcc>)
 8002166:	487d      	ldr	r0, [pc, #500]	; (800235c <Menu+0xfd0>)
 8002168:	f004 f84d 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  7 : Duty Cycle +\r\n");
 800216c:	4983      	ldr	r1, [pc, #524]	; (800237c <Menu+0xff0>)
 800216e:	487a      	ldr	r0, [pc, #488]	; (8002358 <Menu+0xfcc>)
 8002170:	f004 fea0 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8002174:	4878      	ldr	r0, [pc, #480]	; (8002358 <Menu+0xfcc>)
 8002176:	f7fe f833 	bl	80001e0 <strlen>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	2364      	movs	r3, #100	; 0x64
 8002180:	4975      	ldr	r1, [pc, #468]	; (8002358 <Menu+0xfcc>)
 8002182:	4876      	ldr	r0, [pc, #472]	; (800235c <Menu+0xfd0>)
 8002184:	f004 f83f 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  8 : Duty Cycle -\r\n");
 8002188:	497d      	ldr	r1, [pc, #500]	; (8002380 <Menu+0xff4>)
 800218a:	4873      	ldr	r0, [pc, #460]	; (8002358 <Menu+0xfcc>)
 800218c:	f004 fe92 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8002190:	4871      	ldr	r0, [pc, #452]	; (8002358 <Menu+0xfcc>)
 8002192:	f7fe f825 	bl	80001e0 <strlen>
 8002196:	4603      	mov	r3, r0
 8002198:	b29a      	uxth	r2, r3
 800219a:	2364      	movs	r3, #100	; 0x64
 800219c:	496e      	ldr	r1, [pc, #440]	; (8002358 <Menu+0xfcc>)
 800219e:	486f      	ldr	r0, [pc, #444]	; (800235c <Menu+0xfd0>)
 80021a0:	f004 f831 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "  9 : back\r\n");
 80021a4:	4977      	ldr	r1, [pc, #476]	; (8002384 <Menu+0xff8>)
 80021a6:	486c      	ldr	r0, [pc, #432]	; (8002358 <Menu+0xfcc>)
 80021a8:	f004 fe84 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80021ac:	486a      	ldr	r0, [pc, #424]	; (8002358 <Menu+0xfcc>)
 80021ae:	f7fe f817 	bl	80001e0 <strlen>
 80021b2:	4603      	mov	r3, r0
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	2364      	movs	r3, #100	; 0x64
 80021b8:	4967      	ldr	r1, [pc, #412]	; (8002358 <Menu+0xfcc>)
 80021ba:	4868      	ldr	r0, [pc, #416]	; (800235c <Menu+0xfd0>)
 80021bc:	f004 f823 	bl	8006206 <HAL_UART_Transmit>
		sprintf(TxDataBuffer, "--------------\r\n");
 80021c0:	4964      	ldr	r1, [pc, #400]	; (8002354 <Menu+0xfc8>)
 80021c2:	4865      	ldr	r0, [pc, #404]	; (8002358 <Menu+0xfcc>)
 80021c4:	f004 fe76 	bl	8006eb4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80021c8:	4863      	ldr	r0, [pc, #396]	; (8002358 <Menu+0xfcc>)
 80021ca:	f7fe f809 	bl	80001e0 <strlen>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	2364      	movs	r3, #100	; 0x64
 80021d4:	4960      	ldr	r1, [pc, #384]	; (8002358 <Menu+0xfcc>)
 80021d6:	4861      	ldr	r0, [pc, #388]	; (800235c <Menu+0xfd0>)
 80021d8:	f004 f815 	bl	8006206 <HAL_UART_Transmit>
		State = Square_Wait;
 80021dc:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <Menu+0xffc>)
 80021de:	2207      	movs	r2, #7
 80021e0:	701a      	strb	r2, [r3, #0]
		break;
 80021e2:	e283      	b.n	80026ec <Menu+0x1360>
	case Square_Wait:
		switch (input)
 80021e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e8:	3301      	adds	r3, #1
 80021ea:	2b3a      	cmp	r3, #58	; 0x3a
 80021ec:	f200 826c 	bhi.w	80026c8 <Menu+0x133c>
 80021f0:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <Menu+0xe6c>)
 80021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f6:	bf00      	nop
 80021f8:	080026e9 	.word	0x080026e9
 80021fc:	080026c9 	.word	0x080026c9
 8002200:	080026c9 	.word	0x080026c9
 8002204:	080026c9 	.word	0x080026c9
 8002208:	080026c9 	.word	0x080026c9
 800220c:	080026c9 	.word	0x080026c9
 8002210:	080026c9 	.word	0x080026c9
 8002214:	080026c9 	.word	0x080026c9
 8002218:	080026c9 	.word	0x080026c9
 800221c:	080026c9 	.word	0x080026c9
 8002220:	080026c9 	.word	0x080026c9
 8002224:	080026c9 	.word	0x080026c9
 8002228:	080026c9 	.word	0x080026c9
 800222c:	080026c9 	.word	0x080026c9
 8002230:	080026c9 	.word	0x080026c9
 8002234:	080026c9 	.word	0x080026c9
 8002238:	080026c9 	.word	0x080026c9
 800223c:	080026c9 	.word	0x080026c9
 8002240:	080026c9 	.word	0x080026c9
 8002244:	080026c9 	.word	0x080026c9
 8002248:	080026c9 	.word	0x080026c9
 800224c:	080026c9 	.word	0x080026c9
 8002250:	080026c9 	.word	0x080026c9
 8002254:	080026c9 	.word	0x080026c9
 8002258:	080026c9 	.word	0x080026c9
 800225c:	080026c9 	.word	0x080026c9
 8002260:	080026c9 	.word	0x080026c9
 8002264:	080026c9 	.word	0x080026c9
 8002268:	080026c9 	.word	0x080026c9
 800226c:	080026c9 	.word	0x080026c9
 8002270:	080026c9 	.word	0x080026c9
 8002274:	080026c9 	.word	0x080026c9
 8002278:	080026c9 	.word	0x080026c9
 800227c:	080026c9 	.word	0x080026c9
 8002280:	080026c9 	.word	0x080026c9
 8002284:	080026c9 	.word	0x080026c9
 8002288:	080026c9 	.word	0x080026c9
 800228c:	080026c9 	.word	0x080026c9
 8002290:	080026c9 	.word	0x080026c9
 8002294:	080026c9 	.word	0x080026c9
 8002298:	080026c9 	.word	0x080026c9
 800229c:	080026c9 	.word	0x080026c9
 80022a0:	080026c9 	.word	0x080026c9
 80022a4:	080026c9 	.word	0x080026c9
 80022a8:	080026c9 	.word	0x080026c9
 80022ac:	080026c9 	.word	0x080026c9
 80022b0:	080026c9 	.word	0x080026c9
 80022b4:	080026c9 	.word	0x080026c9
 80022b8:	080026c9 	.word	0x080026c9
 80022bc:	080026c9 	.word	0x080026c9
 80022c0:	080022e5 	.word	0x080022e5
 80022c4:	0800239d 	.word	0x0800239d
 80022c8:	0800240b 	.word	0x0800240b
 80022cc:	08002479 	.word	0x08002479
 80022d0:	080024f7 	.word	0x080024f7
 80022d4:	08002575 	.word	0x08002575
 80022d8:	080025e3 	.word	0x080025e3
 80022dc:	08002671 	.word	0x08002671
 80022e0:	080026bb 	.word	0x080026bb
		{
		case -1:
			break;
		case 49:  //1 F+
			if (Hz < 100)
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <Menu+0x1000>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b63      	cmp	r3, #99	; 0x63
 80022ea:	d81f      	bhi.n	800232c <Menu+0xfa0>
			{
				Hz += 1;
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <Menu+0x1000>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <Menu+0x1000>)
 80022f6:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "Frequency = %d.%d Hz\r\n", Hz/10, Hz%10);
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <Menu+0x1000>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4a24      	ldr	r2, [pc, #144]	; (8002390 <Menu+0x1004>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4618      	mov	r0, r3
 8002308:	4b20      	ldr	r3, [pc, #128]	; (800238c <Menu+0x1000>)
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <Menu+0x1004>)
 800230e:	fba3 1302 	umull	r1, r3, r3, r2
 8002312:	08d9      	lsrs	r1, r3, #3
 8002314:	460b      	mov	r3, r1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	4602      	mov	r2, r0
 8002322:	491c      	ldr	r1, [pc, #112]	; (8002394 <Menu+0x1008>)
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <Menu+0xfcc>)
 8002326:	f004 fdc5 	bl	8006eb4 <siprintf>
 800232a:	e007      	b.n	800233c <Menu+0xfb0>
			}
			else if (Hz == 100)
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <Menu+0x1000>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b64      	cmp	r3, #100	; 0x64
 8002332:	d103      	bne.n	800233c <Menu+0xfb0>
			{
				sprintf(TxDataBuffer, "Frequency upper limit is 10 Hz\r\n");
 8002334:	4918      	ldr	r1, [pc, #96]	; (8002398 <Menu+0x100c>)
 8002336:	4808      	ldr	r0, [pc, #32]	; (8002358 <Menu+0xfcc>)
 8002338:	f004 fdbc 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800233c:	4806      	ldr	r0, [pc, #24]	; (8002358 <Menu+0xfcc>)
 800233e:	f7fd ff4f 	bl	80001e0 <strlen>
 8002342:	4603      	mov	r3, r0
 8002344:	b29a      	uxth	r2, r3
 8002346:	2364      	movs	r3, #100	; 0x64
 8002348:	4903      	ldr	r1, [pc, #12]	; (8002358 <Menu+0xfcc>)
 800234a:	4804      	ldr	r0, [pc, #16]	; (800235c <Menu+0xfd0>)
 800234c:	f003 ff5b 	bl	8006206 <HAL_UART_Transmit>
			break;
 8002350:	e1cb      	b.n	80026ea <Menu+0x135e>
 8002352:	bf00      	nop
 8002354:	08008798 	.word	0x08008798
 8002358:	200000b0 	.word	0x200000b0
 800235c:	200002e4 	.word	0x200002e4
 8002360:	080089b8 	.word	0x080089b8
 8002364:	0800880c 	.word	0x0800880c
 8002368:	08008820 	.word	0x08008820
 800236c:	08008834 	.word	0x08008834
 8002370:	08008844 	.word	0x08008844
 8002374:	08008854 	.word	0x08008854
 8002378:	08008864 	.word	0x08008864
 800237c:	080089c4 	.word	0x080089c4
 8002380:	080089dc 	.word	0x080089dc
 8002384:	0800888c 	.word	0x0800888c
 8002388:	20000135 	.word	0x20000135
 800238c:	20000004 	.word	0x20000004
 8002390:	cccccccd 	.word	0xcccccccd
 8002394:	0800889c 	.word	0x0800889c
 8002398:	080088b4 	.word	0x080088b4
		case 50:  //2 F-
			if (Hz > 0)
 800239c:	4ba3      	ldr	r3, [pc, #652]	; (800262c <Menu+0x12a0>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01f      	beq.n	80023e4 <Menu+0x1058>
			{
				Hz -= 1;
 80023a4:	4ba1      	ldr	r3, [pc, #644]	; (800262c <Menu+0x12a0>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b9f      	ldr	r3, [pc, #636]	; (800262c <Menu+0x12a0>)
 80023ae:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "Frequency = %d.%d Hz\r\n", Hz/10, Hz%10);
 80023b0:	4b9e      	ldr	r3, [pc, #632]	; (800262c <Menu+0x12a0>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	4a9e      	ldr	r2, [pc, #632]	; (8002630 <Menu+0x12a4>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	08db      	lsrs	r3, r3, #3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	4b9a      	ldr	r3, [pc, #616]	; (800262c <Menu+0x12a0>)
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	4b9a      	ldr	r3, [pc, #616]	; (8002630 <Menu+0x12a4>)
 80023c6:	fba3 1302 	umull	r1, r3, r3, r2
 80023ca:	08d9      	lsrs	r1, r3, #3
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	4602      	mov	r2, r0
 80023da:	4996      	ldr	r1, [pc, #600]	; (8002634 <Menu+0x12a8>)
 80023dc:	4896      	ldr	r0, [pc, #600]	; (8002638 <Menu+0x12ac>)
 80023de:	f004 fd69 	bl	8006eb4 <siprintf>
 80023e2:	e007      	b.n	80023f4 <Menu+0x1068>
			}
			else if (Hz == 0)
 80023e4:	4b91      	ldr	r3, [pc, #580]	; (800262c <Menu+0x12a0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <Menu+0x1068>
			{
				sprintf(TxDataBuffer, "Frequency lower limit is 0 Hz\r\n");
 80023ec:	4993      	ldr	r1, [pc, #588]	; (800263c <Menu+0x12b0>)
 80023ee:	4892      	ldr	r0, [pc, #584]	; (8002638 <Menu+0x12ac>)
 80023f0:	f004 fd60 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80023f4:	4890      	ldr	r0, [pc, #576]	; (8002638 <Menu+0x12ac>)
 80023f6:	f7fd fef3 	bl	80001e0 <strlen>
 80023fa:	4603      	mov	r3, r0
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	2364      	movs	r3, #100	; 0x64
 8002400:	498d      	ldr	r1, [pc, #564]	; (8002638 <Menu+0x12ac>)
 8002402:	488f      	ldr	r0, [pc, #572]	; (8002640 <Menu+0x12b4>)
 8002404:	f003 feff 	bl	8006206 <HAL_UART_Transmit>
			break;
 8002408:	e16f      	b.n	80026ea <Menu+0x135e>
		case 51:  //3 V_Max+
			if (V_Max < 33)
 800240a:	4b8e      	ldr	r3, [pc, #568]	; (8002644 <Menu+0x12b8>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b20      	cmp	r3, #32
 8002410:	d81f      	bhi.n	8002452 <Menu+0x10c6>
			{
				V_Max += 1;
 8002412:	4b8c      	ldr	r3, [pc, #560]	; (8002644 <Menu+0x12b8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b8a      	ldr	r3, [pc, #552]	; (8002644 <Menu+0x12b8>)
 800241c:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Max = %d.%d V\r\n", V_Max/10, V_Max%10);
 800241e:	4b89      	ldr	r3, [pc, #548]	; (8002644 <Menu+0x12b8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4a83      	ldr	r2, [pc, #524]	; (8002630 <Menu+0x12a4>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	4b85      	ldr	r3, [pc, #532]	; (8002644 <Menu+0x12b8>)
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	4b7f      	ldr	r3, [pc, #508]	; (8002630 <Menu+0x12a4>)
 8002434:	fba3 1302 	umull	r1, r3, r3, r2
 8002438:	08d9      	lsrs	r1, r3, #3
 800243a:	460b      	mov	r3, r1
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4602      	mov	r2, r0
 8002448:	497f      	ldr	r1, [pc, #508]	; (8002648 <Menu+0x12bc>)
 800244a:	487b      	ldr	r0, [pc, #492]	; (8002638 <Menu+0x12ac>)
 800244c:	f004 fd32 	bl	8006eb4 <siprintf>
 8002450:	e007      	b.n	8002462 <Menu+0x10d6>
			}
			else if (V_Max == 33)
 8002452:	4b7c      	ldr	r3, [pc, #496]	; (8002644 <Menu+0x12b8>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b21      	cmp	r3, #33	; 0x21
 8002458:	d103      	bne.n	8002462 <Menu+0x10d6>
			{
				sprintf(TxDataBuffer, "V_Max upper limit is 3.3 V\r\n");
 800245a:	497c      	ldr	r1, [pc, #496]	; (800264c <Menu+0x12c0>)
 800245c:	4876      	ldr	r0, [pc, #472]	; (8002638 <Menu+0x12ac>)
 800245e:	f004 fd29 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8002462:	4875      	ldr	r0, [pc, #468]	; (8002638 <Menu+0x12ac>)
 8002464:	f7fd febc 	bl	80001e0 <strlen>
 8002468:	4603      	mov	r3, r0
 800246a:	b29a      	uxth	r2, r3
 800246c:	2364      	movs	r3, #100	; 0x64
 800246e:	4972      	ldr	r1, [pc, #456]	; (8002638 <Menu+0x12ac>)
 8002470:	4873      	ldr	r0, [pc, #460]	; (8002640 <Menu+0x12b4>)
 8002472:	f003 fec8 	bl	8006206 <HAL_UART_Transmit>
			break;
 8002476:	e138      	b.n	80026ea <Menu+0x135e>
		case 52:  //4 V_Max-
			if (V_Max == V_Min+1)
 8002478:	4b72      	ldr	r3, [pc, #456]	; (8002644 <Menu+0x12b8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b74      	ldr	r3, [pc, #464]	; (8002650 <Menu+0x12c4>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	429a      	cmp	r2, r3
 8002486:	d104      	bne.n	8002492 <Menu+0x1106>
			{
				sprintf(TxDataBuffer, "V_Max must be more than V_Min\r\n");
 8002488:	4972      	ldr	r1, [pc, #456]	; (8002654 <Menu+0x12c8>)
 800248a:	486b      	ldr	r0, [pc, #428]	; (8002638 <Menu+0x12ac>)
 800248c:	f004 fd12 	bl	8006eb4 <siprintf>
 8002490:	e026      	b.n	80024e0 <Menu+0x1154>
			}
			else if (V_Max > V_Min+1)
 8002492:	4b6c      	ldr	r3, [pc, #432]	; (8002644 <Menu+0x12b8>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	4b6d      	ldr	r3, [pc, #436]	; (8002650 <Menu+0x12c4>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	429a      	cmp	r2, r3
 80024a0:	dd1e      	ble.n	80024e0 <Menu+0x1154>
			{
				V_Max -= 1;
 80024a2:	4b68      	ldr	r3, [pc, #416]	; (8002644 <Menu+0x12b8>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b66      	ldr	r3, [pc, #408]	; (8002644 <Menu+0x12b8>)
 80024ac:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Max = %d.%d V\r\n", V_Max/10, V_Max%10);
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <Menu+0x12b8>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4a5f      	ldr	r2, [pc, #380]	; (8002630 <Menu+0x12a4>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	4b61      	ldr	r3, [pc, #388]	; (8002644 <Menu+0x12b8>)
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <Menu+0x12a4>)
 80024c4:	fba3 1302 	umull	r1, r3, r3, r2
 80024c8:	08d9      	lsrs	r1, r3, #3
 80024ca:	460b      	mov	r3, r1
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4602      	mov	r2, r0
 80024d8:	495b      	ldr	r1, [pc, #364]	; (8002648 <Menu+0x12bc>)
 80024da:	4857      	ldr	r0, [pc, #348]	; (8002638 <Menu+0x12ac>)
 80024dc:	f004 fcea 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80024e0:	4855      	ldr	r0, [pc, #340]	; (8002638 <Menu+0x12ac>)
 80024e2:	f7fd fe7d 	bl	80001e0 <strlen>
 80024e6:	4603      	mov	r3, r0
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	2364      	movs	r3, #100	; 0x64
 80024ec:	4952      	ldr	r1, [pc, #328]	; (8002638 <Menu+0x12ac>)
 80024ee:	4854      	ldr	r0, [pc, #336]	; (8002640 <Menu+0x12b4>)
 80024f0:	f003 fe89 	bl	8006206 <HAL_UART_Transmit>
			break;
 80024f4:	e0f9      	b.n	80026ea <Menu+0x135e>
		case 53:  //5 V_Min+
			if (V_Min == V_Max-1)
 80024f6:	4b56      	ldr	r3, [pc, #344]	; (8002650 <Menu+0x12c4>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b51      	ldr	r3, [pc, #324]	; (8002644 <Menu+0x12b8>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	3b01      	subs	r3, #1
 8002502:	429a      	cmp	r2, r3
 8002504:	d104      	bne.n	8002510 <Menu+0x1184>
			{
				sprintf(TxDataBuffer, "V_Min must be less than to V_Max\r\n");
 8002506:	4954      	ldr	r1, [pc, #336]	; (8002658 <Menu+0x12cc>)
 8002508:	484b      	ldr	r0, [pc, #300]	; (8002638 <Menu+0x12ac>)
 800250a:	f004 fcd3 	bl	8006eb4 <siprintf>
 800250e:	e026      	b.n	800255e <Menu+0x11d2>
			}
			else if (V_Min < V_Max-1)
 8002510:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <Menu+0x12c4>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <Menu+0x12b8>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	3b01      	subs	r3, #1
 800251c:	429a      	cmp	r2, r3
 800251e:	da1e      	bge.n	800255e <Menu+0x11d2>
			{
				V_Min += 1;
 8002520:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <Menu+0x12c4>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b49      	ldr	r3, [pc, #292]	; (8002650 <Menu+0x12c4>)
 800252a:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Min = %d.%d V\r\n",V_Min/10, V_Min%10);
 800252c:	4b48      	ldr	r3, [pc, #288]	; (8002650 <Menu+0x12c4>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4a3f      	ldr	r2, [pc, #252]	; (8002630 <Menu+0x12a4>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	08db      	lsrs	r3, r3, #3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	4b44      	ldr	r3, [pc, #272]	; (8002650 <Menu+0x12c4>)
 800253e:	781a      	ldrb	r2, [r3, #0]
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <Menu+0x12a4>)
 8002542:	fba3 1302 	umull	r1, r3, r3, r2
 8002546:	08d9      	lsrs	r1, r3, #3
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4602      	mov	r2, r0
 8002556:	4941      	ldr	r1, [pc, #260]	; (800265c <Menu+0x12d0>)
 8002558:	4837      	ldr	r0, [pc, #220]	; (8002638 <Menu+0x12ac>)
 800255a:	f004 fcab 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 800255e:	4836      	ldr	r0, [pc, #216]	; (8002638 <Menu+0x12ac>)
 8002560:	f7fd fe3e 	bl	80001e0 <strlen>
 8002564:	4603      	mov	r3, r0
 8002566:	b29a      	uxth	r2, r3
 8002568:	2364      	movs	r3, #100	; 0x64
 800256a:	4933      	ldr	r1, [pc, #204]	; (8002638 <Menu+0x12ac>)
 800256c:	4834      	ldr	r0, [pc, #208]	; (8002640 <Menu+0x12b4>)
 800256e:	f003 fe4a 	bl	8006206 <HAL_UART_Transmit>
			break;
 8002572:	e0ba      	b.n	80026ea <Menu+0x135e>
		case 54:  //6 V_Min-
			if (V_Min > 0)
 8002574:	4b36      	ldr	r3, [pc, #216]	; (8002650 <Menu+0x12c4>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01f      	beq.n	80025bc <Menu+0x1230>
			{
				V_Min -= 1;
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <Menu+0x12c4>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	3b01      	subs	r3, #1
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b32      	ldr	r3, [pc, #200]	; (8002650 <Menu+0x12c4>)
 8002586:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "V_Min = %d.%d V\r\n",V_Max/10, V_Max%10);
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <Menu+0x12b8>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4a28      	ldr	r2, [pc, #160]	; (8002630 <Menu+0x12a4>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	08db      	lsrs	r3, r3, #3
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <Menu+0x12b8>)
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <Menu+0x12a4>)
 800259e:	fba3 1302 	umull	r1, r3, r3, r2
 80025a2:	08d9      	lsrs	r1, r3, #3
 80025a4:	460b      	mov	r3, r1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	4602      	mov	r2, r0
 80025b2:	492a      	ldr	r1, [pc, #168]	; (800265c <Menu+0x12d0>)
 80025b4:	4820      	ldr	r0, [pc, #128]	; (8002638 <Menu+0x12ac>)
 80025b6:	f004 fc7d 	bl	8006eb4 <siprintf>
 80025ba:	e007      	b.n	80025cc <Menu+0x1240>
			}
			else if (V_Min == 0)
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <Menu+0x12c4>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <Menu+0x1240>
			{
				sprintf(TxDataBuffer, "V_Min lower limit is 0 V\r\n");
 80025c4:	4926      	ldr	r1, [pc, #152]	; (8002660 <Menu+0x12d4>)
 80025c6:	481c      	ldr	r0, [pc, #112]	; (8002638 <Menu+0x12ac>)
 80025c8:	f004 fc74 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80025cc:	481a      	ldr	r0, [pc, #104]	; (8002638 <Menu+0x12ac>)
 80025ce:	f7fd fe07 	bl	80001e0 <strlen>
 80025d2:	4603      	mov	r3, r0
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	2364      	movs	r3, #100	; 0x64
 80025d8:	4917      	ldr	r1, [pc, #92]	; (8002638 <Menu+0x12ac>)
 80025da:	4819      	ldr	r0, [pc, #100]	; (8002640 <Menu+0x12b4>)
 80025dc:	f003 fe13 	bl	8006206 <HAL_UART_Transmit>
			break;
 80025e0:	e083      	b.n	80026ea <Menu+0x135e>
		case 55:  //7 D+
			if ( Duty_Cycle < 100)
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <Menu+0x12d8>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b63      	cmp	r3, #99	; 0x63
 80025e8:	d80d      	bhi.n	8002606 <Menu+0x127a>
			{
				Duty_Cycle += 1;
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <Menu+0x12d8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <Menu+0x12d8>)
 80025f4:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "Duty Cycle = %d \r\n", Duty_Cycle);
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <Menu+0x12d8>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	491a      	ldr	r1, [pc, #104]	; (8002668 <Menu+0x12dc>)
 80025fe:	480e      	ldr	r0, [pc, #56]	; (8002638 <Menu+0x12ac>)
 8002600:	f004 fc58 	bl	8006eb4 <siprintf>
 8002604:	e007      	b.n	8002616 <Menu+0x128a>
			}
			else if (Duty_Cycle == 100)
 8002606:	4b17      	ldr	r3, [pc, #92]	; (8002664 <Menu+0x12d8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d103      	bne.n	8002616 <Menu+0x128a>
			{
				sprintf(TxDataBuffer, "Duty cycle upper limit is 100\r\n");
 800260e:	4917      	ldr	r1, [pc, #92]	; (800266c <Menu+0x12e0>)
 8002610:	4809      	ldr	r0, [pc, #36]	; (8002638 <Menu+0x12ac>)
 8002612:	f004 fc4f 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 8002616:	4808      	ldr	r0, [pc, #32]	; (8002638 <Menu+0x12ac>)
 8002618:	f7fd fde2 	bl	80001e0 <strlen>
 800261c:	4603      	mov	r3, r0
 800261e:	b29a      	uxth	r2, r3
 8002620:	2364      	movs	r3, #100	; 0x64
 8002622:	4905      	ldr	r1, [pc, #20]	; (8002638 <Menu+0x12ac>)
 8002624:	4806      	ldr	r0, [pc, #24]	; (8002640 <Menu+0x12b4>)
 8002626:	f003 fdee 	bl	8006206 <HAL_UART_Transmit>
			break;
 800262a:	e05e      	b.n	80026ea <Menu+0x135e>
 800262c:	20000004 	.word	0x20000004
 8002630:	cccccccd 	.word	0xcccccccd
 8002634:	0800889c 	.word	0x0800889c
 8002638:	200000b0 	.word	0x200000b0
 800263c:	080088d8 	.word	0x080088d8
 8002640:	200002e4 	.word	0x200002e4
 8002644:	20000005 	.word	0x20000005
 8002648:	080088f8 	.word	0x080088f8
 800264c:	0800890c 	.word	0x0800890c
 8002650:	20000134 	.word	0x20000134
 8002654:	0800892c 	.word	0x0800892c
 8002658:	0800894c 	.word	0x0800894c
 800265c:	08008970 	.word	0x08008970
 8002660:	08008984 	.word	0x08008984
 8002664:	20000007 	.word	0x20000007
 8002668:	080089f4 	.word	0x080089f4
 800266c:	08008a08 	.word	0x08008a08
		case 56:  //8 D-
			if (Duty_Cycle > 0)
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <Menu+0x1368>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00d      	beq.n	8002694 <Menu+0x1308>
			{
				Duty_Cycle -= 1;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <Menu+0x1368>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	3b01      	subs	r3, #1
 800267e:	b2da      	uxtb	r2, r3
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <Menu+0x1368>)
 8002682:	701a      	strb	r2, [r3, #0]
				sprintf(TxDataBuffer, "Duty Cycle = %d \r\n", Duty_Cycle);
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <Menu+0x1368>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	491b      	ldr	r1, [pc, #108]	; (80026f8 <Menu+0x136c>)
 800268c:	481b      	ldr	r0, [pc, #108]	; (80026fc <Menu+0x1370>)
 800268e:	f004 fc11 	bl	8006eb4 <siprintf>
 8002692:	e007      	b.n	80026a4 <Menu+0x1318>
			}
			else if (V_Min == 0)
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <Menu+0x1374>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d103      	bne.n	80026a4 <Menu+0x1318>
			{
				sprintf(TxDataBuffer, "Duty Cycle lower limit is 0\r\n");
 800269c:	4919      	ldr	r1, [pc, #100]	; (8002704 <Menu+0x1378>)
 800269e:	4817      	ldr	r0, [pc, #92]	; (80026fc <Menu+0x1370>)
 80026a0:	f004 fc08 	bl	8006eb4 <siprintf>
			}

			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 100);
 80026a4:	4815      	ldr	r0, [pc, #84]	; (80026fc <Menu+0x1370>)
 80026a6:	f7fd fd9b 	bl	80001e0 <strlen>
 80026aa:	4603      	mov	r3, r0
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	2364      	movs	r3, #100	; 0x64
 80026b0:	4912      	ldr	r1, [pc, #72]	; (80026fc <Menu+0x1370>)
 80026b2:	4815      	ldr	r0, [pc, #84]	; (8002708 <Menu+0x137c>)
 80026b4:	f003 fda7 	bl	8006206 <HAL_UART_Transmit>
			break;
 80026b8:	e017      	b.n	80026ea <Menu+0x135e>
		case 57:  //back
			State = Mode_Menu;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <Menu+0x1380>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
			Mode = None;
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <Menu+0x1384>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
			break;
 80026c6:	e010      	b.n	80026ea <Menu+0x135e>
		default:
			sprintf(TxDataBuffer, "Wrong Input\r\n");
 80026c8:	4912      	ldr	r1, [pc, #72]	; (8002714 <Menu+0x1388>)
 80026ca:	480c      	ldr	r0, [pc, #48]	; (80026fc <Menu+0x1370>)
 80026cc:	f004 fbf2 	bl	8006eb4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80026d0:	480a      	ldr	r0, [pc, #40]	; (80026fc <Menu+0x1370>)
 80026d2:	f7fd fd85 	bl	80001e0 <strlen>
 80026d6:	4603      	mov	r3, r0
 80026d8:	b29a      	uxth	r2, r3
 80026da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026de:	4907      	ldr	r1, [pc, #28]	; (80026fc <Menu+0x1370>)
 80026e0:	4809      	ldr	r0, [pc, #36]	; (8002708 <Menu+0x137c>)
 80026e2:	f003 fd90 	bl	8006206 <HAL_UART_Transmit>
			break;
 80026e6:	e000      	b.n	80026ea <Menu+0x135e>
			break;
 80026e8:	bf00      	nop
		}
		break;
 80026ea:	bf00      	nop
	}
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000007 	.word	0x20000007
 80026f8:	080089f4 	.word	0x080089f4
 80026fc:	200000b0 	.word	0x200000b0
 8002700:	20000134 	.word	0x20000134
 8002704:	08008a28 	.word	0x08008a28
 8002708:	200002e4 	.word	0x200002e4
 800270c:	20000135 	.word	0x20000135
 8002710:	20000136 	.word	0x20000136
 8002714:	080087f0 	.word	0x080087f0

08002718 <Function_Gen>:

void Function_Gen()
{
 8002718:	b5b0      	push	{r4, r5, r7, lr}
 800271a:	af00      	add	r7, sp, #0
	static float rad = 0;
	static uint8_t V_Out = 0;
	if (Hz > 0)
 800271c:	4b7c      	ldr	r3, [pc, #496]	; (8002910 <Function_Gen+0x1f8>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80d8 	beq.w	80028d6 <Function_Gen+0x1be>
	{
		switch (Mode)
 8002726:	4b7b      	ldr	r3, [pc, #492]	; (8002914 <Function_Gen+0x1fc>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b03      	cmp	r3, #3
 800272c:	f200 80e7 	bhi.w	80028fe <Function_Gen+0x1e6>
 8002730:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <Function_Gen+0x20>)
 8002732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002736:	bf00      	nop
 8002738:	08002749 	.word	0x08002749
 800273c:	08002751 	.word	0x08002751
 8002740:	0800281d 	.word	0x0800281d
 8002744:	08002891 	.word	0x08002891
		{
		case None:
			dataOut = 0;
 8002748:	4b73      	ldr	r3, [pc, #460]	; (8002918 <Function_Gen+0x200>)
 800274a:	2200      	movs	r2, #0
 800274c:	801a      	strh	r2, [r3, #0]
			break;
 800274e:	e0d6      	b.n	80028fe <Function_Gen+0x1e6>
		case Sawtooth:
			Period = 1000000/(Hz*(V_Max-V_Min)*4096/330);
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <Function_Gen+0x1f8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b71      	ldr	r3, [pc, #452]	; (800291c <Function_Gen+0x204>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	4619      	mov	r1, r3
 800275c:	4b70      	ldr	r3, [pc, #448]	; (8002920 <Function_Gen+0x208>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	1acb      	subs	r3, r1, r3
 8002762:	fb03 f302 	mul.w	r3, r3, r2
 8002766:	031b      	lsls	r3, r3, #12
 8002768:	4a6e      	ldr	r2, [pc, #440]	; (8002924 <Function_Gen+0x20c>)
 800276a:	fb82 1203 	smull	r1, r2, r2, r3
 800276e:	11d2      	asrs	r2, r2, #7
 8002770:	17db      	asrs	r3, r3, #31
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	4a6c      	ldr	r2, [pc, #432]	; (8002928 <Function_Gen+0x210>)
 8002776:	fb92 f3f3 	sdiv	r3, r2, r3
 800277a:	461a      	mov	r2, r3
 800277c:	4b6b      	ldr	r3, [pc, #428]	; (800292c <Function_Gen+0x214>)
 800277e:	601a      	str	r2, [r3, #0]
			if (Slope == 1)
 8002780:	4b6b      	ldr	r3, [pc, #428]	; (8002930 <Function_Gen+0x218>)
 8002782:	f993 3000 	ldrsb.w	r3, [r3]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d120      	bne.n	80027cc <Function_Gen+0xb4>
			{
				if (dataOut >= (V_Max*4096/33))
 800278a:	4b63      	ldr	r3, [pc, #396]	; (8002918 <Function_Gen+0x200>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	4619      	mov	r1, r3
 8002790:	4b62      	ldr	r3, [pc, #392]	; (800291c <Function_Gen+0x204>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	031b      	lsls	r3, r3, #12
 8002796:	4a67      	ldr	r2, [pc, #412]	; (8002934 <Function_Gen+0x21c>)
 8002798:	fb82 0203 	smull	r0, r2, r2, r3
 800279c:	10d2      	asrs	r2, r2, #3
 800279e:	17db      	asrs	r3, r3, #31
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	4299      	cmp	r1, r3
 80027a4:	db0b      	blt.n	80027be <Function_Gen+0xa6>
				{
					dataOut = V_Min*4096/33;
 80027a6:	4b5e      	ldr	r3, [pc, #376]	; (8002920 <Function_Gen+0x208>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	031b      	lsls	r3, r3, #12
 80027ac:	4a61      	ldr	r2, [pc, #388]	; (8002934 <Function_Gen+0x21c>)
 80027ae:	fb82 1203 	smull	r1, r2, r2, r3
 80027b2:	10d2      	asrs	r2, r2, #3
 80027b4:	17db      	asrs	r3, r3, #31
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	4b57      	ldr	r3, [pc, #348]	; (8002918 <Function_Gen+0x200>)
 80027bc:	801a      	strh	r2, [r3, #0]
				}
				dataOut += 1;
 80027be:	4b56      	ldr	r3, [pc, #344]	; (8002918 <Function_Gen+0x200>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	4b54      	ldr	r3, [pc, #336]	; (8002918 <Function_Gen+0x200>)
 80027c8:	801a      	strh	r2, [r3, #0]
					dataOut = V_Max*4096/33;
				}
				dataOut -= 1;
			}

			break;
 80027ca:	e095      	b.n	80028f8 <Function_Gen+0x1e0>
			else if (Slope == -1)
 80027cc:	4b58      	ldr	r3, [pc, #352]	; (8002930 <Function_Gen+0x218>)
 80027ce:	f993 3000 	ldrsb.w	r3, [r3]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	f040 808f 	bne.w	80028f8 <Function_Gen+0x1e0>
				if (dataOut <= (V_Min*4096/33))
 80027da:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <Function_Gen+0x200>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <Function_Gen+0x208>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	031b      	lsls	r3, r3, #12
 80027e6:	4a53      	ldr	r2, [pc, #332]	; (8002934 <Function_Gen+0x21c>)
 80027e8:	fb82 0203 	smull	r0, r2, r2, r3
 80027ec:	10d2      	asrs	r2, r2, #3
 80027ee:	17db      	asrs	r3, r3, #31
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	4299      	cmp	r1, r3
 80027f4:	dc0b      	bgt.n	800280e <Function_Gen+0xf6>
					dataOut = V_Max*4096/33;
 80027f6:	4b49      	ldr	r3, [pc, #292]	; (800291c <Function_Gen+0x204>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	031b      	lsls	r3, r3, #12
 80027fc:	4a4d      	ldr	r2, [pc, #308]	; (8002934 <Function_Gen+0x21c>)
 80027fe:	fb82 1203 	smull	r1, r2, r2, r3
 8002802:	10d2      	asrs	r2, r2, #3
 8002804:	17db      	asrs	r3, r3, #31
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	b29a      	uxth	r2, r3
 800280a:	4b43      	ldr	r3, [pc, #268]	; (8002918 <Function_Gen+0x200>)
 800280c:	801a      	strh	r2, [r3, #0]
				dataOut -= 1;
 800280e:	4b42      	ldr	r3, [pc, #264]	; (8002918 <Function_Gen+0x200>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	4b40      	ldr	r3, [pc, #256]	; (8002918 <Function_Gen+0x200>)
 8002818:	801a      	strh	r2, [r3, #0]
			break;
 800281a:	e06d      	b.n	80028f8 <Function_Gen+0x1e0>
		case Sine:
			dataOut = (V_Max-V_Min)*(sin(rad));
 800281c:	4b3f      	ldr	r3, [pc, #252]	; (800291c <Function_Gen+0x204>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <Function_Gen+0x208>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd ffad 	bl	8000788 <__aeabi_i2d>
 800282e:	4604      	mov	r4, r0
 8002830:	460d      	mov	r5, r1
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <Function_Gen+0x220>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd ffb8 	bl	80007ac <__aeabi_f2d>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	ec43 2b10 	vmov	d0, r2, r3
 8002844:	f004 ff64 	bl	8007710 <sin>
 8002848:	ec53 2b10 	vmov	r2, r3, d0
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fd1e 	bl	8000290 <__aeabi_dmul>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	f7fe f8ae 	bl	80009bc <__aeabi_d2uiz>
 8002860:	4603      	mov	r3, r0
 8002862:	b29a      	uxth	r2, r3
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <Function_Gen+0x200>)
 8002866:	801a      	strh	r2, [r3, #0]
			rad+=0.01;
 8002868:	4b33      	ldr	r3, [pc, #204]	; (8002938 <Function_Gen+0x220>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd ff9d 	bl	80007ac <__aeabi_f2d>
 8002872:	a325      	add	r3, pc, #148	; (adr r3, 8002908 <Function_Gen+0x1f0>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd fe3a 	bl	80004f0 <__adddf3>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f8ba 	bl	80009fc <__aeabi_d2f>
 8002888:	4603      	mov	r3, r0
 800288a:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <Function_Gen+0x220>)
 800288c:	6013      	str	r3, [r2, #0]
			break;
 800288e:	e036      	b.n	80028fe <Function_Gen+0x1e6>
		case Square:
			V_Out += 1;
 8002890:	4b2a      	ldr	r3, [pc, #168]	; (800293c <Function_Gen+0x224>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b28      	ldr	r3, [pc, #160]	; (800293c <Function_Gen+0x224>)
 800289a:	701a      	strb	r2, [r3, #0]
			if (V_Out >= Duty_Cycle)
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <Function_Gen+0x224>)
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <Function_Gen+0x228>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d304      	bcc.n	80028b2 <Function_Gen+0x19a>
			{
				V_Out = V_Max;
 80028a8:	4b1c      	ldr	r3, [pc, #112]	; (800291c <Function_Gen+0x204>)
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <Function_Gen+0x224>)
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e009      	b.n	80028c6 <Function_Gen+0x1ae>
			}
			else if (V_Out < Duty_Cycle)
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <Function_Gen+0x224>)
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	4b22      	ldr	r3, [pc, #136]	; (8002940 <Function_Gen+0x228>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d203      	bcs.n	80028c6 <Function_Gen+0x1ae>
			{
				V_Out = V_Min;
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <Function_Gen+0x208>)
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <Function_Gen+0x224>)
 80028c4:	701a      	strb	r2, [r3, #0]
			}

			if (V_Out >= 100)
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <Function_Gen+0x224>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b63      	cmp	r3, #99	; 0x63
 80028cc:	d916      	bls.n	80028fc <Function_Gen+0x1e4>
			{
				V_Out = 0;
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <Function_Gen+0x224>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80028d4:	e012      	b.n	80028fc <Function_Gen+0x1e4>
		}
	}
	else if (Hz == 0)
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <Function_Gen+0x1f8>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <Function_Gen+0x1e6>
	{
		dataOut = V_Min*4096/33;
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <Function_Gen+0x208>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	031b      	lsls	r3, r3, #12
 80028e4:	4a13      	ldr	r2, [pc, #76]	; (8002934 <Function_Gen+0x21c>)
 80028e6:	fb82 1203 	smull	r1, r2, r2, r3
 80028ea:	10d2      	asrs	r2, r2, #3
 80028ec:	17db      	asrs	r3, r3, #31
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <Function_Gen+0x200>)
 80028f4:	801a      	strh	r2, [r3, #0]
	}

}
 80028f6:	e002      	b.n	80028fe <Function_Gen+0x1e6>
			break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <Function_Gen+0x1e6>
			break;
 80028fc:	bf00      	nop
}
 80028fe:	bf00      	nop
 8002900:	bdb0      	pop	{r4, r5, r7, pc}
 8002902:	bf00      	nop
 8002904:	f3af 8000 	nop.w
 8002908:	47ae147b 	.word	0x47ae147b
 800290c:	3f847ae1 	.word	0x3f847ae1
 8002910:	20000004 	.word	0x20000004
 8002914:	20000136 	.word	0x20000136
 8002918:	20000138 	.word	0x20000138
 800291c:	20000005 	.word	0x20000005
 8002920:	20000134 	.word	0x20000134
 8002924:	634c0635 	.word	0x634c0635
 8002928:	000f4240 	.word	0x000f4240
 800292c:	20000000 	.word	0x20000000
 8002930:	20000006 	.word	0x20000006
 8002934:	3e0f83e1 	.word	0x3e0f83e1
 8002938:	20000140 	.word	0x20000140
 800293c:	20000144 	.word	0x20000144
 8002940:	20000007 	.word	0x20000007

08002944 <MCP4922SetOutput>:

void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	460a      	mov	r2, r1
 800294e:	71fb      	strb	r3, [r7, #7]
 8002950:	4613      	mov	r3, r2
 8002952:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002954:	88bb      	ldrh	r3, [r7, #4]
 8002956:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	031b      	lsls	r3, r3, #12
 800295e:	b29b      	uxth	r3, r3
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800296a:	4807      	ldr	r0, [pc, #28]	; (8002988 <MCP4922SetOutput+0x44>)
 800296c:	f001 ff30 	bl	80047d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	2201      	movs	r2, #1
 8002976:	4619      	mov	r1, r3
 8002978:	4804      	ldr	r0, [pc, #16]	; (800298c <MCP4922SetOutput+0x48>)
 800297a:	f002 fc41 	bl	8005200 <HAL_SPI_Transmit_IT>
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40020400 	.word	0x40020400
 800298c:	2000019c 	.word	0x2000019c

08002990 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <HAL_SPI_TxCpltCallback+0x24>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d105      	bne.n	80029ac <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80029a0:	2201      	movs	r2, #1
 80029a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <HAL_SPI_TxCpltCallback+0x28>)
 80029a8:	f001 ff12 	bl	80047d0 <HAL_GPIO_WritePin>
	}
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	2000019c 	.word	0x2000019c
 80029b8:	40020400 	.word	0x40020400

080029bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b4b0      	push	{r4, r5, r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d10c      	bne.n	80029e6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	1814      	adds	r4, r2, r0
 80029dc:	eb43 0501 	adc.w	r5, r3, r1
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80029e2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bcb0      	pop	{r4, r5, r7}
 80029ee:	4770      	bx	lr
 80029f0:	2000023c 	.word	0x2000023c
 80029f4:	200000a0 	.word	0x200000a0

080029f8 <micros>:

uint64_t micros()
{
 80029f8:	b4b0      	push	{r4, r5, r7}
 80029fa:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <micros+0x2c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	4618      	mov	r0, r3
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <micros+0x30>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	1884      	adds	r4, r0, r2
 8002a10:	eb41 0503 	adc.w	r5, r1, r3
 8002a14:	4622      	mov	r2, r4
 8002a16:	462b      	mov	r3, r5
}
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bcb0      	pop	{r4, r5, r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	2000023c 	.word	0x2000023c
 8002a28:	200000a0 	.word	0x200000a0

08002a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a30:	b672      	cpsid	i
}
 8002a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a34:	e7fe      	b.n	8002a34 <Error_Handler+0x8>
	...

08002a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a76:	2007      	movs	r0, #7
 8002a78:	f001 f8ca 	bl	8003c10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800

08002a88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <HAL_ADC_MspInit+0xec>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d15f      	bne.n	8002b6a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_ADC_MspInit+0xf0>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a31      	ldr	r2, [pc, #196]	; (8002b78 <HAL_ADC_MspInit+0xf0>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_ADC_MspInit+0xf0>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_ADC_MspInit+0xf0>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <HAL_ADC_MspInit+0xf0>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_ADC_MspInit+0xf0>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	4821      	ldr	r0, [pc, #132]	; (8002b7c <HAL_ADC_MspInit+0xf4>)
 8002af6:	f001 fccf 	bl	8004498 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002afa:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002afc:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <HAL_ADC_MspInit+0xfc>)
 8002afe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b00:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b3e:	4810      	ldr	r0, [pc, #64]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b40:	f001 f8a8 	bl	8003c94 <HAL_DMA_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002b4a:	f7ff ff6f 	bl	8002a2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b52:	639a      	str	r2, [r3, #56]	; 0x38
 8002b54:	4a0a      	ldr	r2, [pc, #40]	; (8002b80 <HAL_ADC_MspInit+0xf8>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2012      	movs	r0, #18
 8002b60:	f001 f861 	bl	8003c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b64:	2012      	movs	r0, #18
 8002b66:	f001 f87a 	bl	8003c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40012000 	.word	0x40012000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	20000284 	.word	0x20000284
 8002b84:	40026410 	.word	0x40026410

08002b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_SPI_MspInit+0x94>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d133      	bne.n	8002c12 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <HAL_SPI_MspInit+0x98>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_SPI_MspInit+0x98>)
 8002bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_SPI_MspInit+0x98>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_SPI_MspInit+0x98>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <HAL_SPI_MspInit+0x98>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_SPI_MspInit+0x98>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002be2:	2338      	movs	r3, #56	; 0x38
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4809      	ldr	r0, [pc, #36]	; (8002c24 <HAL_SPI_MspInit+0x9c>)
 8002bfe:	f001 fc4b 	bl	8004498 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2100      	movs	r1, #0
 8002c06:	2033      	movs	r0, #51	; 0x33
 8002c08:	f001 f80d 	bl	8003c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002c0c:	2033      	movs	r0, #51	; 0x33
 8002c0e:	f001 f826 	bl	8003c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c12:	bf00      	nop
 8002c14:	3728      	adds	r7, #40	; 0x28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40003c00 	.word	0x40003c00
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40020400 	.word	0x40020400

08002c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_TIM_Base_MspInit+0x70>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10e      	bne.n	8002c58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <HAL_TIM_Base_MspInit+0x74>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <HAL_TIM_Base_MspInit+0x74>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <HAL_TIM_Base_MspInit+0x74>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002c56:	e01a      	b.n	8002c8e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_TIM_Base_MspInit+0x78>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d115      	bne.n	8002c8e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_TIM_Base_MspInit+0x74>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <HAL_TIM_Base_MspInit+0x74>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_TIM_Base_MspInit+0x74>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	201a      	movs	r0, #26
 8002c84:	f000 ffcf 	bl	8003c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002c88:	201a      	movs	r0, #26
 8002c8a:	f000 ffe8 	bl	8003c5e <HAL_NVIC_EnableIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40014800 	.word	0x40014800

08002ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_UART_MspInit+0x94>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d133      	bne.n	8002d2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <HAL_UART_MspInit+0x98>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_UART_MspInit+0x98>)
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_UART_MspInit+0x98>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_UART_MspInit+0x98>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <HAL_UART_MspInit+0x98>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_UART_MspInit+0x98>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cfe:	230c      	movs	r3, #12
 8002d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d0e:	2307      	movs	r3, #7
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d12:	f107 0314 	add.w	r3, r7, #20
 8002d16:	4619      	mov	r1, r3
 8002d18:	4809      	ldr	r0, [pc, #36]	; (8002d40 <HAL_UART_MspInit+0x9c>)
 8002d1a:	f001 fbbd 	bl	8004498 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	2026      	movs	r0, #38	; 0x26
 8002d24:	f000 ff7f 	bl	8003c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d28:	2026      	movs	r0, #38	; 0x26
 8002d2a:	f000 ff98 	bl	8003c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	; 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40004400 	.word	0x40004400
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000

08002d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <NMI_Handler+0x4>

08002d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <HardFault_Handler+0x4>

08002d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <MemManage_Handler+0x4>

08002d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <BusFault_Handler+0x4>

08002d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <UsageFault_Handler+0x4>

08002d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d90:	f000 f8f8 	bl	8002f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d9c:	4802      	ldr	r0, [pc, #8]	; (8002da8 <ADC_IRQHandler+0x10>)
 8002d9e:	f000 f954 	bl	800304a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200001f4 	.word	0x200001f4

08002dac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002db0:	4802      	ldr	r0, [pc, #8]	; (8002dbc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002db2:	f002 fe4b 	bl	8005a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000023c 	.word	0x2000023c

08002dc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <USART2_IRQHandler+0x10>)
 8002dc6:	f003 fae1 	bl	800638c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200002e4 	.word	0x200002e4

08002dd4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <SPI3_IRQHandler+0x10>)
 8002dda:	f002 fa9b 	bl	8005314 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	2000019c 	.word	0x2000019c

08002de8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <DMA2_Stream0_IRQHandler+0x10>)
 8002dee:	f001 f8e9 	bl	8003fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000284 	.word	0x20000284

08002dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e04:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <_sbrk+0x5c>)
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <_sbrk+0x60>)
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <_sbrk+0x64>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <_sbrk+0x68>)
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d207      	bcs.n	8002e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e2c:	f004 f810 	bl	8006e50 <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	220c      	movs	r2, #12
 8002e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e009      	b.n	8002e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <_sbrk+0x64>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <_sbrk+0x64>)
 8002e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20020000 	.word	0x20020000
 8002e5c:	00000400 	.word	0x00000400
 8002e60:	20000148 	.word	0x20000148
 8002e64:	20000340 	.word	0x20000340

08002e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <SystemInit+0x20>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <SystemInit+0x20>)
 8002e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e90:	480d      	ldr	r0, [pc, #52]	; (8002ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e92:	490e      	ldr	r1, [pc, #56]	; (8002ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e94:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e98:	e002      	b.n	8002ea0 <LoopCopyDataInit>

08002e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9e:	3304      	adds	r3, #4

08002ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea4:	d3f9      	bcc.n	8002e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ea8:	4c0b      	ldr	r4, [pc, #44]	; (8002ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eac:	e001      	b.n	8002eb2 <LoopFillZerobss>

08002eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb0:	3204      	adds	r2, #4

08002eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb4:	d3fb      	bcc.n	8002eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eb6:	f7ff ffd7 	bl	8002e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eba:	f003 ffcf 	bl	8006e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ebe:	f7fd ff69 	bl	8000d94 <main>
  bx  lr    
 8002ec2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ecc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002ed0:	08008c88 	.word	0x08008c88
  ldr r2, =_sbss
 8002ed4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002ed8:	2000033c 	.word	0x2000033c

08002edc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002edc:	e7fe      	b.n	8002edc <DMA1_Stream0_IRQHandler>
	...

08002ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <HAL_Init+0x40>)
 8002eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <HAL_Init+0x40>)
 8002ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_Init+0x40>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f08:	2003      	movs	r0, #3
 8002f0a:	f000 fe81 	bl	8003c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f000 f808 	bl	8002f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f14:	f7ff fd90 	bl	8002a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00

08002f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_InitTick+0x54>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_InitTick+0x58>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4619      	mov	r1, r3
 8002f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fe99 	bl	8003c7a <HAL_SYSTICK_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00e      	b.n	8002f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d80a      	bhi.n	8002f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	f000 fe61 	bl	8003c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f64:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <HAL_InitTick+0x5c>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	2000000c 	.word	0x2000000c
 8002f7c:	20000014 	.word	0x20000014
 8002f80:	20000010 	.word	0x20000010

08002f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_IncTick+0x20>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_IncTick+0x24>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <HAL_IncTick+0x24>)
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000014 	.word	0x20000014
 8002fa8:	20000328 	.word	0x20000328

08002fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_GetTick+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000328 	.word	0x20000328

08002fc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e033      	b.n	8003042 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff fd50 	bl	8002a88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800300a:	f023 0302 	bic.w	r3, r3, #2
 800300e:	f043 0202 	orr.w	r2, r3, #2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fba2 	bl	8003760 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f023 0303 	bic.w	r3, r3, #3
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
 8003032:	e001      	b.n	8003038 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b20      	cmp	r3, #32
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d049      	beq.n	8003120 <HAL_ADC_IRQHandler+0xd6>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d046      	beq.n	8003120 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d12b      	bne.n	8003110 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d127      	bne.n	8003110 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d119      	bne.n	8003110 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0220 	bic.w	r2, r2, #32
 80030ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f9cb 	bl	80034ac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f06f 0212 	mvn.w	r2, #18
 800311e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b80      	cmp	r3, #128	; 0x80
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d057      	beq.n	8003202 <HAL_ADC_IRQHandler+0x1b8>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d054      	beq.n	8003202 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d105      	bne.n	8003170 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d139      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d12b      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d124      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11d      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d119      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031cc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f043 0201 	orr.w	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fc32 	bl	8003a5c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 020c 	mvn.w	r2, #12
 8003200:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d017      	beq.n	8003264 <HAL_ADC_IRQHandler+0x21a>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d014      	beq.n	8003264 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d10d      	bne.n	8003264 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f93d 	bl	80034d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0201 	mvn.w	r2, #1
 8003262:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b20      	cmp	r3, #32
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x27a>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d012      	beq.n	80032c4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f06f 0220 	mvn.w	r2, #32
 80032b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f917 	bl	80034e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f06f 0220 	mvn.w	r2, #32
 80032c2:	601a      	str	r2, [r3, #0]
  }
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_Start_DMA+0x1e>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e0ce      	b.n	8003488 <HAL_ADC_Start_DMA+0x1bc>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d018      	beq.n	8003332 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003310:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <HAL_ADC_Start_DMA+0x1c4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5f      	ldr	r2, [pc, #380]	; (8003494 <HAL_ADC_Start_DMA+0x1c8>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0c9a      	lsrs	r2, r3, #18
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003324:	e002      	b.n	800332c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3b01      	subs	r3, #1
 800332a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f9      	bne.n	8003326 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003340:	d107      	bne.n	8003352 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003350:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	f040 8086 	bne.w	800346e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800338c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800339c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a0:	d106      	bne.n	80033b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f023 0206 	bic.w	r2, r3, #6
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
 80033ae:	e002      	b.n	80033b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033be:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_ADC_Start_DMA+0x1cc>)
 80033c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	4a35      	ldr	r2, [pc, #212]	; (800349c <HAL_ADC_Start_DMA+0x1d0>)
 80033c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	4a34      	ldr	r2, [pc, #208]	; (80034a0 <HAL_ADC_Start_DMA+0x1d4>)
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	4a33      	ldr	r2, [pc, #204]	; (80034a4 <HAL_ADC_Start_DMA+0x1d8>)
 80033d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003402:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	334c      	adds	r3, #76	; 0x4c
 800340e:	4619      	mov	r1, r3
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f000 fcec 	bl	8003df0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10f      	bne.n	8003444 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d129      	bne.n	8003486 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	e020      	b.n	8003486 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a17      	ldr	r2, [pc, #92]	; (80034a8 <HAL_ADC_Start_DMA+0x1dc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d11b      	bne.n	8003486 <HAL_ADC_Start_DMA+0x1ba>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d114      	bne.n	8003486 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	e00b      	b.n	8003486 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2000000c 	.word	0x2000000c
 8003494:	431bde83 	.word	0x431bde83
 8003498:	40012300 	.word	0x40012300
 800349c:	08003959 	.word	0x08003959
 80034a0:	08003a13 	.word	0x08003a13
 80034a4:	08003a2f 	.word	0x08003a2f
 80034a8:	40012000 	.word	0x40012000

080034ac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x1c>
 8003514:	2302      	movs	r3, #2
 8003516:	e113      	b.n	8003740 <HAL_ADC_ConfigChannel+0x244>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b09      	cmp	r3, #9
 8003526:	d925      	bls.n	8003574 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68d9      	ldr	r1, [r3, #12]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	461a      	mov	r2, r3
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	3b1e      	subs	r3, #30
 800353e:	2207      	movs	r2, #7
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43da      	mvns	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	400a      	ands	r2, r1
 800354c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68d9      	ldr	r1, [r3, #12]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	b29b      	uxth	r3, r3
 800355e:	4618      	mov	r0, r3
 8003560:	4603      	mov	r3, r0
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4403      	add	r3, r0
 8003566:	3b1e      	subs	r3, #30
 8003568:	409a      	lsls	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	e022      	b.n	80035ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6919      	ldr	r1, [r3, #16]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	b29b      	uxth	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	2207      	movs	r2, #7
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	400a      	ands	r2, r1
 8003596:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6919      	ldr	r1, [r3, #16]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4618      	mov	r0, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4403      	add	r3, r0
 80035b0:	409a      	lsls	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d824      	bhi.n	800360c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	3b05      	subs	r3, #5
 80035d4:	221f      	movs	r2, #31
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	400a      	ands	r2, r1
 80035e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	3b05      	subs	r3, #5
 80035fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	635a      	str	r2, [r3, #52]	; 0x34
 800360a:	e04c      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b0c      	cmp	r3, #12
 8003612:	d824      	bhi.n	800365e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	3b23      	subs	r3, #35	; 0x23
 8003626:	221f      	movs	r2, #31
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43da      	mvns	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	400a      	ands	r2, r1
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	4618      	mov	r0, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	3b23      	subs	r3, #35	; 0x23
 8003650:	fa00 f203 	lsl.w	r2, r0, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
 800365c:	e023      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	3b41      	subs	r3, #65	; 0x41
 8003670:	221f      	movs	r2, #31
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	400a      	ands	r2, r1
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	4618      	mov	r0, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	3b41      	subs	r3, #65	; 0x41
 800369a:	fa00 f203 	lsl.w	r2, r0, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036a6:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_ADC_ConfigChannel+0x250>)
 80036a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_ADC_ConfigChannel+0x254>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d10f      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x1d8>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b12      	cmp	r3, #18
 80036ba:	d10b      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <HAL_ADC_ConfigChannel+0x254>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d12b      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x23a>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_ADC_ConfigChannel+0x258>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d003      	beq.n	80036f0 <HAL_ADC_ConfigChannel+0x1f4>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b11      	cmp	r3, #17
 80036ee:	d122      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a11      	ldr	r2, [pc, #68]	; (8003754 <HAL_ADC_ConfigChannel+0x258>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d111      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003712:	4b11      	ldr	r3, [pc, #68]	; (8003758 <HAL_ADC_ConfigChannel+0x25c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a11      	ldr	r2, [pc, #68]	; (800375c <HAL_ADC_ConfigChannel+0x260>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	0c9a      	lsrs	r2, r3, #18
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003728:	e002      	b.n	8003730 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3b01      	subs	r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f9      	bne.n	800372a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40012300 	.word	0x40012300
 8003750:	40012000 	.word	0x40012000
 8003754:	10000012 	.word	0x10000012
 8003758:	2000000c 	.word	0x2000000c
 800375c:	431bde83 	.word	0x431bde83

08003760 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003768:	4b79      	ldr	r3, [pc, #484]	; (8003950 <ADC_Init+0x1f0>)
 800376a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	431a      	orrs	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	021a      	lsls	r2, r3, #8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6899      	ldr	r1, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	4a58      	ldr	r2, [pc, #352]	; (8003954 <ADC_Init+0x1f4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d022      	beq.n	800383e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003806:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6899      	ldr	r1, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6899      	ldr	r1, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	e00f      	b.n	800385e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800384c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800385c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0202 	bic.w	r2, r2, #2
 800386c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6899      	ldr	r1, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	7e1b      	ldrb	r3, [r3, #24]
 8003878:	005a      	lsls	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01b      	beq.n	80038c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	3b01      	subs	r3, #1
 80038b8:	035a      	lsls	r2, r3, #13
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	e007      	b.n	80038d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	051a      	lsls	r2, r3, #20
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003908:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6899      	ldr	r1, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003916:	025a      	lsls	r2, r3, #9
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6899      	ldr	r1, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	029a      	lsls	r2, r3, #10
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40012300 	.word	0x40012300
 8003954:	0f000001 	.word	0x0f000001

08003958 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800396e:	2b00      	cmp	r3, #0
 8003970:	d13c      	bne.n	80039ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d12b      	bne.n	80039e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003990:	2b00      	cmp	r3, #0
 8003992:	d127      	bne.n	80039e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d006      	beq.n	80039b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d119      	bne.n	80039e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0220 	bic.w	r2, r2, #32
 80039be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7ff fd61 	bl	80034ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039ea:	e00e      	b.n	8003a0a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff fd75 	bl	80034e8 <HAL_ADC_ErrorCallback>
}
 80039fe:	e004      	b.n	8003a0a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7ff fd4d 	bl	80034c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2240      	movs	r2, #64	; 0x40
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f043 0204 	orr.w	r2, r3, #4
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff fd4a 	bl	80034e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aa2:	4a04      	ldr	r2, [pc, #16]	; (8003ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	60d3      	str	r3, [r2, #12]
}
 8003aa8:	bf00      	nop
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	f003 0307 	and.w	r3, r3, #7
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	db0b      	blt.n	8003afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	f003 021f 	and.w	r2, r3, #31
 8003aec:	4907      	ldr	r1, [pc, #28]	; (8003b0c <__NVIC_EnableIRQ+0x38>)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2001      	movs	r0, #1
 8003af6:	fa00 f202 	lsl.w	r2, r0, r2
 8003afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	e000e100 	.word	0xe000e100

08003b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	6039      	str	r1, [r7, #0]
 8003b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	db0a      	blt.n	8003b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	490c      	ldr	r1, [pc, #48]	; (8003b5c <__NVIC_SetPriority+0x4c>)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	0112      	lsls	r2, r2, #4
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	440b      	add	r3, r1
 8003b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b38:	e00a      	b.n	8003b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4908      	ldr	r1, [pc, #32]	; (8003b60 <__NVIC_SetPriority+0x50>)
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	3b04      	subs	r3, #4
 8003b48:	0112      	lsls	r2, r2, #4
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	761a      	strb	r2, [r3, #24]
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	e000e100 	.word	0xe000e100
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b089      	sub	sp, #36	; 0x24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f1c3 0307 	rsb	r3, r3, #7
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	bf28      	it	cs
 8003b82:	2304      	movcs	r3, #4
 8003b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	2b06      	cmp	r3, #6
 8003b8c:	d902      	bls.n	8003b94 <NVIC_EncodePriority+0x30>
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3b03      	subs	r3, #3
 8003b92:	e000      	b.n	8003b96 <NVIC_EncodePriority+0x32>
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b98:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43da      	mvns	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bac:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	43d9      	mvns	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	4313      	orrs	r3, r2
         );
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3724      	adds	r7, #36	; 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bdc:	d301      	bcc.n	8003be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00f      	b.n	8003c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003be2:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <SysTick_Config+0x40>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bea:	210f      	movs	r1, #15
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	f7ff ff8e 	bl	8003b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <SysTick_Config+0x40>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <SysTick_Config+0x40>)
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	e000e010 	.word	0xe000e010

08003c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff29 	bl	8003a70 <__NVIC_SetPriorityGrouping>
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
 8003c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c38:	f7ff ff3e 	bl	8003ab8 <__NVIC_GetPriorityGrouping>
 8003c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	6978      	ldr	r0, [r7, #20]
 8003c44:	f7ff ff8e 	bl	8003b64 <NVIC_EncodePriority>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff5d 	bl	8003b10 <__NVIC_SetPriority>
}
 8003c56:	bf00      	nop
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	4603      	mov	r3, r0
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ff31 	bl	8003ad4 <__NVIC_EnableIRQ>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ffa2 	bl	8003bcc <SysTick_Config>
 8003c88:	4603      	mov	r3, r0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ca0:	f7ff f984 	bl	8002fac <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e099      	b.n	8003de4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd0:	e00f      	b.n	8003cf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cd2:	f7ff f96b 	bl	8002fac <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	d908      	bls.n	8003cf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e078      	b.n	8003de4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e8      	bne.n	8003cd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4b38      	ldr	r3, [pc, #224]	; (8003dec <HAL_DMA_Init+0x158>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d107      	bne.n	8003d5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	4313      	orrs	r3, r2
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f023 0307 	bic.w	r3, r3, #7
 8003d72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d117      	bne.n	8003db6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00e      	beq.n	8003db6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fb01 	bl	80043a0 <DMA_CheckFifoParam>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2240      	movs	r2, #64	; 0x40
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003db2:	2301      	movs	r3, #1
 8003db4:	e016      	b.n	8003de4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fab8 	bl	8004334 <DMA_CalcBaseAndBitshift>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	223f      	movs	r2, #63	; 0x3f
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	f010803f 	.word	0xf010803f

08003df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_DMA_Start_IT+0x26>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e040      	b.n	8003e98 <HAL_DMA_Start_IT+0xa8>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d12f      	bne.n	8003e8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fa4a 	bl	80042d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	223f      	movs	r2, #63	; 0x3f
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0216 	orr.w	r2, r2, #22
 8003e5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d007      	beq.n	8003e78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0208 	orr.w	r2, r2, #8
 8003e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e005      	b.n	8003e96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
 8003e94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003eae:	f7ff f87d 	bl	8002fac <HAL_GetTick>
 8003eb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d008      	beq.n	8003ed2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2280      	movs	r2, #128	; 0x80
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e052      	b.n	8003f78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0216 	bic.w	r2, r2, #22
 8003ee0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <HAL_DMA_Abort+0x62>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0208 	bic.w	r2, r2, #8
 8003f10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f22:	e013      	b.n	8003f4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f24:	f7ff f842 	bl	8002fac <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d90c      	bls.n	8003f4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2203      	movs	r2, #3
 8003f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e015      	b.n	8003f78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e4      	bne.n	8003f24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5e:	223f      	movs	r2, #63	; 0x3f
 8003f60:	409a      	lsls	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d004      	beq.n	8003f9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e00c      	b.n	8003fb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fd0:	4b92      	ldr	r3, [pc, #584]	; (800421c <HAL_DMA_IRQHandler+0x258>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a92      	ldr	r2, [pc, #584]	; (8004220 <HAL_DMA_IRQHandler+0x25c>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	0a9b      	lsrs	r3, r3, #10
 8003fdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2208      	movs	r2, #8
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d01a      	beq.n	8004030 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d013      	beq.n	8004030 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401c:	2208      	movs	r2, #8
 800401e:	409a      	lsls	r2, r3
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004028:	f043 0201 	orr.w	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004034:	2201      	movs	r2, #1
 8004036:	409a      	lsls	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d012      	beq.n	8004066 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	2201      	movs	r2, #1
 8004054:	409a      	lsls	r2, r3
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f043 0202 	orr.w	r2, r3, #2
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406a:	2204      	movs	r2, #4
 800406c:	409a      	lsls	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d012      	beq.n	800409c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	2204      	movs	r2, #4
 800408a:	409a      	lsls	r2, r3
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	2210      	movs	r2, #16
 80040a2:	409a      	lsls	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d043      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d03c      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	2210      	movs	r2, #16
 80040c0:	409a      	lsls	r2, r3
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d024      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
 80040f2:	e01f      	b.n	8004134 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01b      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
 8004104:	e016      	b.n	8004134 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0208 	bic.w	r2, r2, #8
 8004122:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	2220      	movs	r2, #32
 800413a:	409a      	lsls	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 808e 	beq.w	8004262 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8086 	beq.w	8004262 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	2220      	movs	r2, #32
 800415c:	409a      	lsls	r2, r3
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b05      	cmp	r3, #5
 800416c:	d136      	bne.n	80041dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0216 	bic.w	r2, r2, #22
 800417c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800418c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <HAL_DMA_IRQHandler+0x1da>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0208 	bic.w	r2, r2, #8
 80041ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	223f      	movs	r2, #63	; 0x3f
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d07d      	beq.n	80042ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
        }
        return;
 80041da:	e078      	b.n	80042ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01c      	beq.n	8004224 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d108      	bne.n	800420a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d030      	beq.n	8004262 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
 8004208:	e02b      	b.n	8004262 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d027      	beq.n	8004262 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
 800421a:	e022      	b.n	8004262 <HAL_DMA_IRQHandler+0x29e>
 800421c:	2000000c 	.word	0x2000000c
 8004220:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0210 	bic.w	r2, r2, #16
 8004240:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	2b00      	cmp	r3, #0
 8004268:	d032      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d022      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2205      	movs	r2, #5
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	3301      	adds	r3, #1
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	429a      	cmp	r2, r3
 8004298:	d307      	bcc.n	80042aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f2      	bne.n	800428e <HAL_DMA_IRQHandler+0x2ca>
 80042a8:	e000      	b.n	80042ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80042aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
 80042cc:	e000      	b.n	80042d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80042ce:	bf00      	nop
    }
  }
}
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop

080042d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d108      	bne.n	8004318 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004316:	e007      	b.n	8004328 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	3b10      	subs	r3, #16
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <DMA_CalcBaseAndBitshift+0x64>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800434e:	4a13      	ldr	r2, [pc, #76]	; (800439c <DMA_CalcBaseAndBitshift+0x68>)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b03      	cmp	r3, #3
 8004360:	d909      	bls.n	8004376 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	1d1a      	adds	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	659a      	str	r2, [r3, #88]	; 0x58
 8004374:	e007      	b.n	8004386 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	aaaaaaab 	.word	0xaaaaaaab
 800439c:	08008a60 	.word	0x08008a60

080043a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d11f      	bne.n	80043fa <DMA_CheckFifoParam+0x5a>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b03      	cmp	r3, #3
 80043be:	d856      	bhi.n	800446e <DMA_CheckFifoParam+0xce>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <DMA_CheckFifoParam+0x28>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043eb 	.word	0x080043eb
 80043d0:	080043d9 	.word	0x080043d9
 80043d4:	0800446f 	.word	0x0800446f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d046      	beq.n	8004472 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e8:	e043      	b.n	8004472 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043f2:	d140      	bne.n	8004476 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f8:	e03d      	b.n	8004476 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004402:	d121      	bne.n	8004448 <DMA_CheckFifoParam+0xa8>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b03      	cmp	r3, #3
 8004408:	d837      	bhi.n	800447a <DMA_CheckFifoParam+0xda>
 800440a:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <DMA_CheckFifoParam+0x70>)
 800440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004410:	08004421 	.word	0x08004421
 8004414:	08004427 	.word	0x08004427
 8004418:	08004421 	.word	0x08004421
 800441c:	08004439 	.word	0x08004439
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e030      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d025      	beq.n	800447e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004436:	e022      	b.n	800447e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004440:	d11f      	bne.n	8004482 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004446:	e01c      	b.n	8004482 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d903      	bls.n	8004456 <DMA_CheckFifoParam+0xb6>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d003      	beq.n	800445c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004454:	e018      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
      break;
 800445a:	e015      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e00b      	b.n	8004486 <DMA_CheckFifoParam+0xe6>
      break;
 800446e:	bf00      	nop
 8004470:	e00a      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 8004472:	bf00      	nop
 8004474:	e008      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 8004476:	bf00      	nop
 8004478:	e006      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 800447a:	bf00      	nop
 800447c:	e004      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;   
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <DMA_CheckFifoParam+0xe8>
      break;
 8004486:	bf00      	nop
    }
  } 
  
  return status; 
 8004488:	7bfb      	ldrb	r3, [r7, #15]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e159      	b.n	8004768 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b4:	2201      	movs	r2, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	f040 8148 	bne.w	8004762 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d005      	beq.n	80044ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d130      	bne.n	800454c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	2203      	movs	r2, #3
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004520:	2201      	movs	r2, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 0201 	and.w	r2, r3, #1
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d017      	beq.n	8004588 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2203      	movs	r2, #3
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d123      	bne.n	80045dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	08da      	lsrs	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	220f      	movs	r2, #15
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2203      	movs	r2, #3
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0203 	and.w	r2, r3, #3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80a2 	beq.w	8004762 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b57      	ldr	r3, [pc, #348]	; (8004780 <HAL_GPIO_Init+0x2e8>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4a56      	ldr	r2, [pc, #344]	; (8004780 <HAL_GPIO_Init+0x2e8>)
 8004628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800462c:	6453      	str	r3, [r2, #68]	; 0x44
 800462e:	4b54      	ldr	r3, [pc, #336]	; (8004780 <HAL_GPIO_Init+0x2e8>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800463a:	4a52      	ldr	r2, [pc, #328]	; (8004784 <HAL_GPIO_Init+0x2ec>)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	3302      	adds	r3, #2
 8004642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a49      	ldr	r2, [pc, #292]	; (8004788 <HAL_GPIO_Init+0x2f0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d019      	beq.n	800469a <HAL_GPIO_Init+0x202>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a48      	ldr	r2, [pc, #288]	; (800478c <HAL_GPIO_Init+0x2f4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d013      	beq.n	8004696 <HAL_GPIO_Init+0x1fe>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a47      	ldr	r2, [pc, #284]	; (8004790 <HAL_GPIO_Init+0x2f8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00d      	beq.n	8004692 <HAL_GPIO_Init+0x1fa>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a46      	ldr	r2, [pc, #280]	; (8004794 <HAL_GPIO_Init+0x2fc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d007      	beq.n	800468e <HAL_GPIO_Init+0x1f6>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a45      	ldr	r2, [pc, #276]	; (8004798 <HAL_GPIO_Init+0x300>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d101      	bne.n	800468a <HAL_GPIO_Init+0x1f2>
 8004686:	2304      	movs	r3, #4
 8004688:	e008      	b.n	800469c <HAL_GPIO_Init+0x204>
 800468a:	2307      	movs	r3, #7
 800468c:	e006      	b.n	800469c <HAL_GPIO_Init+0x204>
 800468e:	2303      	movs	r3, #3
 8004690:	e004      	b.n	800469c <HAL_GPIO_Init+0x204>
 8004692:	2302      	movs	r3, #2
 8004694:	e002      	b.n	800469c <HAL_GPIO_Init+0x204>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_GPIO_Init+0x204>
 800469a:	2300      	movs	r3, #0
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	f002 0203 	and.w	r2, r2, #3
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	4093      	lsls	r3, r2
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ac:	4935      	ldr	r1, [pc, #212]	; (8004784 <HAL_GPIO_Init+0x2ec>)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	3302      	adds	r3, #2
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_GPIO_Init+0x304>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046de:	4a2f      	ldr	r2, [pc, #188]	; (800479c <HAL_GPIO_Init+0x304>)
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046e4:	4b2d      	ldr	r3, [pc, #180]	; (800479c <HAL_GPIO_Init+0x304>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004708:	4a24      	ldr	r2, [pc, #144]	; (800479c <HAL_GPIO_Init+0x304>)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800470e:	4b23      	ldr	r3, [pc, #140]	; (800479c <HAL_GPIO_Init+0x304>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004732:	4a1a      	ldr	r2, [pc, #104]	; (800479c <HAL_GPIO_Init+0x304>)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004738:	4b18      	ldr	r3, [pc, #96]	; (800479c <HAL_GPIO_Init+0x304>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800475c:	4a0f      	ldr	r2, [pc, #60]	; (800479c <HAL_GPIO_Init+0x304>)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3301      	adds	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b0f      	cmp	r3, #15
 800476c:	f67f aea2 	bls.w	80044b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800
 8004784:	40013800 	.word	0x40013800
 8004788:	40020000 	.word	0x40020000
 800478c:	40020400 	.word	0x40020400
 8004790:	40020800 	.word	0x40020800
 8004794:	40020c00 	.word	0x40020c00
 8004798:	40021000 	.word	0x40021000
 800479c:	40013c00 	.word	0x40013c00

080047a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	e001      	b.n	80047c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e0:	787b      	ldrb	r3, [r7, #1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047ec:	e003      	b.n	80047f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ee:	887b      	ldrh	r3, [r7, #2]
 80047f0:	041a      	lsls	r2, r3, #16
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	619a      	str	r2, [r3, #24]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e264      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d075      	beq.n	800490e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004822:	4ba3      	ldr	r3, [pc, #652]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b04      	cmp	r3, #4
 800482c:	d00c      	beq.n	8004848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482e:	4ba0      	ldr	r3, [pc, #640]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004836:	2b08      	cmp	r3, #8
 8004838:	d112      	bne.n	8004860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483a:	4b9d      	ldr	r3, [pc, #628]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004846:	d10b      	bne.n	8004860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	4b99      	ldr	r3, [pc, #612]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d05b      	beq.n	800490c <HAL_RCC_OscConfig+0x108>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d157      	bne.n	800490c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e23f      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d106      	bne.n	8004878 <HAL_RCC_OscConfig+0x74>
 800486a:	4b91      	ldr	r3, [pc, #580]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a90      	ldr	r2, [pc, #576]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e01d      	b.n	80048b4 <HAL_RCC_OscConfig+0xb0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0x98>
 8004882:	4b8b      	ldr	r3, [pc, #556]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a8a      	ldr	r2, [pc, #552]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a87      	ldr	r2, [pc, #540]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e00b      	b.n	80048b4 <HAL_RCC_OscConfig+0xb0>
 800489c:	4b84      	ldr	r3, [pc, #528]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a83      	ldr	r2, [pc, #524]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b81      	ldr	r3, [pc, #516]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a80      	ldr	r2, [pc, #512]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80048ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d013      	beq.n	80048e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fe fb76 	bl	8002fac <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fe fb72 	bl	8002fac <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e204      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b76      	ldr	r3, [pc, #472]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0xc0>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fe fb62 	bl	8002fac <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fe fb5e 	bl	8002fac <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e1f0      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fe:	4b6c      	ldr	r3, [pc, #432]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0xe8>
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491a:	4b65      	ldr	r3, [pc, #404]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004926:	4b62      	ldr	r3, [pc, #392]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800492e:	2b08      	cmp	r3, #8
 8004930:	d11c      	bne.n	800496c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004932:	4b5f      	ldr	r3, [pc, #380]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d116      	bne.n	800496c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493e:	4b5c      	ldr	r3, [pc, #368]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_RCC_OscConfig+0x152>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e1c4      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004956:	4b56      	ldr	r3, [pc, #344]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4952      	ldr	r1, [pc, #328]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496a:	e03a      	b.n	80049e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004974:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <HAL_RCC_OscConfig+0x2b0>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fe fb17 	bl	8002fac <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004982:	f7fe fb13 	bl	8002fac <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e1a5      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004994:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a0:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4940      	ldr	r1, [pc, #256]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]
 80049b4:	e015      	b.n	80049e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b6:	4b3f      	ldr	r3, [pc, #252]	; (8004ab4 <HAL_RCC_OscConfig+0x2b0>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fe faf6 	bl	8002fac <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c4:	f7fe faf2 	bl	8002fac <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e184      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d6:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d030      	beq.n	8004a50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f6:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <HAL_RCC_OscConfig+0x2b4>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7fe fad6 	bl	8002fac <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a04:	f7fe fad2 	bl	8002fac <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e164      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a16:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x200>
 8004a22:	e015      	b.n	8004a50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a24:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <HAL_RCC_OscConfig+0x2b4>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7fe fabf 	bl	8002fac <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a32:	f7fe fabb 	bl	8002fac <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e14d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a44:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a0 	beq.w	8004b9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10f      	bne.n	8004a8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a0e      	ldr	r2, [pc, #56]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_OscConfig+0x2b8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d121      	bne.n	8004ade <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <HAL_RCC_OscConfig+0x2b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a07      	ldr	r2, [pc, #28]	; (8004abc <HAL_RCC_OscConfig+0x2b8>)
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa6:	f7fe fa81 	bl	8002fac <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aac:	e011      	b.n	8004ad2 <HAL_RCC_OscConfig+0x2ce>
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	42470000 	.word	0x42470000
 8004ab8:	42470e80 	.word	0x42470e80
 8004abc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac0:	f7fe fa74 	bl	8002fac <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e106      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b85      	ldr	r3, [pc, #532]	; (8004ce8 <HAL_RCC_OscConfig+0x4e4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d106      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2f0>
 8004ae6:	4b81      	ldr	r3, [pc, #516]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	4a80      	ldr	r2, [pc, #512]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6713      	str	r3, [r2, #112]	; 0x70
 8004af2:	e01c      	b.n	8004b2e <HAL_RCC_OscConfig+0x32a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCC_OscConfig+0x312>
 8004afc:	4b7b      	ldr	r3, [pc, #492]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a7a      	ldr	r2, [pc, #488]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b02:	f043 0304 	orr.w	r3, r3, #4
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
 8004b08:	4b78      	ldr	r3, [pc, #480]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	4a77      	ldr	r2, [pc, #476]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6713      	str	r3, [r2, #112]	; 0x70
 8004b14:	e00b      	b.n	8004b2e <HAL_RCC_OscConfig+0x32a>
 8004b16:	4b75      	ldr	r3, [pc, #468]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1a:	4a74      	ldr	r2, [pc, #464]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6713      	str	r3, [r2, #112]	; 0x70
 8004b22:	4b72      	ldr	r3, [pc, #456]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	4a71      	ldr	r2, [pc, #452]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b28:	f023 0304 	bic.w	r3, r3, #4
 8004b2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d015      	beq.n	8004b62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fe fa39 	bl	8002fac <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3e:	f7fe fa35 	bl	8002fac <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e0c5      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b54:	4b65      	ldr	r3, [pc, #404]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0ee      	beq.n	8004b3e <HAL_RCC_OscConfig+0x33a>
 8004b60:	e014      	b.n	8004b8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fe fa23 	bl	8002fac <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fe fa1f 	bl	8002fac <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0af      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b80:	4b5a      	ldr	r3, [pc, #360]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ee      	bne.n	8004b6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	4a55      	ldr	r2, [pc, #340]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 809b 	beq.w	8004cde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ba8:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d05c      	beq.n	8004c6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d141      	bne.n	8004c40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b4c      	ldr	r3, [pc, #304]	; (8004cf0 <HAL_RCC_OscConfig+0x4ec>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fe f9f3 	bl	8002fac <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fe f9ef 	bl	8002fac <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e081      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bdc:	4b43      	ldr	r3, [pc, #268]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	019b      	lsls	r3, r3, #6
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	3b01      	subs	r3, #1
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	061b      	lsls	r3, r3, #24
 8004c0c:	4937      	ldr	r1, [pc, #220]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c12:	4b37      	ldr	r3, [pc, #220]	; (8004cf0 <HAL_RCC_OscConfig+0x4ec>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fe f9c8 	bl	8002fac <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fe f9c4 	bl	8002fac <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e056      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x41c>
 8004c3e:	e04e      	b.n	8004cde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_OscConfig+0x4ec>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c46:	f7fe f9b1 	bl	8002fac <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fe f9ad 	bl	8002fac <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e03f      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c60:	4b22      	ldr	r3, [pc, #136]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <HAL_RCC_OscConfig+0x44a>
 8004c6c:	e037      	b.n	8004cde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e032      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c7a:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <HAL_RCC_OscConfig+0x4e8>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d028      	beq.n	8004cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d121      	bne.n	8004cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d11a      	bne.n	8004cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004caa:	4013      	ands	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d111      	bne.n	8004cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	42470060 	.word	0x42470060

08004cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0cc      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d08:	4b68      	ldr	r3, [pc, #416]	; (8004eac <HAL_RCC_ClockConfig+0x1b8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d90c      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d16:	4b65      	ldr	r3, [pc, #404]	; (8004eac <HAL_RCC_ClockConfig+0x1b8>)
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	4b63      	ldr	r3, [pc, #396]	; (8004eac <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0b8      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d020      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d48:	4b59      	ldr	r3, [pc, #356]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4a58      	ldr	r2, [pc, #352]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d60:	4b53      	ldr	r3, [pc, #332]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a52      	ldr	r2, [pc, #328]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d6c:	4b50      	ldr	r3, [pc, #320]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	494d      	ldr	r1, [pc, #308]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d044      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d92:	4b47      	ldr	r3, [pc, #284]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d119      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e07f      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d003      	beq.n	8004db2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db2:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d109      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e06f      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc2:	4b3b      	ldr	r3, [pc, #236]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e067      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dd2:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f023 0203 	bic.w	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4934      	ldr	r1, [pc, #208]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004de4:	f7fe f8e2 	bl	8002fac <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dec:	f7fe f8de 	bl	8002fac <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e04f      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e02:	4b2b      	ldr	r3, [pc, #172]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 020c 	and.w	r2, r3, #12
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d1eb      	bne.n	8004dec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e14:	4b25      	ldr	r3, [pc, #148]	; (8004eac <HAL_RCC_ClockConfig+0x1b8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d20c      	bcs.n	8004e3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <HAL_RCC_ClockConfig+0x1b8>)
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b20      	ldr	r3, [pc, #128]	; (8004eac <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e032      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e48:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4916      	ldr	r1, [pc, #88]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e66:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	490e      	ldr	r1, [pc, #56]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e7a:	f000 f821 	bl	8004ec0 <HAL_RCC_GetSysClockFreq>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	490a      	ldr	r1, [pc, #40]	; (8004eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e8c:	5ccb      	ldrb	r3, [r1, r3]
 8004e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e92:	4a09      	ldr	r2, [pc, #36]	; (8004eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <HAL_RCC_ClockConfig+0x1c8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe f842 	bl	8002f24 <HAL_InitTick>

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40023c00 	.word	0x40023c00
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	08008a48 	.word	0x08008a48
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	20000010 	.word	0x20000010

08004ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ed8:	4b67      	ldr	r3, [pc, #412]	; (8005078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d00d      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0x40>
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	f200 80bd 	bhi.w	8005064 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d003      	beq.n	8004efa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ef2:	e0b7      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ef4:	4b61      	ldr	r3, [pc, #388]	; (800507c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ef6:	60bb      	str	r3, [r7, #8]
       break;
 8004ef8:	e0b7      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004efa:	4b61      	ldr	r3, [pc, #388]	; (8005080 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004efc:	60bb      	str	r3, [r7, #8]
      break;
 8004efe:	e0b4      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f00:	4b5d      	ldr	r3, [pc, #372]	; (8005078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0a:	4b5b      	ldr	r3, [pc, #364]	; (8005078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d04d      	beq.n	8004fb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f16:	4b58      	ldr	r3, [pc, #352]	; (8005078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	099b      	lsrs	r3, r3, #6
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f26:	f04f 0100 	mov.w	r1, #0
 8004f2a:	ea02 0800 	and.w	r8, r2, r0
 8004f2e:	ea03 0901 	and.w	r9, r3, r1
 8004f32:	4640      	mov	r0, r8
 8004f34:	4649      	mov	r1, r9
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	014b      	lsls	r3, r1, #5
 8004f40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f44:	0142      	lsls	r2, r0, #5
 8004f46:	4610      	mov	r0, r2
 8004f48:	4619      	mov	r1, r3
 8004f4a:	ebb0 0008 	subs.w	r0, r0, r8
 8004f4e:	eb61 0109 	sbc.w	r1, r1, r9
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	018b      	lsls	r3, r1, #6
 8004f5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f60:	0182      	lsls	r2, r0, #6
 8004f62:	1a12      	subs	r2, r2, r0
 8004f64:	eb63 0301 	sbc.w	r3, r3, r1
 8004f68:	f04f 0000 	mov.w	r0, #0
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	00d9      	lsls	r1, r3, #3
 8004f72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f76:	00d0      	lsls	r0, r2, #3
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	eb12 0208 	adds.w	r2, r2, r8
 8004f80:	eb43 0309 	adc.w	r3, r3, r9
 8004f84:	f04f 0000 	mov.w	r0, #0
 8004f88:	f04f 0100 	mov.w	r1, #0
 8004f8c:	0259      	lsls	r1, r3, #9
 8004f8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f92:	0250      	lsls	r0, r2, #9
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	f7fb fd7a 	bl	8000a9c <__aeabi_uldivmod>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4613      	mov	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e04a      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb2:	4b31      	ldr	r3, [pc, #196]	; (8005078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	099b      	lsrs	r3, r3, #6
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fc2:	f04f 0100 	mov.w	r1, #0
 8004fc6:	ea02 0400 	and.w	r4, r2, r0
 8004fca:	ea03 0501 	and.w	r5, r3, r1
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	014b      	lsls	r3, r1, #5
 8004fdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fe0:	0142      	lsls	r2, r0, #5
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	1b00      	subs	r0, r0, r4
 8004fe8:	eb61 0105 	sbc.w	r1, r1, r5
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	018b      	lsls	r3, r1, #6
 8004ff6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ffa:	0182      	lsls	r2, r0, #6
 8004ffc:	1a12      	subs	r2, r2, r0
 8004ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	00d9      	lsls	r1, r3, #3
 800500c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005010:	00d0      	lsls	r0, r2, #3
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	1912      	adds	r2, r2, r4
 8005018:	eb45 0303 	adc.w	r3, r5, r3
 800501c:	f04f 0000 	mov.w	r0, #0
 8005020:	f04f 0100 	mov.w	r1, #0
 8005024:	0299      	lsls	r1, r3, #10
 8005026:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800502a:	0290      	lsls	r0, r2, #10
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4610      	mov	r0, r2
 8005032:	4619      	mov	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	461a      	mov	r2, r3
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	f7fb fd2e 	bl	8000a9c <__aeabi_uldivmod>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4613      	mov	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	3301      	adds	r3, #1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	60bb      	str	r3, [r7, #8]
      break;
 8005062:	e002      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005066:	60bb      	str	r3, [r7, #8]
      break;
 8005068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506a:	68bb      	ldr	r3, [r7, #8]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	00f42400 	.word	0x00f42400
 8005080:	007a1200 	.word	0x007a1200

08005084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005088:	4b03      	ldr	r3, [pc, #12]	; (8005098 <HAL_RCC_GetHCLKFreq+0x14>)
 800508a:	681b      	ldr	r3, [r3, #0]
}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	2000000c 	.word	0x2000000c

0800509c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050a0:	f7ff fff0 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	0a9b      	lsrs	r3, r3, #10
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4903      	ldr	r1, [pc, #12]	; (80050c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40023800 	.word	0x40023800
 80050c0:	08008a58 	.word	0x08008a58

080050c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050c8:	f7ff ffdc 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0b5b      	lsrs	r3, r3, #13
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4903      	ldr	r1, [pc, #12]	; (80050e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40023800 	.word	0x40023800
 80050e8:	08008a58 	.word	0x08008a58

080050ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07b      	b.n	80051f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d108      	bne.n	8005118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510e:	d009      	beq.n	8005124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	61da      	str	r2, [r3, #28]
 8005116:	e005      	b.n	8005124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd fd22 	bl	8002b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	ea42 0103 	orr.w	r1, r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	f003 0104 	and.w	r1, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	f003 0210 	and.w	r2, r3, #16
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_SPI_Transmit_IT+0x20>
 800521c:	2302      	movs	r3, #2
 800521e:	e06f      	b.n	8005300 <HAL_SPI_Transmit_IT+0x100>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_SPI_Transmit_IT+0x34>
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005238:	e05d      	b.n	80052f6 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d002      	beq.n	800524c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	75fb      	strb	r3, [r7, #23]
    goto error;
 800524a:	e054      	b.n	80052f6 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2203      	movs	r2, #3
 8005250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	88fa      	ldrh	r2, [r7, #6]
 800526a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a1f      	ldr	r2, [pc, #124]	; (800530c <HAL_SPI_Transmit_IT+0x10c>)
 8005290:	645a      	str	r2, [r3, #68]	; 0x44
 8005292:	e002      	b.n	800529a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4a1e      	ldr	r2, [pc, #120]	; (8005310 <HAL_SPI_Transmit_IT+0x110>)
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a2:	d10f      	bne.n	80052c4 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80052d2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d008      	beq.n	80052f4 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e000      	b.n	80052f6 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80052f4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005300:	4618      	mov	r0, r3
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	08005597 	.word	0x08005597
 8005310:	08005551 	.word	0x08005551

08005314 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	099b      	lsrs	r3, r3, #6
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10f      	bne.n	8005358 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	099b      	lsrs	r3, r3, #6
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	4798      	blx	r3
    return;
 8005356:	e0d7      	b.n	8005508 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_SPI_IRQHandler+0x66>
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	09db      	lsrs	r3, r3, #7
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d004      	beq.n	800537a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
    return;
 8005378:	e0c6      	b.n	8005508 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10c      	bne.n	80053a0 <HAL_SPI_IRQHandler+0x8c>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	099b      	lsrs	r3, r3, #6
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	0a1b      	lsrs	r3, r3, #8
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80b4 	beq.w	8005508 <HAL_SPI_IRQHandler+0x1f4>
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80ad 	beq.w	8005508 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	099b      	lsrs	r3, r3, #6
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d023      	beq.n	8005402 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d011      	beq.n	80053ea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f043 0204 	orr.w	r2, r3, #4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	e00b      	b.n	8005402 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	693b      	ldr	r3, [r7, #16]
        return;
 8005400:	e082      	b.n	8005508 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d014      	beq.n	8005438 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f043 0208 	orr.w	r2, r3, #8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005450:	2300      	movs	r3, #0
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	2b00      	cmp	r3, #0
 8005464:	d04f      	beq.n	8005506 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005474:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <HAL_SPI_IRQHandler+0x17e>
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d034      	beq.n	80054fc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0203 	bic.w	r2, r2, #3
 80054a0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d011      	beq.n	80054ce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <HAL_SPI_IRQHandler+0x1fc>)
 80054b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe fd62 	bl	8003f80 <HAL_DMA_Abort_IT>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054da:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <HAL_SPI_IRQHandler+0x1fc>)
 80054dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fe fd4c 	bl	8003f80 <HAL_DMA_Abort_IT>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80054fa:	e003      	b.n	8005504 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f809 	bl	8005514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005502:	e000      	b.n	8005506 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005504:	bf00      	nop
    return;
 8005506:	bf00      	nop
  }
}
 8005508:	3720      	adds	r7, #32
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	08005529 	.word	0x08005529

08005514 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f7ff ffe6 	bl	8005514 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f8f1 	bl	8005770 <SPI_CloseTx_ISR>
  }
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	881a      	ldrh	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f8cf 	bl	8005770 <SPI_CloseTx_ISR>
  }
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055ec:	f7fd fcde 	bl	8002fac <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	4413      	add	r3, r2
 80055fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055fc:	f7fd fcd6 	bl	8002fac <HAL_GetTick>
 8005600:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005602:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	015b      	lsls	r3, r3, #5
 8005608:	0d1b      	lsrs	r3, r3, #20
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	fb02 f303 	mul.w	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005612:	e054      	b.n	80056be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d050      	beq.n	80056be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800561c:	f7fd fcc6 	bl	8002fac <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	429a      	cmp	r2, r3
 800562a:	d902      	bls.n	8005632 <SPI_WaitFlagStateUntilTimeout+0x56>
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d13d      	bne.n	80056ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005640:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800564a:	d111      	bne.n	8005670 <SPI_WaitFlagStateUntilTimeout+0x94>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005654:	d004      	beq.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565e:	d107      	bne.n	8005670 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800566e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005678:	d10f      	bne.n	800569a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005698:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e017      	b.n	80056de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	bf0c      	ite	eq
 80056ce:	2301      	moveq	r3, #1
 80056d0:	2300      	movne	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d19b      	bne.n	8005614 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	2000000c 	.word	0x2000000c

080056ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056f8:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <SPI_EndRxTxTransaction+0x7c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1b      	ldr	r2, [pc, #108]	; (800576c <SPI_EndRxTxTransaction+0x80>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	0d5b      	lsrs	r3, r3, #21
 8005704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005708:	fb02 f303 	mul.w	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005716:	d112      	bne.n	800573e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	2180      	movs	r1, #128	; 0x80
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff ff5a 	bl	80055dc <SPI_WaitFlagStateUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d016      	beq.n	800575c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e00f      	b.n	800575e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	3b01      	subs	r3, #1
 8005748:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005754:	2b80      	cmp	r3, #128	; 0x80
 8005756:	d0f2      	beq.n	800573e <SPI_EndRxTxTransaction+0x52>
 8005758:	e000      	b.n	800575c <SPI_EndRxTxTransaction+0x70>
        break;
 800575a:	bf00      	nop
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	2000000c 	.word	0x2000000c
 800576c:	165e9f81 	.word	0x165e9f81

08005770 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005778:	4b2c      	ldr	r3, [pc, #176]	; (800582c <SPI_CloseTx_ISR+0xbc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2c      	ldr	r2, [pc, #176]	; (8005830 <SPI_CloseTx_ISR+0xc0>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	0a5b      	lsrs	r3, r3, #9
 8005784:	2264      	movs	r2, #100	; 0x64
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800578c:	f7fd fc0e 	bl	8002fac <HAL_GetTick>
 8005790:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057a4:	e009      	b.n	80057ba <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0eb      	beq.n	8005792 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057c8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	2164      	movs	r1, #100	; 0x64
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff ff8c 	bl	80056ec <SPI_EndRxTxTransaction>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057de:	f043 0220 	orr.w	r2, r3, #32
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff fe7d 	bl	8005514 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800581a:	e002      	b.n	8005822 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7fd f8b7 	bl	8002990 <HAL_SPI_TxCpltCallback>
}
 8005822:	bf00      	nop
 8005824:	3718      	adds	r7, #24
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	2000000c 	.word	0x2000000c
 8005830:	057619f1 	.word	0x057619f1

08005834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e041      	b.n	80058ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fd f9e4 	bl	8002c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2202      	movs	r2, #2
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f000 fade 	bl	8005e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
	...

080058d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d001      	beq.n	80058ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e03c      	b.n	8005966 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_TIM_Base_Start+0xa0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d018      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005906:	d013      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1a      	ldr	r2, [pc, #104]	; (8005978 <HAL_TIM_Base_Start+0xa4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00e      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a19      	ldr	r2, [pc, #100]	; (800597c <HAL_TIM_Base_Start+0xa8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d009      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <HAL_TIM_Base_Start+0xac>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_TIM_Base_Start+0x5c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a16      	ldr	r2, [pc, #88]	; (8005984 <HAL_TIM_Base_Start+0xb0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d111      	bne.n	8005954 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b06      	cmp	r3, #6
 8005940:	d010      	beq.n	8005964 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0201 	orr.w	r2, r2, #1
 8005950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005952:	e007      	b.n	8005964 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40014000 	.word	0x40014000

08005988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	d001      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e044      	b.n	8005a2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1e      	ldr	r2, [pc, #120]	; (8005a38 <HAL_TIM_Base_Start_IT+0xb0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d018      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x6c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ca:	d013      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x6c>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1a      	ldr	r2, [pc, #104]	; (8005a3c <HAL_TIM_Base_Start_IT+0xb4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00e      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x6c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <HAL_TIM_Base_Start_IT+0xb8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d009      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x6c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <HAL_TIM_Base_Start_IT+0xbc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x6c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <HAL_TIM_Base_Start_IT+0xc0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d111      	bne.n	8005a18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d010      	beq.n	8005a28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0201 	orr.w	r2, r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	e007      	b.n	8005a28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40014000 	.word	0x40014000

08005a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d122      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d11b      	bne.n	8005aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0202 	mvn.w	r2, #2
 8005a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9b2 	bl	8005df8 <HAL_TIM_IC_CaptureCallback>
 8005a94:	e005      	b.n	8005aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f9a4 	bl	8005de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f9b5 	bl	8005e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d122      	bne.n	8005afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d11b      	bne.n	8005afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f06f 0204 	mvn.w	r2, #4
 8005acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f988 	bl	8005df8 <HAL_TIM_IC_CaptureCallback>
 8005ae8:	e005      	b.n	8005af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f97a 	bl	8005de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f98b 	bl	8005e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d122      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d11b      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0208 	mvn.w	r2, #8
 8005b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2204      	movs	r2, #4
 8005b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f95e 	bl	8005df8 <HAL_TIM_IC_CaptureCallback>
 8005b3c:	e005      	b.n	8005b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f950 	bl	8005de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f961 	bl	8005e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d122      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0210 	mvn.w	r2, #16
 8005b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2208      	movs	r2, #8
 8005b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f934 	bl	8005df8 <HAL_TIM_IC_CaptureCallback>
 8005b90:	e005      	b.n	8005b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f926 	bl	8005de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f937 	bl	8005e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0201 	mvn.w	r2, #1
 8005bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fc fef6 	bl	80029bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d10e      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be8:	2b80      	cmp	r3, #128	; 0x80
 8005bea:	d107      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 faae 	bl	8006158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b40      	cmp	r3, #64	; 0x40
 8005c08:	d10e      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b40      	cmp	r3, #64	; 0x40
 8005c16:	d107      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f8fc 	bl	8005e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d10e      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	d107      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0220 	mvn.w	r2, #32
 8005c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fa78 	bl	8006144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_TIM_ConfigClockSource+0x18>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e0b3      	b.n	8005ddc <HAL_TIM_ConfigClockSource+0x180>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cac:	d03e      	beq.n	8005d2c <HAL_TIM_ConfigClockSource+0xd0>
 8005cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb2:	f200 8087 	bhi.w	8005dc4 <HAL_TIM_ConfigClockSource+0x168>
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cba:	f000 8085 	beq.w	8005dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	d87f      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x168>
 8005cc4:	2b70      	cmp	r3, #112	; 0x70
 8005cc6:	d01a      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0xa2>
 8005cc8:	2b70      	cmp	r3, #112	; 0x70
 8005cca:	d87b      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x168>
 8005ccc:	2b60      	cmp	r3, #96	; 0x60
 8005cce:	d050      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x116>
 8005cd0:	2b60      	cmp	r3, #96	; 0x60
 8005cd2:	d877      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x168>
 8005cd4:	2b50      	cmp	r3, #80	; 0x50
 8005cd6:	d03c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0xf6>
 8005cd8:	2b50      	cmp	r3, #80	; 0x50
 8005cda:	d873      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x168>
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d058      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x136>
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	d86f      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x168>
 8005ce4:	2b30      	cmp	r3, #48	; 0x30
 8005ce6:	d064      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x156>
 8005ce8:	2b30      	cmp	r3, #48	; 0x30
 8005cea:	d86b      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x168>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d060      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x156>
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d867      	bhi.n	8005dc4 <HAL_TIM_ConfigClockSource+0x168>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d05c      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x156>
 8005cf8:	2b10      	cmp	r3, #16
 8005cfa:	d05a      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005cfc:	e062      	b.n	8005dc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f000 f98b 	bl	8006028 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	609a      	str	r2, [r3, #8]
      break;
 8005d2a:	e04e      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	6899      	ldr	r1, [r3, #8]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f000 f974 	bl	8006028 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d4e:	609a      	str	r2, [r3, #8]
      break;
 8005d50:	e03b      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 f8e8 	bl	8005f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2150      	movs	r1, #80	; 0x50
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 f941 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e02b      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f000 f907 	bl	8005f92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2160      	movs	r1, #96	; 0x60
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 f931 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 8005d90:	e01b      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f000 f8c8 	bl	8005f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2140      	movs	r1, #64	; 0x40
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f921 	bl	8005ff2 <TIM_ITRx_SetConfig>
      break;
 8005db0:	e00b      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f000 f918 	bl	8005ff2 <TIM_ITRx_SetConfig>
        break;
 8005dc2:	e002      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005dc4:	bf00      	nop
 8005dc6:	e000      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005dc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a34      	ldr	r2, [pc, #208]	; (8005f18 <TIM_Base_SetConfig+0xe4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00f      	beq.n	8005e6c <TIM_Base_SetConfig+0x38>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e52:	d00b      	beq.n	8005e6c <TIM_Base_SetConfig+0x38>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a31      	ldr	r2, [pc, #196]	; (8005f1c <TIM_Base_SetConfig+0xe8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d007      	beq.n	8005e6c <TIM_Base_SetConfig+0x38>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a30      	ldr	r2, [pc, #192]	; (8005f20 <TIM_Base_SetConfig+0xec>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_Base_SetConfig+0x38>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a2f      	ldr	r2, [pc, #188]	; (8005f24 <TIM_Base_SetConfig+0xf0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d108      	bne.n	8005e7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a25      	ldr	r2, [pc, #148]	; (8005f18 <TIM_Base_SetConfig+0xe4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d01b      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8c:	d017      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a22      	ldr	r2, [pc, #136]	; (8005f1c <TIM_Base_SetConfig+0xe8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d013      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a21      	ldr	r2, [pc, #132]	; (8005f20 <TIM_Base_SetConfig+0xec>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00f      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <TIM_Base_SetConfig+0xf0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00b      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <TIM_Base_SetConfig+0xf4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d007      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <TIM_Base_SetConfig+0xf8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_Base_SetConfig+0x8a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <TIM_Base_SetConfig+0xfc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d108      	bne.n	8005ed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a08      	ldr	r2, [pc, #32]	; (8005f18 <TIM_Base_SetConfig+0xe4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d103      	bne.n	8005f04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	615a      	str	r2, [r3, #20]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800

08005f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	f023 0201 	bic.w	r2, r3, #1
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f023 030a 	bic.w	r3, r3, #10
 8005f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b087      	sub	sp, #28
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f023 0210 	bic.w	r2, r3, #16
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	031b      	lsls	r3, r3, #12
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	621a      	str	r2, [r3, #32]
}
 8005fe6:	bf00      	nop
 8005fe8:	371c      	adds	r7, #28
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	f043 0307 	orr.w	r3, r3, #7
 8006014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	431a      	orrs	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4313      	orrs	r3, r2
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	609a      	str	r2, [r3, #8]
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800607c:	2302      	movs	r3, #2
 800607e:	e050      	b.n	8006122 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1c      	ldr	r2, [pc, #112]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d018      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060cc:	d013      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00e      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a16      	ldr	r2, [pc, #88]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d009      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a15      	ldr	r2, [pc, #84]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d004      	beq.n	80060f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a13      	ldr	r2, [pc, #76]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d10c      	bne.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	4313      	orrs	r3, r2
 8006106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40010000 	.word	0x40010000
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	40000c00 	.word	0x40000c00
 8006140:	40014000 	.word	0x40014000

08006144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e03f      	b.n	80061fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fc fd86 	bl	8002ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2224      	movs	r2, #36	; 0x24
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fc85 	bl	8006ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695a      	ldr	r2, [r3, #20]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b08a      	sub	sp, #40	; 0x28
 800620a:	af02      	add	r7, sp, #8
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b20      	cmp	r3, #32
 8006224:	d17c      	bne.n	8006320 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_UART_Transmit+0x2c>
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e075      	b.n	8006322 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_UART_Transmit+0x3e>
 8006240:	2302      	movs	r3, #2
 8006242:	e06e      	b.n	8006322 <HAL_UART_Transmit+0x11c>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2221      	movs	r2, #33	; 0x21
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800625a:	f7fc fea7 	bl	8002fac <HAL_GetTick>
 800625e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	88fa      	ldrh	r2, [r7, #6]
 800626a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006274:	d108      	bne.n	8006288 <HAL_UART_Transmit+0x82>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d104      	bne.n	8006288 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	e003      	b.n	8006290 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800628c:	2300      	movs	r3, #0
 800628e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006298:	e02a      	b.n	80062f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2200      	movs	r2, #0
 80062a2:	2180      	movs	r1, #128	; 0x80
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fa47 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e036      	b.n	8006322 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	3302      	adds	r3, #2
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	e007      	b.n	80062e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	781a      	ldrb	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	3301      	adds	r3, #1
 80062e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1cf      	bne.n	800629a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2200      	movs	r2, #0
 8006302:	2140      	movs	r1, #64	; 0x40
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 fa17 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e006      	b.n	8006322 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e000      	b.n	8006322 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006320:	2302      	movs	r3, #2
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3720      	adds	r7, #32
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	4613      	mov	r3, r2
 8006336:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b20      	cmp	r3, #32
 8006342:	d11d      	bne.n	8006380 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_UART_Receive_IT+0x26>
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e016      	b.n	8006382 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_UART_Receive_IT+0x38>
 800635e:	2302      	movs	r3, #2
 8006360:	e00f      	b.n	8006382 <HAL_UART_Receive_IT+0x58>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006370:	88fb      	ldrh	r3, [r7, #6]
 8006372:	461a      	mov	r2, r3
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fa28 	bl	80067cc <UART_Start_Receive_IT>
 800637c:	4603      	mov	r3, r0
 800637e:	e000      	b.n	8006382 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006380:	2302      	movs	r3, #2
  }
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10d      	bne.n	80063de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_UART_IRQHandler+0x52>
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fadb 	bl	8006992 <UART_Receive_IT>
      return;
 80063dc:	e17c      	b.n	80066d8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80b1 	beq.w	8006548 <HAL_UART_IRQHandler+0x1bc>
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d105      	bne.n	80063fc <HAL_UART_IRQHandler+0x70>
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 80a6 	beq.w	8006548 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_UART_IRQHandler+0x90>
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	f043 0201 	orr.w	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <HAL_UART_IRQHandler+0xb0>
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	f043 0202 	orr.w	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_UART_IRQHandler+0xd0>
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006454:	f043 0204 	orr.w	r2, r3, #4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	f003 0308 	and.w	r3, r3, #8
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00f      	beq.n	8006486 <HAL_UART_IRQHandler+0xfa>
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_UART_IRQHandler+0xee>
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	f043 0208 	orr.w	r2, r3, #8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 811f 	beq.w	80066ce <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_UART_IRQHandler+0x11e>
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	f003 0320 	and.w	r3, r3, #32
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fa74 	bl	8006992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	bf0c      	ite	eq
 80064b8:	2301      	moveq	r3, #1
 80064ba:	2300      	movne	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <HAL_UART_IRQHandler+0x146>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d031      	beq.n	8006536 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f9b4 	bl	8006840 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d123      	bne.n	800652e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d013      	beq.n	8006526 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	4a77      	ldr	r2, [pc, #476]	; (80066e0 <HAL_UART_IRQHandler+0x354>)
 8006504:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	4618      	mov	r0, r3
 800650c:	f7fd fd38 	bl	8003f80 <HAL_DMA_Abort_IT>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006520:	4610      	mov	r0, r2
 8006522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e00e      	b.n	8006544 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8f0 	bl	800670c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e00a      	b.n	8006544 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f8ec 	bl	800670c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	e006      	b.n	8006544 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f8e8 	bl	800670c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006542:	e0c4      	b.n	80066ce <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006544:	bf00      	nop
    return;
 8006546:	e0c2      	b.n	80066ce <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 80a2 	bne.w	8006696 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 809c 	beq.w	8006696 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8096 	beq.w	8006696 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d14f      	bne.n	800662e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006598:	8a3b      	ldrh	r3, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8099 	beq.w	80066d2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065a4:	8a3a      	ldrh	r2, [r7, #16]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f080 8093 	bcs.w	80066d2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8a3a      	ldrh	r2, [r7, #16]
 80065b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065bc:	d02b      	beq.n	8006616 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065cc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695a      	ldr	r2, [r3, #20]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0201 	bic.w	r2, r2, #1
 80065dc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695a      	ldr	r2, [r3, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ec:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0210 	bic.w	r2, r2, #16
 800660a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	4618      	mov	r0, r3
 8006612:	f7fd fc45 	bl	8003ea0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800661e:	b29b      	uxth	r3, r3
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	b29b      	uxth	r3, r3
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f87a 	bl	8006720 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800662c:	e051      	b.n	80066d2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006636:	b29b      	uxth	r3, r3
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d047      	beq.n	80066d6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006646:	8a7b      	ldrh	r3, [r7, #18]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d044      	beq.n	80066d6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800665a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695a      	ldr	r2, [r3, #20]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0210 	bic.w	r2, r2, #16
 8006688:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800668a:	8a7b      	ldrh	r3, [r7, #18]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f846 	bl	8006720 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006694:	e01f      	b.n	80066d6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <HAL_UART_IRQHandler+0x326>
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f909 	bl	80068c2 <UART_Transmit_IT>
    return;
 80066b0:	e012      	b.n	80066d8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00d      	beq.n	80066d8 <HAL_UART_IRQHandler+0x34c>
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f94b 	bl	8006962 <UART_EndTransmit_IT>
    return;
 80066cc:	e004      	b.n	80066d8 <HAL_UART_IRQHandler+0x34c>
    return;
 80066ce:	bf00      	nop
 80066d0:	e002      	b.n	80066d8 <HAL_UART_IRQHandler+0x34c>
      return;
 80066d2:	bf00      	nop
 80066d4:	e000      	b.n	80066d8 <HAL_UART_IRQHandler+0x34c>
      return;
 80066d6:	bf00      	nop
  }
}
 80066d8:	3728      	adds	r7, #40	; 0x28
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	0800689b 	.word	0x0800689b

080066e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006748:	e02c      	b.n	80067a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d028      	beq.n	80067a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <UART_WaitOnFlagUntilTimeout+0x30>
 8006758:	f7fc fc28 	bl	8002fac <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	429a      	cmp	r2, r3
 8006766:	d21d      	bcs.n	80067a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006776:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695a      	ldr	r2, [r3, #20]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e00f      	b.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4013      	ands	r3, r2
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d0c3      	beq.n	800674a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	88fa      	ldrh	r2, [r7, #6]
 80067e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	88fa      	ldrh	r2, [r7, #6]
 80067ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2222      	movs	r2, #34	; 0x22
 80067f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006810:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	695a      	ldr	r2, [r3, #20]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 0220 	orr.w	r2, r2, #32
 8006830:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006856:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695a      	ldr	r2, [r3, #20]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	2b01      	cmp	r3, #1
 800686e:	d107      	bne.n	8006880 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0210 	bic.w	r2, r2, #16
 800687e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f7ff ff29 	bl	800670c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b21      	cmp	r3, #33	; 0x21
 80068d4:	d13e      	bne.n	8006954 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	d114      	bne.n	800690a <UART_Transmit_IT+0x48>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d110      	bne.n	800690a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	1c9a      	adds	r2, r3, #2
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]
 8006908:	e008      	b.n	800691c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	1c59      	adds	r1, r3, #1
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6211      	str	r1, [r2, #32]
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29b      	uxth	r3, r3
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	4619      	mov	r1, r3
 800692a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10f      	bne.n	8006950 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800693e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800694e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	e000      	b.n	8006956 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006954:	2302      	movs	r3, #2
  }
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff feae 	bl	80066e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b22      	cmp	r3, #34	; 0x22
 80069a4:	f040 8087 	bne.w	8006ab6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b0:	d117      	bne.n	80069e2 <UART_Receive_IT+0x50>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d113      	bne.n	80069e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	1c9a      	adds	r2, r3, #2
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
 80069e0:	e026      	b.n	8006a30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f4:	d007      	beq.n	8006a06 <UART_Receive_IT+0x74>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <UART_Receive_IT+0x82>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d106      	bne.n	8006a14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	e008      	b.n	8006a26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d136      	bne.n	8006ab2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0220 	bic.w	r2, r2, #32
 8006a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d10e      	bne.n	8006aa2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0210 	bic.w	r2, r2, #16
 8006a92:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff fe40 	bl	8006720 <HAL_UARTEx_RxEventCallback>
 8006aa0:	e002      	b.n	8006aa8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fe28 	bl	80066f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e002      	b.n	8006ab8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e000      	b.n	8006ab8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006ab6:	2302      	movs	r3, #2
  }
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	b09f      	sub	sp, #124	; 0x7c
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad6:	68d9      	ldr	r1, [r3, #12]
 8006ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	ea40 0301 	orr.w	r3, r0, r1
 8006ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b04:	f021 010c 	bic.w	r1, r1, #12
 8006b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	6999      	ldr	r1, [r3, #24]
 8006b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	ea40 0301 	orr.w	r3, r0, r1
 8006b28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4bc5      	ldr	r3, [pc, #788]	; (8006e44 <UART_SetConfig+0x384>)
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d004      	beq.n	8006b3e <UART_SetConfig+0x7e>
 8006b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	4bc3      	ldr	r3, [pc, #780]	; (8006e48 <UART_SetConfig+0x388>)
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d103      	bne.n	8006b46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b3e:	f7fe fac1 	bl	80050c4 <HAL_RCC_GetPCLK2Freq>
 8006b42:	6778      	str	r0, [r7, #116]	; 0x74
 8006b44:	e002      	b.n	8006b4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b46:	f7fe faa9 	bl	800509c <HAL_RCC_GetPCLK1Freq>
 8006b4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b54:	f040 80b6 	bne.w	8006cc4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b5a:	461c      	mov	r4, r3
 8006b5c:	f04f 0500 	mov.w	r5, #0
 8006b60:	4622      	mov	r2, r4
 8006b62:	462b      	mov	r3, r5
 8006b64:	1891      	adds	r1, r2, r2
 8006b66:	6439      	str	r1, [r7, #64]	; 0x40
 8006b68:	415b      	adcs	r3, r3
 8006b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b70:	1912      	adds	r2, r2, r4
 8006b72:	eb45 0303 	adc.w	r3, r5, r3
 8006b76:	f04f 0000 	mov.w	r0, #0
 8006b7a:	f04f 0100 	mov.w	r1, #0
 8006b7e:	00d9      	lsls	r1, r3, #3
 8006b80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b84:	00d0      	lsls	r0, r2, #3
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	1911      	adds	r1, r2, r4
 8006b8c:	6639      	str	r1, [r7, #96]	; 0x60
 8006b8e:	416b      	adcs	r3, r5
 8006b90:	667b      	str	r3, [r7, #100]	; 0x64
 8006b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	461a      	mov	r2, r3
 8006b98:	f04f 0300 	mov.w	r3, #0
 8006b9c:	1891      	adds	r1, r2, r2
 8006b9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ba0:	415b      	adcs	r3, r3
 8006ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ba8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006bac:	f7f9 ff76 	bl	8000a9c <__aeabi_uldivmod>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4ba5      	ldr	r3, [pc, #660]	; (8006e4c <UART_SetConfig+0x38c>)
 8006bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	011e      	lsls	r6, r3, #4
 8006bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc0:	461c      	mov	r4, r3
 8006bc2:	f04f 0500 	mov.w	r5, #0
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	462b      	mov	r3, r5
 8006bca:	1891      	adds	r1, r2, r2
 8006bcc:	6339      	str	r1, [r7, #48]	; 0x30
 8006bce:	415b      	adcs	r3, r3
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bd6:	1912      	adds	r2, r2, r4
 8006bd8:	eb45 0303 	adc.w	r3, r5, r3
 8006bdc:	f04f 0000 	mov.w	r0, #0
 8006be0:	f04f 0100 	mov.w	r1, #0
 8006be4:	00d9      	lsls	r1, r3, #3
 8006be6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bea:	00d0      	lsls	r0, r2, #3
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	1911      	adds	r1, r2, r4
 8006bf2:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bf4:	416b      	adcs	r3, r5
 8006bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	1891      	adds	r1, r2, r2
 8006c04:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c06:	415b      	adcs	r3, r3
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c12:	f7f9 ff43 	bl	8000a9c <__aeabi_uldivmod>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4b8c      	ldr	r3, [pc, #560]	; (8006e4c <UART_SetConfig+0x38c>)
 8006c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	2164      	movs	r1, #100	; 0x64
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	3332      	adds	r3, #50	; 0x32
 8006c2e:	4a87      	ldr	r2, [pc, #540]	; (8006e4c <UART_SetConfig+0x38c>)
 8006c30:	fba2 2303 	umull	r2, r3, r2, r3
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c3c:	441e      	add	r6, r3
 8006c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c40:	4618      	mov	r0, r3
 8006c42:	f04f 0100 	mov.w	r1, #0
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	1894      	adds	r4, r2, r2
 8006c4c:	623c      	str	r4, [r7, #32]
 8006c4e:	415b      	adcs	r3, r3
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
 8006c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c56:	1812      	adds	r2, r2, r0
 8006c58:	eb41 0303 	adc.w	r3, r1, r3
 8006c5c:	f04f 0400 	mov.w	r4, #0
 8006c60:	f04f 0500 	mov.w	r5, #0
 8006c64:	00dd      	lsls	r5, r3, #3
 8006c66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c6a:	00d4      	lsls	r4, r2, #3
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	462b      	mov	r3, r5
 8006c70:	1814      	adds	r4, r2, r0
 8006c72:	653c      	str	r4, [r7, #80]	; 0x50
 8006c74:	414b      	adcs	r3, r1
 8006c76:	657b      	str	r3, [r7, #84]	; 0x54
 8006c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f04f 0300 	mov.w	r3, #0
 8006c82:	1891      	adds	r1, r2, r2
 8006c84:	61b9      	str	r1, [r7, #24]
 8006c86:	415b      	adcs	r3, r3
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c92:	f7f9 ff03 	bl	8000a9c <__aeabi_uldivmod>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4b6c      	ldr	r3, [pc, #432]	; (8006e4c <UART_SetConfig+0x38c>)
 8006c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	2164      	movs	r1, #100	; 0x64
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	3332      	adds	r3, #50	; 0x32
 8006cae:	4a67      	ldr	r2, [pc, #412]	; (8006e4c <UART_SetConfig+0x38c>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f003 0207 	and.w	r2, r3, #7
 8006cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4432      	add	r2, r6
 8006cc0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cc2:	e0b9      	b.n	8006e38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cc6:	461c      	mov	r4, r3
 8006cc8:	f04f 0500 	mov.w	r5, #0
 8006ccc:	4622      	mov	r2, r4
 8006cce:	462b      	mov	r3, r5
 8006cd0:	1891      	adds	r1, r2, r2
 8006cd2:	6139      	str	r1, [r7, #16]
 8006cd4:	415b      	adcs	r3, r3
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cdc:	1912      	adds	r2, r2, r4
 8006cde:	eb45 0303 	adc.w	r3, r5, r3
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	00d9      	lsls	r1, r3, #3
 8006cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cf0:	00d0      	lsls	r0, r2, #3
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	eb12 0804 	adds.w	r8, r2, r4
 8006cfa:	eb43 0905 	adc.w	r9, r3, r5
 8006cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f04f 0100 	mov.w	r1, #0
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	008b      	lsls	r3, r1, #2
 8006d12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d16:	0082      	lsls	r2, r0, #2
 8006d18:	4640      	mov	r0, r8
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	f7f9 febe 	bl	8000a9c <__aeabi_uldivmod>
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	4b49      	ldr	r3, [pc, #292]	; (8006e4c <UART_SetConfig+0x38c>)
 8006d26:	fba3 2302 	umull	r2, r3, r3, r2
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	011e      	lsls	r6, r3, #4
 8006d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d30:	4618      	mov	r0, r3
 8006d32:	f04f 0100 	mov.w	r1, #0
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	1894      	adds	r4, r2, r2
 8006d3c:	60bc      	str	r4, [r7, #8]
 8006d3e:	415b      	adcs	r3, r3
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d46:	1812      	adds	r2, r2, r0
 8006d48:	eb41 0303 	adc.w	r3, r1, r3
 8006d4c:	f04f 0400 	mov.w	r4, #0
 8006d50:	f04f 0500 	mov.w	r5, #0
 8006d54:	00dd      	lsls	r5, r3, #3
 8006d56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d5a:	00d4      	lsls	r4, r2, #3
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	462b      	mov	r3, r5
 8006d60:	1814      	adds	r4, r2, r0
 8006d62:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d64:	414b      	adcs	r3, r1
 8006d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f04f 0100 	mov.w	r1, #0
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	f04f 0300 	mov.w	r3, #0
 8006d7a:	008b      	lsls	r3, r1, #2
 8006d7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d80:	0082      	lsls	r2, r0, #2
 8006d82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d86:	f7f9 fe89 	bl	8000a9c <__aeabi_uldivmod>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4b2f      	ldr	r3, [pc, #188]	; (8006e4c <UART_SetConfig+0x38c>)
 8006d90:	fba3 1302 	umull	r1, r3, r3, r2
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	2164      	movs	r1, #100	; 0x64
 8006d98:	fb01 f303 	mul.w	r3, r1, r3
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	3332      	adds	r3, #50	; 0x32
 8006da2:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <UART_SetConfig+0x38c>)
 8006da4:	fba2 2303 	umull	r2, r3, r2, r3
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dae:	441e      	add	r6, r3
 8006db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006db2:	4618      	mov	r0, r3
 8006db4:	f04f 0100 	mov.w	r1, #0
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	1894      	adds	r4, r2, r2
 8006dbe:	603c      	str	r4, [r7, #0]
 8006dc0:	415b      	adcs	r3, r3
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc8:	1812      	adds	r2, r2, r0
 8006dca:	eb41 0303 	adc.w	r3, r1, r3
 8006dce:	f04f 0400 	mov.w	r4, #0
 8006dd2:	f04f 0500 	mov.w	r5, #0
 8006dd6:	00dd      	lsls	r5, r3, #3
 8006dd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ddc:	00d4      	lsls	r4, r2, #3
 8006dde:	4622      	mov	r2, r4
 8006de0:	462b      	mov	r3, r5
 8006de2:	eb12 0a00 	adds.w	sl, r2, r0
 8006de6:	eb43 0b01 	adc.w	fp, r3, r1
 8006dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	f04f 0300 	mov.w	r3, #0
 8006dfc:	008b      	lsls	r3, r1, #2
 8006dfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e02:	0082      	lsls	r2, r0, #2
 8006e04:	4650      	mov	r0, sl
 8006e06:	4659      	mov	r1, fp
 8006e08:	f7f9 fe48 	bl	8000a9c <__aeabi_uldivmod>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <UART_SetConfig+0x38c>)
 8006e12:	fba3 1302 	umull	r1, r3, r3, r2
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	2164      	movs	r1, #100	; 0x64
 8006e1a:	fb01 f303 	mul.w	r3, r1, r3
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	3332      	adds	r3, #50	; 0x32
 8006e24:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <UART_SetConfig+0x38c>)
 8006e26:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	f003 020f 	and.w	r2, r3, #15
 8006e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4432      	add	r2, r6
 8006e36:	609a      	str	r2, [r3, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	377c      	adds	r7, #124	; 0x7c
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e42:	bf00      	nop
 8006e44:	40011000 	.word	0x40011000
 8006e48:	40011400 	.word	0x40011400
 8006e4c:	51eb851f 	.word	0x51eb851f

08006e50 <__errno>:
 8006e50:	4b01      	ldr	r3, [pc, #4]	; (8006e58 <__errno+0x8>)
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000018 	.word	0x20000018

08006e5c <__libc_init_array>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	4d0d      	ldr	r5, [pc, #52]	; (8006e94 <__libc_init_array+0x38>)
 8006e60:	4c0d      	ldr	r4, [pc, #52]	; (8006e98 <__libc_init_array+0x3c>)
 8006e62:	1b64      	subs	r4, r4, r5
 8006e64:	10a4      	asrs	r4, r4, #2
 8006e66:	2600      	movs	r6, #0
 8006e68:	42a6      	cmp	r6, r4
 8006e6a:	d109      	bne.n	8006e80 <__libc_init_array+0x24>
 8006e6c:	4d0b      	ldr	r5, [pc, #44]	; (8006e9c <__libc_init_array+0x40>)
 8006e6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ea0 <__libc_init_array+0x44>)
 8006e70:	f001 fc84 	bl	800877c <_init>
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	2600      	movs	r6, #0
 8006e7a:	42a6      	cmp	r6, r4
 8006e7c:	d105      	bne.n	8006e8a <__libc_init_array+0x2e>
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e84:	4798      	blx	r3
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7ee      	b.n	8006e68 <__libc_init_array+0xc>
 8006e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8e:	4798      	blx	r3
 8006e90:	3601      	adds	r6, #1
 8006e92:	e7f2      	b.n	8006e7a <__libc_init_array+0x1e>
 8006e94:	08008c80 	.word	0x08008c80
 8006e98:	08008c80 	.word	0x08008c80
 8006e9c:	08008c80 	.word	0x08008c80
 8006ea0:	08008c84 	.word	0x08008c84

08006ea4 <memset>:
 8006ea4:	4402      	add	r2, r0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d100      	bne.n	8006eae <memset+0xa>
 8006eac:	4770      	bx	lr
 8006eae:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb2:	e7f9      	b.n	8006ea8 <memset+0x4>

08006eb4 <siprintf>:
 8006eb4:	b40e      	push	{r1, r2, r3}
 8006eb6:	b500      	push	{lr}
 8006eb8:	b09c      	sub	sp, #112	; 0x70
 8006eba:	ab1d      	add	r3, sp, #116	; 0x74
 8006ebc:	9002      	str	r0, [sp, #8]
 8006ebe:	9006      	str	r0, [sp, #24]
 8006ec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ec4:	4809      	ldr	r0, [pc, #36]	; (8006eec <siprintf+0x38>)
 8006ec6:	9107      	str	r1, [sp, #28]
 8006ec8:	9104      	str	r1, [sp, #16]
 8006eca:	4909      	ldr	r1, [pc, #36]	; (8006ef0 <siprintf+0x3c>)
 8006ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ed0:	9105      	str	r1, [sp, #20]
 8006ed2:	6800      	ldr	r0, [r0, #0]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	a902      	add	r1, sp, #8
 8006ed8:	f000 f868 	bl	8006fac <_svfiprintf_r>
 8006edc:	9b02      	ldr	r3, [sp, #8]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	b01c      	add	sp, #112	; 0x70
 8006ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee8:	b003      	add	sp, #12
 8006eea:	4770      	bx	lr
 8006eec:	20000018 	.word	0x20000018
 8006ef0:	ffff0208 	.word	0xffff0208

08006ef4 <__ssputs_r>:
 8006ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef8:	688e      	ldr	r6, [r1, #8]
 8006efa:	429e      	cmp	r6, r3
 8006efc:	4682      	mov	sl, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	4690      	mov	r8, r2
 8006f02:	461f      	mov	r7, r3
 8006f04:	d838      	bhi.n	8006f78 <__ssputs_r+0x84>
 8006f06:	898a      	ldrh	r2, [r1, #12]
 8006f08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f0c:	d032      	beq.n	8006f74 <__ssputs_r+0x80>
 8006f0e:	6825      	ldr	r5, [r4, #0]
 8006f10:	6909      	ldr	r1, [r1, #16]
 8006f12:	eba5 0901 	sub.w	r9, r5, r1
 8006f16:	6965      	ldr	r5, [r4, #20]
 8006f18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f20:	3301      	adds	r3, #1
 8006f22:	444b      	add	r3, r9
 8006f24:	106d      	asrs	r5, r5, #1
 8006f26:	429d      	cmp	r5, r3
 8006f28:	bf38      	it	cc
 8006f2a:	461d      	movcc	r5, r3
 8006f2c:	0553      	lsls	r3, r2, #21
 8006f2e:	d531      	bpl.n	8006f94 <__ssputs_r+0xa0>
 8006f30:	4629      	mov	r1, r5
 8006f32:	f000 fb47 	bl	80075c4 <_malloc_r>
 8006f36:	4606      	mov	r6, r0
 8006f38:	b950      	cbnz	r0, 8006f50 <__ssputs_r+0x5c>
 8006f3a:	230c      	movs	r3, #12
 8006f3c:	f8ca 3000 	str.w	r3, [sl]
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f50:	6921      	ldr	r1, [r4, #16]
 8006f52:	464a      	mov	r2, r9
 8006f54:	f000 fabe 	bl	80074d4 <memcpy>
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	6126      	str	r6, [r4, #16]
 8006f66:	6165      	str	r5, [r4, #20]
 8006f68:	444e      	add	r6, r9
 8006f6a:	eba5 0509 	sub.w	r5, r5, r9
 8006f6e:	6026      	str	r6, [r4, #0]
 8006f70:	60a5      	str	r5, [r4, #8]
 8006f72:	463e      	mov	r6, r7
 8006f74:	42be      	cmp	r6, r7
 8006f76:	d900      	bls.n	8006f7a <__ssputs_r+0x86>
 8006f78:	463e      	mov	r6, r7
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	4641      	mov	r1, r8
 8006f80:	f000 fab6 	bl	80074f0 <memmove>
 8006f84:	68a3      	ldr	r3, [r4, #8]
 8006f86:	6822      	ldr	r2, [r4, #0]
 8006f88:	1b9b      	subs	r3, r3, r6
 8006f8a:	4432      	add	r2, r6
 8006f8c:	60a3      	str	r3, [r4, #8]
 8006f8e:	6022      	str	r2, [r4, #0]
 8006f90:	2000      	movs	r0, #0
 8006f92:	e7db      	b.n	8006f4c <__ssputs_r+0x58>
 8006f94:	462a      	mov	r2, r5
 8006f96:	f000 fb6f 	bl	8007678 <_realloc_r>
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d1e1      	bne.n	8006f64 <__ssputs_r+0x70>
 8006fa0:	6921      	ldr	r1, [r4, #16]
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	f000 fabe 	bl	8007524 <_free_r>
 8006fa8:	e7c7      	b.n	8006f3a <__ssputs_r+0x46>
	...

08006fac <_svfiprintf_r>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	4698      	mov	r8, r3
 8006fb2:	898b      	ldrh	r3, [r1, #12]
 8006fb4:	061b      	lsls	r3, r3, #24
 8006fb6:	b09d      	sub	sp, #116	; 0x74
 8006fb8:	4607      	mov	r7, r0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	d50e      	bpl.n	8006fde <_svfiprintf_r+0x32>
 8006fc0:	690b      	ldr	r3, [r1, #16]
 8006fc2:	b963      	cbnz	r3, 8006fde <_svfiprintf_r+0x32>
 8006fc4:	2140      	movs	r1, #64	; 0x40
 8006fc6:	f000 fafd 	bl	80075c4 <_malloc_r>
 8006fca:	6028      	str	r0, [r5, #0]
 8006fcc:	6128      	str	r0, [r5, #16]
 8006fce:	b920      	cbnz	r0, 8006fda <_svfiprintf_r+0x2e>
 8006fd0:	230c      	movs	r3, #12
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	e0d1      	b.n	800717e <_svfiprintf_r+0x1d2>
 8006fda:	2340      	movs	r3, #64	; 0x40
 8006fdc:	616b      	str	r3, [r5, #20]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe2:	2320      	movs	r3, #32
 8006fe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fe8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fec:	2330      	movs	r3, #48	; 0x30
 8006fee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007198 <_svfiprintf_r+0x1ec>
 8006ff2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ff6:	f04f 0901 	mov.w	r9, #1
 8006ffa:	4623      	mov	r3, r4
 8006ffc:	469a      	mov	sl, r3
 8006ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007002:	b10a      	cbz	r2, 8007008 <_svfiprintf_r+0x5c>
 8007004:	2a25      	cmp	r2, #37	; 0x25
 8007006:	d1f9      	bne.n	8006ffc <_svfiprintf_r+0x50>
 8007008:	ebba 0b04 	subs.w	fp, sl, r4
 800700c:	d00b      	beq.n	8007026 <_svfiprintf_r+0x7a>
 800700e:	465b      	mov	r3, fp
 8007010:	4622      	mov	r2, r4
 8007012:	4629      	mov	r1, r5
 8007014:	4638      	mov	r0, r7
 8007016:	f7ff ff6d 	bl	8006ef4 <__ssputs_r>
 800701a:	3001      	adds	r0, #1
 800701c:	f000 80aa 	beq.w	8007174 <_svfiprintf_r+0x1c8>
 8007020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007022:	445a      	add	r2, fp
 8007024:	9209      	str	r2, [sp, #36]	; 0x24
 8007026:	f89a 3000 	ldrb.w	r3, [sl]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80a2 	beq.w	8007174 <_svfiprintf_r+0x1c8>
 8007030:	2300      	movs	r3, #0
 8007032:	f04f 32ff 	mov.w	r2, #4294967295
 8007036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800703a:	f10a 0a01 	add.w	sl, sl, #1
 800703e:	9304      	str	r3, [sp, #16]
 8007040:	9307      	str	r3, [sp, #28]
 8007042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007046:	931a      	str	r3, [sp, #104]	; 0x68
 8007048:	4654      	mov	r4, sl
 800704a:	2205      	movs	r2, #5
 800704c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007050:	4851      	ldr	r0, [pc, #324]	; (8007198 <_svfiprintf_r+0x1ec>)
 8007052:	f7f9 f8cd 	bl	80001f0 <memchr>
 8007056:	9a04      	ldr	r2, [sp, #16]
 8007058:	b9d8      	cbnz	r0, 8007092 <_svfiprintf_r+0xe6>
 800705a:	06d0      	lsls	r0, r2, #27
 800705c:	bf44      	itt	mi
 800705e:	2320      	movmi	r3, #32
 8007060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007064:	0711      	lsls	r1, r2, #28
 8007066:	bf44      	itt	mi
 8007068:	232b      	movmi	r3, #43	; 0x2b
 800706a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800706e:	f89a 3000 	ldrb.w	r3, [sl]
 8007072:	2b2a      	cmp	r3, #42	; 0x2a
 8007074:	d015      	beq.n	80070a2 <_svfiprintf_r+0xf6>
 8007076:	9a07      	ldr	r2, [sp, #28]
 8007078:	4654      	mov	r4, sl
 800707a:	2000      	movs	r0, #0
 800707c:	f04f 0c0a 	mov.w	ip, #10
 8007080:	4621      	mov	r1, r4
 8007082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007086:	3b30      	subs	r3, #48	; 0x30
 8007088:	2b09      	cmp	r3, #9
 800708a:	d94e      	bls.n	800712a <_svfiprintf_r+0x17e>
 800708c:	b1b0      	cbz	r0, 80070bc <_svfiprintf_r+0x110>
 800708e:	9207      	str	r2, [sp, #28]
 8007090:	e014      	b.n	80070bc <_svfiprintf_r+0x110>
 8007092:	eba0 0308 	sub.w	r3, r0, r8
 8007096:	fa09 f303 	lsl.w	r3, r9, r3
 800709a:	4313      	orrs	r3, r2
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	46a2      	mov	sl, r4
 80070a0:	e7d2      	b.n	8007048 <_svfiprintf_r+0x9c>
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	1d19      	adds	r1, r3, #4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	9103      	str	r1, [sp, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bfbb      	ittet	lt
 80070ae:	425b      	neglt	r3, r3
 80070b0:	f042 0202 	orrlt.w	r2, r2, #2
 80070b4:	9307      	strge	r3, [sp, #28]
 80070b6:	9307      	strlt	r3, [sp, #28]
 80070b8:	bfb8      	it	lt
 80070ba:	9204      	strlt	r2, [sp, #16]
 80070bc:	7823      	ldrb	r3, [r4, #0]
 80070be:	2b2e      	cmp	r3, #46	; 0x2e
 80070c0:	d10c      	bne.n	80070dc <_svfiprintf_r+0x130>
 80070c2:	7863      	ldrb	r3, [r4, #1]
 80070c4:	2b2a      	cmp	r3, #42	; 0x2a
 80070c6:	d135      	bne.n	8007134 <_svfiprintf_r+0x188>
 80070c8:	9b03      	ldr	r3, [sp, #12]
 80070ca:	1d1a      	adds	r2, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	9203      	str	r2, [sp, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bfb8      	it	lt
 80070d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80070d8:	3402      	adds	r4, #2
 80070da:	9305      	str	r3, [sp, #20]
 80070dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071a8 <_svfiprintf_r+0x1fc>
 80070e0:	7821      	ldrb	r1, [r4, #0]
 80070e2:	2203      	movs	r2, #3
 80070e4:	4650      	mov	r0, sl
 80070e6:	f7f9 f883 	bl	80001f0 <memchr>
 80070ea:	b140      	cbz	r0, 80070fe <_svfiprintf_r+0x152>
 80070ec:	2340      	movs	r3, #64	; 0x40
 80070ee:	eba0 000a 	sub.w	r0, r0, sl
 80070f2:	fa03 f000 	lsl.w	r0, r3, r0
 80070f6:	9b04      	ldr	r3, [sp, #16]
 80070f8:	4303      	orrs	r3, r0
 80070fa:	3401      	adds	r4, #1
 80070fc:	9304      	str	r3, [sp, #16]
 80070fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007102:	4826      	ldr	r0, [pc, #152]	; (800719c <_svfiprintf_r+0x1f0>)
 8007104:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007108:	2206      	movs	r2, #6
 800710a:	f7f9 f871 	bl	80001f0 <memchr>
 800710e:	2800      	cmp	r0, #0
 8007110:	d038      	beq.n	8007184 <_svfiprintf_r+0x1d8>
 8007112:	4b23      	ldr	r3, [pc, #140]	; (80071a0 <_svfiprintf_r+0x1f4>)
 8007114:	bb1b      	cbnz	r3, 800715e <_svfiprintf_r+0x1b2>
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	3307      	adds	r3, #7
 800711a:	f023 0307 	bic.w	r3, r3, #7
 800711e:	3308      	adds	r3, #8
 8007120:	9303      	str	r3, [sp, #12]
 8007122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007124:	4433      	add	r3, r6
 8007126:	9309      	str	r3, [sp, #36]	; 0x24
 8007128:	e767      	b.n	8006ffa <_svfiprintf_r+0x4e>
 800712a:	fb0c 3202 	mla	r2, ip, r2, r3
 800712e:	460c      	mov	r4, r1
 8007130:	2001      	movs	r0, #1
 8007132:	e7a5      	b.n	8007080 <_svfiprintf_r+0xd4>
 8007134:	2300      	movs	r3, #0
 8007136:	3401      	adds	r4, #1
 8007138:	9305      	str	r3, [sp, #20]
 800713a:	4619      	mov	r1, r3
 800713c:	f04f 0c0a 	mov.w	ip, #10
 8007140:	4620      	mov	r0, r4
 8007142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007146:	3a30      	subs	r2, #48	; 0x30
 8007148:	2a09      	cmp	r2, #9
 800714a:	d903      	bls.n	8007154 <_svfiprintf_r+0x1a8>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0c5      	beq.n	80070dc <_svfiprintf_r+0x130>
 8007150:	9105      	str	r1, [sp, #20]
 8007152:	e7c3      	b.n	80070dc <_svfiprintf_r+0x130>
 8007154:	fb0c 2101 	mla	r1, ip, r1, r2
 8007158:	4604      	mov	r4, r0
 800715a:	2301      	movs	r3, #1
 800715c:	e7f0      	b.n	8007140 <_svfiprintf_r+0x194>
 800715e:	ab03      	add	r3, sp, #12
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	462a      	mov	r2, r5
 8007164:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <_svfiprintf_r+0x1f8>)
 8007166:	a904      	add	r1, sp, #16
 8007168:	4638      	mov	r0, r7
 800716a:	f3af 8000 	nop.w
 800716e:	1c42      	adds	r2, r0, #1
 8007170:	4606      	mov	r6, r0
 8007172:	d1d6      	bne.n	8007122 <_svfiprintf_r+0x176>
 8007174:	89ab      	ldrh	r3, [r5, #12]
 8007176:	065b      	lsls	r3, r3, #25
 8007178:	f53f af2c 	bmi.w	8006fd4 <_svfiprintf_r+0x28>
 800717c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800717e:	b01d      	add	sp, #116	; 0x74
 8007180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007184:	ab03      	add	r3, sp, #12
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	462a      	mov	r2, r5
 800718a:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <_svfiprintf_r+0x1f8>)
 800718c:	a904      	add	r1, sp, #16
 800718e:	4638      	mov	r0, r7
 8007190:	f000 f87a 	bl	8007288 <_printf_i>
 8007194:	e7eb      	b.n	800716e <_svfiprintf_r+0x1c2>
 8007196:	bf00      	nop
 8007198:	08008a68 	.word	0x08008a68
 800719c:	08008a72 	.word	0x08008a72
 80071a0:	00000000 	.word	0x00000000
 80071a4:	08006ef5 	.word	0x08006ef5
 80071a8:	08008a6e 	.word	0x08008a6e

080071ac <_printf_common>:
 80071ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b0:	4616      	mov	r6, r2
 80071b2:	4699      	mov	r9, r3
 80071b4:	688a      	ldr	r2, [r1, #8]
 80071b6:	690b      	ldr	r3, [r1, #16]
 80071b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071bc:	4293      	cmp	r3, r2
 80071be:	bfb8      	it	lt
 80071c0:	4613      	movlt	r3, r2
 80071c2:	6033      	str	r3, [r6, #0]
 80071c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071c8:	4607      	mov	r7, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	b10a      	cbz	r2, 80071d2 <_printf_common+0x26>
 80071ce:	3301      	adds	r3, #1
 80071d0:	6033      	str	r3, [r6, #0]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	0699      	lsls	r1, r3, #26
 80071d6:	bf42      	ittt	mi
 80071d8:	6833      	ldrmi	r3, [r6, #0]
 80071da:	3302      	addmi	r3, #2
 80071dc:	6033      	strmi	r3, [r6, #0]
 80071de:	6825      	ldr	r5, [r4, #0]
 80071e0:	f015 0506 	ands.w	r5, r5, #6
 80071e4:	d106      	bne.n	80071f4 <_printf_common+0x48>
 80071e6:	f104 0a19 	add.w	sl, r4, #25
 80071ea:	68e3      	ldr	r3, [r4, #12]
 80071ec:	6832      	ldr	r2, [r6, #0]
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	42ab      	cmp	r3, r5
 80071f2:	dc26      	bgt.n	8007242 <_printf_common+0x96>
 80071f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071f8:	1e13      	subs	r3, r2, #0
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	bf18      	it	ne
 80071fe:	2301      	movne	r3, #1
 8007200:	0692      	lsls	r2, r2, #26
 8007202:	d42b      	bmi.n	800725c <_printf_common+0xb0>
 8007204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007208:	4649      	mov	r1, r9
 800720a:	4638      	mov	r0, r7
 800720c:	47c0      	blx	r8
 800720e:	3001      	adds	r0, #1
 8007210:	d01e      	beq.n	8007250 <_printf_common+0xa4>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	68e5      	ldr	r5, [r4, #12]
 8007216:	6832      	ldr	r2, [r6, #0]
 8007218:	f003 0306 	and.w	r3, r3, #6
 800721c:	2b04      	cmp	r3, #4
 800721e:	bf08      	it	eq
 8007220:	1aad      	subeq	r5, r5, r2
 8007222:	68a3      	ldr	r3, [r4, #8]
 8007224:	6922      	ldr	r2, [r4, #16]
 8007226:	bf0c      	ite	eq
 8007228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800722c:	2500      	movne	r5, #0
 800722e:	4293      	cmp	r3, r2
 8007230:	bfc4      	itt	gt
 8007232:	1a9b      	subgt	r3, r3, r2
 8007234:	18ed      	addgt	r5, r5, r3
 8007236:	2600      	movs	r6, #0
 8007238:	341a      	adds	r4, #26
 800723a:	42b5      	cmp	r5, r6
 800723c:	d11a      	bne.n	8007274 <_printf_common+0xc8>
 800723e:	2000      	movs	r0, #0
 8007240:	e008      	b.n	8007254 <_printf_common+0xa8>
 8007242:	2301      	movs	r3, #1
 8007244:	4652      	mov	r2, sl
 8007246:	4649      	mov	r1, r9
 8007248:	4638      	mov	r0, r7
 800724a:	47c0      	blx	r8
 800724c:	3001      	adds	r0, #1
 800724e:	d103      	bne.n	8007258 <_printf_common+0xac>
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007258:	3501      	adds	r5, #1
 800725a:	e7c6      	b.n	80071ea <_printf_common+0x3e>
 800725c:	18e1      	adds	r1, r4, r3
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	2030      	movs	r0, #48	; 0x30
 8007262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007266:	4422      	add	r2, r4
 8007268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800726c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007270:	3302      	adds	r3, #2
 8007272:	e7c7      	b.n	8007204 <_printf_common+0x58>
 8007274:	2301      	movs	r3, #1
 8007276:	4622      	mov	r2, r4
 8007278:	4649      	mov	r1, r9
 800727a:	4638      	mov	r0, r7
 800727c:	47c0      	blx	r8
 800727e:	3001      	adds	r0, #1
 8007280:	d0e6      	beq.n	8007250 <_printf_common+0xa4>
 8007282:	3601      	adds	r6, #1
 8007284:	e7d9      	b.n	800723a <_printf_common+0x8e>
	...

08007288 <_printf_i>:
 8007288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800728c:	460c      	mov	r4, r1
 800728e:	4691      	mov	r9, r2
 8007290:	7e27      	ldrb	r7, [r4, #24]
 8007292:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007294:	2f78      	cmp	r7, #120	; 0x78
 8007296:	4680      	mov	r8, r0
 8007298:	469a      	mov	sl, r3
 800729a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800729e:	d807      	bhi.n	80072b0 <_printf_i+0x28>
 80072a0:	2f62      	cmp	r7, #98	; 0x62
 80072a2:	d80a      	bhi.n	80072ba <_printf_i+0x32>
 80072a4:	2f00      	cmp	r7, #0
 80072a6:	f000 80d8 	beq.w	800745a <_printf_i+0x1d2>
 80072aa:	2f58      	cmp	r7, #88	; 0x58
 80072ac:	f000 80a3 	beq.w	80073f6 <_printf_i+0x16e>
 80072b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072b8:	e03a      	b.n	8007330 <_printf_i+0xa8>
 80072ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072be:	2b15      	cmp	r3, #21
 80072c0:	d8f6      	bhi.n	80072b0 <_printf_i+0x28>
 80072c2:	a001      	add	r0, pc, #4	; (adr r0, 80072c8 <_printf_i+0x40>)
 80072c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072c8:	08007321 	.word	0x08007321
 80072cc:	08007335 	.word	0x08007335
 80072d0:	080072b1 	.word	0x080072b1
 80072d4:	080072b1 	.word	0x080072b1
 80072d8:	080072b1 	.word	0x080072b1
 80072dc:	080072b1 	.word	0x080072b1
 80072e0:	08007335 	.word	0x08007335
 80072e4:	080072b1 	.word	0x080072b1
 80072e8:	080072b1 	.word	0x080072b1
 80072ec:	080072b1 	.word	0x080072b1
 80072f0:	080072b1 	.word	0x080072b1
 80072f4:	08007441 	.word	0x08007441
 80072f8:	08007365 	.word	0x08007365
 80072fc:	08007423 	.word	0x08007423
 8007300:	080072b1 	.word	0x080072b1
 8007304:	080072b1 	.word	0x080072b1
 8007308:	08007463 	.word	0x08007463
 800730c:	080072b1 	.word	0x080072b1
 8007310:	08007365 	.word	0x08007365
 8007314:	080072b1 	.word	0x080072b1
 8007318:	080072b1 	.word	0x080072b1
 800731c:	0800742b 	.word	0x0800742b
 8007320:	680b      	ldr	r3, [r1, #0]
 8007322:	1d1a      	adds	r2, r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	600a      	str	r2, [r1, #0]
 8007328:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800732c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007330:	2301      	movs	r3, #1
 8007332:	e0a3      	b.n	800747c <_printf_i+0x1f4>
 8007334:	6825      	ldr	r5, [r4, #0]
 8007336:	6808      	ldr	r0, [r1, #0]
 8007338:	062e      	lsls	r6, r5, #24
 800733a:	f100 0304 	add.w	r3, r0, #4
 800733e:	d50a      	bpl.n	8007356 <_printf_i+0xce>
 8007340:	6805      	ldr	r5, [r0, #0]
 8007342:	600b      	str	r3, [r1, #0]
 8007344:	2d00      	cmp	r5, #0
 8007346:	da03      	bge.n	8007350 <_printf_i+0xc8>
 8007348:	232d      	movs	r3, #45	; 0x2d
 800734a:	426d      	negs	r5, r5
 800734c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007350:	485e      	ldr	r0, [pc, #376]	; (80074cc <_printf_i+0x244>)
 8007352:	230a      	movs	r3, #10
 8007354:	e019      	b.n	800738a <_printf_i+0x102>
 8007356:	f015 0f40 	tst.w	r5, #64	; 0x40
 800735a:	6805      	ldr	r5, [r0, #0]
 800735c:	600b      	str	r3, [r1, #0]
 800735e:	bf18      	it	ne
 8007360:	b22d      	sxthne	r5, r5
 8007362:	e7ef      	b.n	8007344 <_printf_i+0xbc>
 8007364:	680b      	ldr	r3, [r1, #0]
 8007366:	6825      	ldr	r5, [r4, #0]
 8007368:	1d18      	adds	r0, r3, #4
 800736a:	6008      	str	r0, [r1, #0]
 800736c:	0628      	lsls	r0, r5, #24
 800736e:	d501      	bpl.n	8007374 <_printf_i+0xec>
 8007370:	681d      	ldr	r5, [r3, #0]
 8007372:	e002      	b.n	800737a <_printf_i+0xf2>
 8007374:	0669      	lsls	r1, r5, #25
 8007376:	d5fb      	bpl.n	8007370 <_printf_i+0xe8>
 8007378:	881d      	ldrh	r5, [r3, #0]
 800737a:	4854      	ldr	r0, [pc, #336]	; (80074cc <_printf_i+0x244>)
 800737c:	2f6f      	cmp	r7, #111	; 0x6f
 800737e:	bf0c      	ite	eq
 8007380:	2308      	moveq	r3, #8
 8007382:	230a      	movne	r3, #10
 8007384:	2100      	movs	r1, #0
 8007386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800738a:	6866      	ldr	r6, [r4, #4]
 800738c:	60a6      	str	r6, [r4, #8]
 800738e:	2e00      	cmp	r6, #0
 8007390:	bfa2      	ittt	ge
 8007392:	6821      	ldrge	r1, [r4, #0]
 8007394:	f021 0104 	bicge.w	r1, r1, #4
 8007398:	6021      	strge	r1, [r4, #0]
 800739a:	b90d      	cbnz	r5, 80073a0 <_printf_i+0x118>
 800739c:	2e00      	cmp	r6, #0
 800739e:	d04d      	beq.n	800743c <_printf_i+0x1b4>
 80073a0:	4616      	mov	r6, r2
 80073a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80073a6:	fb03 5711 	mls	r7, r3, r1, r5
 80073aa:	5dc7      	ldrb	r7, [r0, r7]
 80073ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073b0:	462f      	mov	r7, r5
 80073b2:	42bb      	cmp	r3, r7
 80073b4:	460d      	mov	r5, r1
 80073b6:	d9f4      	bls.n	80073a2 <_printf_i+0x11a>
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d10b      	bne.n	80073d4 <_printf_i+0x14c>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	07df      	lsls	r7, r3, #31
 80073c0:	d508      	bpl.n	80073d4 <_printf_i+0x14c>
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	6861      	ldr	r1, [r4, #4]
 80073c6:	4299      	cmp	r1, r3
 80073c8:	bfde      	ittt	le
 80073ca:	2330      	movle	r3, #48	; 0x30
 80073cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073d4:	1b92      	subs	r2, r2, r6
 80073d6:	6122      	str	r2, [r4, #16]
 80073d8:	f8cd a000 	str.w	sl, [sp]
 80073dc:	464b      	mov	r3, r9
 80073de:	aa03      	add	r2, sp, #12
 80073e0:	4621      	mov	r1, r4
 80073e2:	4640      	mov	r0, r8
 80073e4:	f7ff fee2 	bl	80071ac <_printf_common>
 80073e8:	3001      	adds	r0, #1
 80073ea:	d14c      	bne.n	8007486 <_printf_i+0x1fe>
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	b004      	add	sp, #16
 80073f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f6:	4835      	ldr	r0, [pc, #212]	; (80074cc <_printf_i+0x244>)
 80073f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	680e      	ldr	r6, [r1, #0]
 8007400:	061f      	lsls	r7, r3, #24
 8007402:	f856 5b04 	ldr.w	r5, [r6], #4
 8007406:	600e      	str	r6, [r1, #0]
 8007408:	d514      	bpl.n	8007434 <_printf_i+0x1ac>
 800740a:	07d9      	lsls	r1, r3, #31
 800740c:	bf44      	itt	mi
 800740e:	f043 0320 	orrmi.w	r3, r3, #32
 8007412:	6023      	strmi	r3, [r4, #0]
 8007414:	b91d      	cbnz	r5, 800741e <_printf_i+0x196>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	f023 0320 	bic.w	r3, r3, #32
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	2310      	movs	r3, #16
 8007420:	e7b0      	b.n	8007384 <_printf_i+0xfc>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	f043 0320 	orr.w	r3, r3, #32
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	2378      	movs	r3, #120	; 0x78
 800742c:	4828      	ldr	r0, [pc, #160]	; (80074d0 <_printf_i+0x248>)
 800742e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007432:	e7e3      	b.n	80073fc <_printf_i+0x174>
 8007434:	065e      	lsls	r6, r3, #25
 8007436:	bf48      	it	mi
 8007438:	b2ad      	uxthmi	r5, r5
 800743a:	e7e6      	b.n	800740a <_printf_i+0x182>
 800743c:	4616      	mov	r6, r2
 800743e:	e7bb      	b.n	80073b8 <_printf_i+0x130>
 8007440:	680b      	ldr	r3, [r1, #0]
 8007442:	6826      	ldr	r6, [r4, #0]
 8007444:	6960      	ldr	r0, [r4, #20]
 8007446:	1d1d      	adds	r5, r3, #4
 8007448:	600d      	str	r5, [r1, #0]
 800744a:	0635      	lsls	r5, r6, #24
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	d501      	bpl.n	8007454 <_printf_i+0x1cc>
 8007450:	6018      	str	r0, [r3, #0]
 8007452:	e002      	b.n	800745a <_printf_i+0x1d2>
 8007454:	0671      	lsls	r1, r6, #25
 8007456:	d5fb      	bpl.n	8007450 <_printf_i+0x1c8>
 8007458:	8018      	strh	r0, [r3, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	6123      	str	r3, [r4, #16]
 800745e:	4616      	mov	r6, r2
 8007460:	e7ba      	b.n	80073d8 <_printf_i+0x150>
 8007462:	680b      	ldr	r3, [r1, #0]
 8007464:	1d1a      	adds	r2, r3, #4
 8007466:	600a      	str	r2, [r1, #0]
 8007468:	681e      	ldr	r6, [r3, #0]
 800746a:	6862      	ldr	r2, [r4, #4]
 800746c:	2100      	movs	r1, #0
 800746e:	4630      	mov	r0, r6
 8007470:	f7f8 febe 	bl	80001f0 <memchr>
 8007474:	b108      	cbz	r0, 800747a <_printf_i+0x1f2>
 8007476:	1b80      	subs	r0, r0, r6
 8007478:	6060      	str	r0, [r4, #4]
 800747a:	6863      	ldr	r3, [r4, #4]
 800747c:	6123      	str	r3, [r4, #16]
 800747e:	2300      	movs	r3, #0
 8007480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007484:	e7a8      	b.n	80073d8 <_printf_i+0x150>
 8007486:	6923      	ldr	r3, [r4, #16]
 8007488:	4632      	mov	r2, r6
 800748a:	4649      	mov	r1, r9
 800748c:	4640      	mov	r0, r8
 800748e:	47d0      	blx	sl
 8007490:	3001      	adds	r0, #1
 8007492:	d0ab      	beq.n	80073ec <_printf_i+0x164>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	079b      	lsls	r3, r3, #30
 8007498:	d413      	bmi.n	80074c2 <_printf_i+0x23a>
 800749a:	68e0      	ldr	r0, [r4, #12]
 800749c:	9b03      	ldr	r3, [sp, #12]
 800749e:	4298      	cmp	r0, r3
 80074a0:	bfb8      	it	lt
 80074a2:	4618      	movlt	r0, r3
 80074a4:	e7a4      	b.n	80073f0 <_printf_i+0x168>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4632      	mov	r2, r6
 80074aa:	4649      	mov	r1, r9
 80074ac:	4640      	mov	r0, r8
 80074ae:	47d0      	blx	sl
 80074b0:	3001      	adds	r0, #1
 80074b2:	d09b      	beq.n	80073ec <_printf_i+0x164>
 80074b4:	3501      	adds	r5, #1
 80074b6:	68e3      	ldr	r3, [r4, #12]
 80074b8:	9903      	ldr	r1, [sp, #12]
 80074ba:	1a5b      	subs	r3, r3, r1
 80074bc:	42ab      	cmp	r3, r5
 80074be:	dcf2      	bgt.n	80074a6 <_printf_i+0x21e>
 80074c0:	e7eb      	b.n	800749a <_printf_i+0x212>
 80074c2:	2500      	movs	r5, #0
 80074c4:	f104 0619 	add.w	r6, r4, #25
 80074c8:	e7f5      	b.n	80074b6 <_printf_i+0x22e>
 80074ca:	bf00      	nop
 80074cc:	08008a79 	.word	0x08008a79
 80074d0:	08008a8a 	.word	0x08008a8a

080074d4 <memcpy>:
 80074d4:	440a      	add	r2, r1
 80074d6:	4291      	cmp	r1, r2
 80074d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xc>
 80074de:	4770      	bx	lr
 80074e0:	b510      	push	{r4, lr}
 80074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d1f9      	bne.n	80074e2 <memcpy+0xe>
 80074ee:	bd10      	pop	{r4, pc}

080074f0 <memmove>:
 80074f0:	4288      	cmp	r0, r1
 80074f2:	b510      	push	{r4, lr}
 80074f4:	eb01 0402 	add.w	r4, r1, r2
 80074f8:	d902      	bls.n	8007500 <memmove+0x10>
 80074fa:	4284      	cmp	r4, r0
 80074fc:	4623      	mov	r3, r4
 80074fe:	d807      	bhi.n	8007510 <memmove+0x20>
 8007500:	1e43      	subs	r3, r0, #1
 8007502:	42a1      	cmp	r1, r4
 8007504:	d008      	beq.n	8007518 <memmove+0x28>
 8007506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800750a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800750e:	e7f8      	b.n	8007502 <memmove+0x12>
 8007510:	4402      	add	r2, r0
 8007512:	4601      	mov	r1, r0
 8007514:	428a      	cmp	r2, r1
 8007516:	d100      	bne.n	800751a <memmove+0x2a>
 8007518:	bd10      	pop	{r4, pc}
 800751a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800751e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007522:	e7f7      	b.n	8007514 <memmove+0x24>

08007524 <_free_r>:
 8007524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007526:	2900      	cmp	r1, #0
 8007528:	d048      	beq.n	80075bc <_free_r+0x98>
 800752a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800752e:	9001      	str	r0, [sp, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f1a1 0404 	sub.w	r4, r1, #4
 8007536:	bfb8      	it	lt
 8007538:	18e4      	addlt	r4, r4, r3
 800753a:	f000 f8d3 	bl	80076e4 <__malloc_lock>
 800753e:	4a20      	ldr	r2, [pc, #128]	; (80075c0 <_free_r+0x9c>)
 8007540:	9801      	ldr	r0, [sp, #4]
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	4615      	mov	r5, r2
 8007546:	b933      	cbnz	r3, 8007556 <_free_r+0x32>
 8007548:	6063      	str	r3, [r4, #4]
 800754a:	6014      	str	r4, [r2, #0]
 800754c:	b003      	add	sp, #12
 800754e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007552:	f000 b8cd 	b.w	80076f0 <__malloc_unlock>
 8007556:	42a3      	cmp	r3, r4
 8007558:	d90b      	bls.n	8007572 <_free_r+0x4e>
 800755a:	6821      	ldr	r1, [r4, #0]
 800755c:	1862      	adds	r2, r4, r1
 800755e:	4293      	cmp	r3, r2
 8007560:	bf04      	itt	eq
 8007562:	681a      	ldreq	r2, [r3, #0]
 8007564:	685b      	ldreq	r3, [r3, #4]
 8007566:	6063      	str	r3, [r4, #4]
 8007568:	bf04      	itt	eq
 800756a:	1852      	addeq	r2, r2, r1
 800756c:	6022      	streq	r2, [r4, #0]
 800756e:	602c      	str	r4, [r5, #0]
 8007570:	e7ec      	b.n	800754c <_free_r+0x28>
 8007572:	461a      	mov	r2, r3
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	b10b      	cbz	r3, 800757c <_free_r+0x58>
 8007578:	42a3      	cmp	r3, r4
 800757a:	d9fa      	bls.n	8007572 <_free_r+0x4e>
 800757c:	6811      	ldr	r1, [r2, #0]
 800757e:	1855      	adds	r5, r2, r1
 8007580:	42a5      	cmp	r5, r4
 8007582:	d10b      	bne.n	800759c <_free_r+0x78>
 8007584:	6824      	ldr	r4, [r4, #0]
 8007586:	4421      	add	r1, r4
 8007588:	1854      	adds	r4, r2, r1
 800758a:	42a3      	cmp	r3, r4
 800758c:	6011      	str	r1, [r2, #0]
 800758e:	d1dd      	bne.n	800754c <_free_r+0x28>
 8007590:	681c      	ldr	r4, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	6053      	str	r3, [r2, #4]
 8007596:	4421      	add	r1, r4
 8007598:	6011      	str	r1, [r2, #0]
 800759a:	e7d7      	b.n	800754c <_free_r+0x28>
 800759c:	d902      	bls.n	80075a4 <_free_r+0x80>
 800759e:	230c      	movs	r3, #12
 80075a0:	6003      	str	r3, [r0, #0]
 80075a2:	e7d3      	b.n	800754c <_free_r+0x28>
 80075a4:	6825      	ldr	r5, [r4, #0]
 80075a6:	1961      	adds	r1, r4, r5
 80075a8:	428b      	cmp	r3, r1
 80075aa:	bf04      	itt	eq
 80075ac:	6819      	ldreq	r1, [r3, #0]
 80075ae:	685b      	ldreq	r3, [r3, #4]
 80075b0:	6063      	str	r3, [r4, #4]
 80075b2:	bf04      	itt	eq
 80075b4:	1949      	addeq	r1, r1, r5
 80075b6:	6021      	streq	r1, [r4, #0]
 80075b8:	6054      	str	r4, [r2, #4]
 80075ba:	e7c7      	b.n	800754c <_free_r+0x28>
 80075bc:	b003      	add	sp, #12
 80075be:	bd30      	pop	{r4, r5, pc}
 80075c0:	2000014c 	.word	0x2000014c

080075c4 <_malloc_r>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	1ccd      	adds	r5, r1, #3
 80075c8:	f025 0503 	bic.w	r5, r5, #3
 80075cc:	3508      	adds	r5, #8
 80075ce:	2d0c      	cmp	r5, #12
 80075d0:	bf38      	it	cc
 80075d2:	250c      	movcc	r5, #12
 80075d4:	2d00      	cmp	r5, #0
 80075d6:	4606      	mov	r6, r0
 80075d8:	db01      	blt.n	80075de <_malloc_r+0x1a>
 80075da:	42a9      	cmp	r1, r5
 80075dc:	d903      	bls.n	80075e6 <_malloc_r+0x22>
 80075de:	230c      	movs	r3, #12
 80075e0:	6033      	str	r3, [r6, #0]
 80075e2:	2000      	movs	r0, #0
 80075e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e6:	f000 f87d 	bl	80076e4 <__malloc_lock>
 80075ea:	4921      	ldr	r1, [pc, #132]	; (8007670 <_malloc_r+0xac>)
 80075ec:	680a      	ldr	r2, [r1, #0]
 80075ee:	4614      	mov	r4, r2
 80075f0:	b99c      	cbnz	r4, 800761a <_malloc_r+0x56>
 80075f2:	4f20      	ldr	r7, [pc, #128]	; (8007674 <_malloc_r+0xb0>)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	b923      	cbnz	r3, 8007602 <_malloc_r+0x3e>
 80075f8:	4621      	mov	r1, r4
 80075fa:	4630      	mov	r0, r6
 80075fc:	f000 f862 	bl	80076c4 <_sbrk_r>
 8007600:	6038      	str	r0, [r7, #0]
 8007602:	4629      	mov	r1, r5
 8007604:	4630      	mov	r0, r6
 8007606:	f000 f85d 	bl	80076c4 <_sbrk_r>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	d123      	bne.n	8007656 <_malloc_r+0x92>
 800760e:	230c      	movs	r3, #12
 8007610:	6033      	str	r3, [r6, #0]
 8007612:	4630      	mov	r0, r6
 8007614:	f000 f86c 	bl	80076f0 <__malloc_unlock>
 8007618:	e7e3      	b.n	80075e2 <_malloc_r+0x1e>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	1b5b      	subs	r3, r3, r5
 800761e:	d417      	bmi.n	8007650 <_malloc_r+0x8c>
 8007620:	2b0b      	cmp	r3, #11
 8007622:	d903      	bls.n	800762c <_malloc_r+0x68>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	441c      	add	r4, r3
 8007628:	6025      	str	r5, [r4, #0]
 800762a:	e004      	b.n	8007636 <_malloc_r+0x72>
 800762c:	6863      	ldr	r3, [r4, #4]
 800762e:	42a2      	cmp	r2, r4
 8007630:	bf0c      	ite	eq
 8007632:	600b      	streq	r3, [r1, #0]
 8007634:	6053      	strne	r3, [r2, #4]
 8007636:	4630      	mov	r0, r6
 8007638:	f000 f85a 	bl	80076f0 <__malloc_unlock>
 800763c:	f104 000b 	add.w	r0, r4, #11
 8007640:	1d23      	adds	r3, r4, #4
 8007642:	f020 0007 	bic.w	r0, r0, #7
 8007646:	1ac2      	subs	r2, r0, r3
 8007648:	d0cc      	beq.n	80075e4 <_malloc_r+0x20>
 800764a:	1a1b      	subs	r3, r3, r0
 800764c:	50a3      	str	r3, [r4, r2]
 800764e:	e7c9      	b.n	80075e4 <_malloc_r+0x20>
 8007650:	4622      	mov	r2, r4
 8007652:	6864      	ldr	r4, [r4, #4]
 8007654:	e7cc      	b.n	80075f0 <_malloc_r+0x2c>
 8007656:	1cc4      	adds	r4, r0, #3
 8007658:	f024 0403 	bic.w	r4, r4, #3
 800765c:	42a0      	cmp	r0, r4
 800765e:	d0e3      	beq.n	8007628 <_malloc_r+0x64>
 8007660:	1a21      	subs	r1, r4, r0
 8007662:	4630      	mov	r0, r6
 8007664:	f000 f82e 	bl	80076c4 <_sbrk_r>
 8007668:	3001      	adds	r0, #1
 800766a:	d1dd      	bne.n	8007628 <_malloc_r+0x64>
 800766c:	e7cf      	b.n	800760e <_malloc_r+0x4a>
 800766e:	bf00      	nop
 8007670:	2000014c 	.word	0x2000014c
 8007674:	20000150 	.word	0x20000150

08007678 <_realloc_r>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	4607      	mov	r7, r0
 800767c:	4614      	mov	r4, r2
 800767e:	460e      	mov	r6, r1
 8007680:	b921      	cbnz	r1, 800768c <_realloc_r+0x14>
 8007682:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007686:	4611      	mov	r1, r2
 8007688:	f7ff bf9c 	b.w	80075c4 <_malloc_r>
 800768c:	b922      	cbnz	r2, 8007698 <_realloc_r+0x20>
 800768e:	f7ff ff49 	bl	8007524 <_free_r>
 8007692:	4625      	mov	r5, r4
 8007694:	4628      	mov	r0, r5
 8007696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007698:	f000 f830 	bl	80076fc <_malloc_usable_size_r>
 800769c:	42a0      	cmp	r0, r4
 800769e:	d20f      	bcs.n	80076c0 <_realloc_r+0x48>
 80076a0:	4621      	mov	r1, r4
 80076a2:	4638      	mov	r0, r7
 80076a4:	f7ff ff8e 	bl	80075c4 <_malloc_r>
 80076a8:	4605      	mov	r5, r0
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d0f2      	beq.n	8007694 <_realloc_r+0x1c>
 80076ae:	4631      	mov	r1, r6
 80076b0:	4622      	mov	r2, r4
 80076b2:	f7ff ff0f 	bl	80074d4 <memcpy>
 80076b6:	4631      	mov	r1, r6
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7ff ff33 	bl	8007524 <_free_r>
 80076be:	e7e9      	b.n	8007694 <_realloc_r+0x1c>
 80076c0:	4635      	mov	r5, r6
 80076c2:	e7e7      	b.n	8007694 <_realloc_r+0x1c>

080076c4 <_sbrk_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	4d06      	ldr	r5, [pc, #24]	; (80076e0 <_sbrk_r+0x1c>)
 80076c8:	2300      	movs	r3, #0
 80076ca:	4604      	mov	r4, r0
 80076cc:	4608      	mov	r0, r1
 80076ce:	602b      	str	r3, [r5, #0]
 80076d0:	f7fb fb94 	bl	8002dfc <_sbrk>
 80076d4:	1c43      	adds	r3, r0, #1
 80076d6:	d102      	bne.n	80076de <_sbrk_r+0x1a>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	b103      	cbz	r3, 80076de <_sbrk_r+0x1a>
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	2000032c 	.word	0x2000032c

080076e4 <__malloc_lock>:
 80076e4:	4801      	ldr	r0, [pc, #4]	; (80076ec <__malloc_lock+0x8>)
 80076e6:	f000 b811 	b.w	800770c <__retarget_lock_acquire_recursive>
 80076ea:	bf00      	nop
 80076ec:	20000334 	.word	0x20000334

080076f0 <__malloc_unlock>:
 80076f0:	4801      	ldr	r0, [pc, #4]	; (80076f8 <__malloc_unlock+0x8>)
 80076f2:	f000 b80c 	b.w	800770e <__retarget_lock_release_recursive>
 80076f6:	bf00      	nop
 80076f8:	20000334 	.word	0x20000334

080076fc <_malloc_usable_size_r>:
 80076fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007700:	1f18      	subs	r0, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	bfbc      	itt	lt
 8007706:	580b      	ldrlt	r3, [r1, r0]
 8007708:	18c0      	addlt	r0, r0, r3
 800770a:	4770      	bx	lr

0800770c <__retarget_lock_acquire_recursive>:
 800770c:	4770      	bx	lr

0800770e <__retarget_lock_release_recursive>:
 800770e:	4770      	bx	lr

08007710 <sin>:
 8007710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007712:	ec53 2b10 	vmov	r2, r3, d0
 8007716:	4826      	ldr	r0, [pc, #152]	; (80077b0 <sin+0xa0>)
 8007718:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800771c:	4281      	cmp	r1, r0
 800771e:	dc07      	bgt.n	8007730 <sin+0x20>
 8007720:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80077a8 <sin+0x98>
 8007724:	2000      	movs	r0, #0
 8007726:	f000 fe5b 	bl	80083e0 <__kernel_sin>
 800772a:	ec51 0b10 	vmov	r0, r1, d0
 800772e:	e007      	b.n	8007740 <sin+0x30>
 8007730:	4820      	ldr	r0, [pc, #128]	; (80077b4 <sin+0xa4>)
 8007732:	4281      	cmp	r1, r0
 8007734:	dd09      	ble.n	800774a <sin+0x3a>
 8007736:	ee10 0a10 	vmov	r0, s0
 800773a:	4619      	mov	r1, r3
 800773c:	f7f8 fed6 	bl	80004ec <__aeabi_dsub>
 8007740:	ec41 0b10 	vmov	d0, r0, r1
 8007744:	b005      	add	sp, #20
 8007746:	f85d fb04 	ldr.w	pc, [sp], #4
 800774a:	4668      	mov	r0, sp
 800774c:	f000 f834 	bl	80077b8 <__ieee754_rem_pio2>
 8007750:	f000 0003 	and.w	r0, r0, #3
 8007754:	2801      	cmp	r0, #1
 8007756:	d008      	beq.n	800776a <sin+0x5a>
 8007758:	2802      	cmp	r0, #2
 800775a:	d00d      	beq.n	8007778 <sin+0x68>
 800775c:	b9d0      	cbnz	r0, 8007794 <sin+0x84>
 800775e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007762:	ed9d 0b00 	vldr	d0, [sp]
 8007766:	2001      	movs	r0, #1
 8007768:	e7dd      	b.n	8007726 <sin+0x16>
 800776a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800776e:	ed9d 0b00 	vldr	d0, [sp]
 8007772:	f000 fa2d 	bl	8007bd0 <__kernel_cos>
 8007776:	e7d8      	b.n	800772a <sin+0x1a>
 8007778:	ed9d 1b02 	vldr	d1, [sp, #8]
 800777c:	ed9d 0b00 	vldr	d0, [sp]
 8007780:	2001      	movs	r0, #1
 8007782:	f000 fe2d 	bl	80083e0 <__kernel_sin>
 8007786:	ec53 2b10 	vmov	r2, r3, d0
 800778a:	ee10 0a10 	vmov	r0, s0
 800778e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007792:	e7d5      	b.n	8007740 <sin+0x30>
 8007794:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007798:	ed9d 0b00 	vldr	d0, [sp]
 800779c:	f000 fa18 	bl	8007bd0 <__kernel_cos>
 80077a0:	e7f1      	b.n	8007786 <sin+0x76>
 80077a2:	bf00      	nop
 80077a4:	f3af 8000 	nop.w
	...
 80077b0:	3fe921fb 	.word	0x3fe921fb
 80077b4:	7fefffff 	.word	0x7fefffff

080077b8 <__ieee754_rem_pio2>:
 80077b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	ed2d 8b02 	vpush	{d8}
 80077c0:	ec55 4b10 	vmov	r4, r5, d0
 80077c4:	4bca      	ldr	r3, [pc, #808]	; (8007af0 <__ieee754_rem_pio2+0x338>)
 80077c6:	b08b      	sub	sp, #44	; 0x2c
 80077c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80077cc:	4598      	cmp	r8, r3
 80077ce:	4682      	mov	sl, r0
 80077d0:	9502      	str	r5, [sp, #8]
 80077d2:	dc08      	bgt.n	80077e6 <__ieee754_rem_pio2+0x2e>
 80077d4:	2200      	movs	r2, #0
 80077d6:	2300      	movs	r3, #0
 80077d8:	ed80 0b00 	vstr	d0, [r0]
 80077dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80077e0:	f04f 0b00 	mov.w	fp, #0
 80077e4:	e028      	b.n	8007838 <__ieee754_rem_pio2+0x80>
 80077e6:	4bc3      	ldr	r3, [pc, #780]	; (8007af4 <__ieee754_rem_pio2+0x33c>)
 80077e8:	4598      	cmp	r8, r3
 80077ea:	dc78      	bgt.n	80078de <__ieee754_rem_pio2+0x126>
 80077ec:	9b02      	ldr	r3, [sp, #8]
 80077ee:	4ec2      	ldr	r6, [pc, #776]	; (8007af8 <__ieee754_rem_pio2+0x340>)
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	ee10 0a10 	vmov	r0, s0
 80077f6:	a3b0      	add	r3, pc, #704	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x300>)
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	4629      	mov	r1, r5
 80077fe:	dd39      	ble.n	8007874 <__ieee754_rem_pio2+0xbc>
 8007800:	f7f8 fe74 	bl	80004ec <__aeabi_dsub>
 8007804:	45b0      	cmp	r8, r6
 8007806:	4604      	mov	r4, r0
 8007808:	460d      	mov	r5, r1
 800780a:	d01b      	beq.n	8007844 <__ieee754_rem_pio2+0x8c>
 800780c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x308>)
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	f7f8 fe6b 	bl	80004ec <__aeabi_dsub>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	e9ca 2300 	strd	r2, r3, [sl]
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f8 fe63 	bl	80004ec <__aeabi_dsub>
 8007826:	a3a6      	add	r3, pc, #664	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x308>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fe5e 	bl	80004ec <__aeabi_dsub>
 8007830:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007834:	f04f 0b01 	mov.w	fp, #1
 8007838:	4658      	mov	r0, fp
 800783a:	b00b      	add	sp, #44	; 0x2c
 800783c:	ecbd 8b02 	vpop	{d8}
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x310>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f7f8 fe4f 	bl	80004ec <__aeabi_dsub>
 800784e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ad0 <__ieee754_rem_pio2+0x318>)
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	4604      	mov	r4, r0
 8007856:	460d      	mov	r5, r1
 8007858:	f7f8 fe48 	bl	80004ec <__aeabi_dsub>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	e9ca 2300 	strd	r2, r3, [sl]
 8007864:	4620      	mov	r0, r4
 8007866:	4629      	mov	r1, r5
 8007868:	f7f8 fe40 	bl	80004ec <__aeabi_dsub>
 800786c:	a398      	add	r3, pc, #608	; (adr r3, 8007ad0 <__ieee754_rem_pio2+0x318>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	e7db      	b.n	800782c <__ieee754_rem_pio2+0x74>
 8007874:	f7f8 fe3c 	bl	80004f0 <__adddf3>
 8007878:	45b0      	cmp	r8, r6
 800787a:	4604      	mov	r4, r0
 800787c:	460d      	mov	r5, r1
 800787e:	d016      	beq.n	80078ae <__ieee754_rem_pio2+0xf6>
 8007880:	a38f      	add	r3, pc, #572	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x308>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f8 fe33 	bl	80004f0 <__adddf3>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	e9ca 2300 	strd	r2, r3, [sl]
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f8 fe29 	bl	80004ec <__aeabi_dsub>
 800789a:	a389      	add	r3, pc, #548	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x308>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 fe26 	bl	80004f0 <__adddf3>
 80078a4:	f04f 3bff 	mov.w	fp, #4294967295
 80078a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80078ac:	e7c4      	b.n	8007838 <__ieee754_rem_pio2+0x80>
 80078ae:	a386      	add	r3, pc, #536	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x310>)
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	f7f8 fe1c 	bl	80004f0 <__adddf3>
 80078b8:	a385      	add	r3, pc, #532	; (adr r3, 8007ad0 <__ieee754_rem_pio2+0x318>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	4604      	mov	r4, r0
 80078c0:	460d      	mov	r5, r1
 80078c2:	f7f8 fe15 	bl	80004f0 <__adddf3>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	e9ca 2300 	strd	r2, r3, [sl]
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f8 fe0b 	bl	80004ec <__aeabi_dsub>
 80078d6:	a37e      	add	r3, pc, #504	; (adr r3, 8007ad0 <__ieee754_rem_pio2+0x318>)
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	e7e0      	b.n	80078a0 <__ieee754_rem_pio2+0xe8>
 80078de:	4b87      	ldr	r3, [pc, #540]	; (8007afc <__ieee754_rem_pio2+0x344>)
 80078e0:	4598      	cmp	r8, r3
 80078e2:	f300 80d9 	bgt.w	8007a98 <__ieee754_rem_pio2+0x2e0>
 80078e6:	f000 fe39 	bl	800855c <fabs>
 80078ea:	ec55 4b10 	vmov	r4, r5, d0
 80078ee:	ee10 0a10 	vmov	r0, s0
 80078f2:	a379      	add	r3, pc, #484	; (adr r3, 8007ad8 <__ieee754_rem_pio2+0x320>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f8 fcc9 	bl	8000290 <__aeabi_dmul>
 80078fe:	4b80      	ldr	r3, [pc, #512]	; (8007b00 <__ieee754_rem_pio2+0x348>)
 8007900:	2200      	movs	r2, #0
 8007902:	f7f8 fdf5 	bl	80004f0 <__adddf3>
 8007906:	f7f9 f831 	bl	800096c <__aeabi_d2iz>
 800790a:	4683      	mov	fp, r0
 800790c:	f7f8 ff3c 	bl	8000788 <__aeabi_i2d>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	ec43 2b18 	vmov	d8, r2, r3
 8007918:	a367      	add	r3, pc, #412	; (adr r3, 8007ab8 <__ieee754_rem_pio2+0x300>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fcb7 	bl	8000290 <__aeabi_dmul>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4620      	mov	r0, r4
 8007928:	4629      	mov	r1, r5
 800792a:	f7f8 fddf 	bl	80004ec <__aeabi_dsub>
 800792e:	a364      	add	r3, pc, #400	; (adr r3, 8007ac0 <__ieee754_rem_pio2+0x308>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	4606      	mov	r6, r0
 8007936:	460f      	mov	r7, r1
 8007938:	ec51 0b18 	vmov	r0, r1, d8
 800793c:	f7f8 fca8 	bl	8000290 <__aeabi_dmul>
 8007940:	f1bb 0f1f 	cmp.w	fp, #31
 8007944:	4604      	mov	r4, r0
 8007946:	460d      	mov	r5, r1
 8007948:	dc0d      	bgt.n	8007966 <__ieee754_rem_pio2+0x1ae>
 800794a:	4b6e      	ldr	r3, [pc, #440]	; (8007b04 <__ieee754_rem_pio2+0x34c>)
 800794c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007954:	4543      	cmp	r3, r8
 8007956:	d006      	beq.n	8007966 <__ieee754_rem_pio2+0x1ae>
 8007958:	4622      	mov	r2, r4
 800795a:	462b      	mov	r3, r5
 800795c:	4630      	mov	r0, r6
 800795e:	4639      	mov	r1, r7
 8007960:	f7f8 fdc4 	bl	80004ec <__aeabi_dsub>
 8007964:	e00f      	b.n	8007986 <__ieee754_rem_pio2+0x1ce>
 8007966:	462b      	mov	r3, r5
 8007968:	4622      	mov	r2, r4
 800796a:	4630      	mov	r0, r6
 800796c:	4639      	mov	r1, r7
 800796e:	f7f8 fdbd 	bl	80004ec <__aeabi_dsub>
 8007972:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007976:	9303      	str	r3, [sp, #12]
 8007978:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800797c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007980:	f1b8 0f10 	cmp.w	r8, #16
 8007984:	dc02      	bgt.n	800798c <__ieee754_rem_pio2+0x1d4>
 8007986:	e9ca 0100 	strd	r0, r1, [sl]
 800798a:	e039      	b.n	8007a00 <__ieee754_rem_pio2+0x248>
 800798c:	a34e      	add	r3, pc, #312	; (adr r3, 8007ac8 <__ieee754_rem_pio2+0x310>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	ec51 0b18 	vmov	r0, r1, d8
 8007996:	f7f8 fc7b 	bl	8000290 <__aeabi_dmul>
 800799a:	4604      	mov	r4, r0
 800799c:	460d      	mov	r5, r1
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4630      	mov	r0, r6
 80079a4:	4639      	mov	r1, r7
 80079a6:	f7f8 fda1 	bl	80004ec <__aeabi_dsub>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4680      	mov	r8, r0
 80079b0:	4689      	mov	r9, r1
 80079b2:	4630      	mov	r0, r6
 80079b4:	4639      	mov	r1, r7
 80079b6:	f7f8 fd99 	bl	80004ec <__aeabi_dsub>
 80079ba:	4622      	mov	r2, r4
 80079bc:	462b      	mov	r3, r5
 80079be:	f7f8 fd95 	bl	80004ec <__aeabi_dsub>
 80079c2:	a343      	add	r3, pc, #268	; (adr r3, 8007ad0 <__ieee754_rem_pio2+0x318>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	4604      	mov	r4, r0
 80079ca:	460d      	mov	r5, r1
 80079cc:	ec51 0b18 	vmov	r0, r1, d8
 80079d0:	f7f8 fc5e 	bl	8000290 <__aeabi_dmul>
 80079d4:	4622      	mov	r2, r4
 80079d6:	462b      	mov	r3, r5
 80079d8:	f7f8 fd88 	bl	80004ec <__aeabi_dsub>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4604      	mov	r4, r0
 80079e2:	460d      	mov	r5, r1
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	f7f8 fd80 	bl	80004ec <__aeabi_dsub>
 80079ec:	9a03      	ldr	r2, [sp, #12]
 80079ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b31      	cmp	r3, #49	; 0x31
 80079f6:	dc24      	bgt.n	8007a42 <__ieee754_rem_pio2+0x28a>
 80079f8:	e9ca 0100 	strd	r0, r1, [sl]
 80079fc:	4646      	mov	r6, r8
 80079fe:	464f      	mov	r7, r9
 8007a00:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a04:	4630      	mov	r0, r6
 8007a06:	4642      	mov	r2, r8
 8007a08:	464b      	mov	r3, r9
 8007a0a:	4639      	mov	r1, r7
 8007a0c:	f7f8 fd6e 	bl	80004ec <__aeabi_dsub>
 8007a10:	462b      	mov	r3, r5
 8007a12:	4622      	mov	r2, r4
 8007a14:	f7f8 fd6a 	bl	80004ec <__aeabi_dsub>
 8007a18:	9b02      	ldr	r3, [sp, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007a20:	f6bf af0a 	bge.w	8007838 <__ieee754_rem_pio2+0x80>
 8007a24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a28:	f8ca 3004 	str.w	r3, [sl, #4]
 8007a2c:	f8ca 8000 	str.w	r8, [sl]
 8007a30:	f8ca 0008 	str.w	r0, [sl, #8]
 8007a34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a38:	f8ca 300c 	str.w	r3, [sl, #12]
 8007a3c:	f1cb 0b00 	rsb	fp, fp, #0
 8007a40:	e6fa      	b.n	8007838 <__ieee754_rem_pio2+0x80>
 8007a42:	a327      	add	r3, pc, #156	; (adr r3, 8007ae0 <__ieee754_rem_pio2+0x328>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	ec51 0b18 	vmov	r0, r1, d8
 8007a4c:	f7f8 fc20 	bl	8000290 <__aeabi_dmul>
 8007a50:	4604      	mov	r4, r0
 8007a52:	460d      	mov	r5, r1
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4640      	mov	r0, r8
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	f7f8 fd46 	bl	80004ec <__aeabi_dsub>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4606      	mov	r6, r0
 8007a66:	460f      	mov	r7, r1
 8007a68:	4640      	mov	r0, r8
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	f7f8 fd3e 	bl	80004ec <__aeabi_dsub>
 8007a70:	4622      	mov	r2, r4
 8007a72:	462b      	mov	r3, r5
 8007a74:	f7f8 fd3a 	bl	80004ec <__aeabi_dsub>
 8007a78:	a31b      	add	r3, pc, #108	; (adr r3, 8007ae8 <__ieee754_rem_pio2+0x330>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	4604      	mov	r4, r0
 8007a80:	460d      	mov	r5, r1
 8007a82:	ec51 0b18 	vmov	r0, r1, d8
 8007a86:	f7f8 fc03 	bl	8000290 <__aeabi_dmul>
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	f7f8 fd2d 	bl	80004ec <__aeabi_dsub>
 8007a92:	4604      	mov	r4, r0
 8007a94:	460d      	mov	r5, r1
 8007a96:	e75f      	b.n	8007958 <__ieee754_rem_pio2+0x1a0>
 8007a98:	4b1b      	ldr	r3, [pc, #108]	; (8007b08 <__ieee754_rem_pio2+0x350>)
 8007a9a:	4598      	cmp	r8, r3
 8007a9c:	dd36      	ble.n	8007b0c <__ieee754_rem_pio2+0x354>
 8007a9e:	ee10 2a10 	vmov	r2, s0
 8007aa2:	462b      	mov	r3, r5
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	f7f8 fd20 	bl	80004ec <__aeabi_dsub>
 8007aac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ab0:	e9ca 0100 	strd	r0, r1, [sl]
 8007ab4:	e694      	b.n	80077e0 <__ieee754_rem_pio2+0x28>
 8007ab6:	bf00      	nop
 8007ab8:	54400000 	.word	0x54400000
 8007abc:	3ff921fb 	.word	0x3ff921fb
 8007ac0:	1a626331 	.word	0x1a626331
 8007ac4:	3dd0b461 	.word	0x3dd0b461
 8007ac8:	1a600000 	.word	0x1a600000
 8007acc:	3dd0b461 	.word	0x3dd0b461
 8007ad0:	2e037073 	.word	0x2e037073
 8007ad4:	3ba3198a 	.word	0x3ba3198a
 8007ad8:	6dc9c883 	.word	0x6dc9c883
 8007adc:	3fe45f30 	.word	0x3fe45f30
 8007ae0:	2e000000 	.word	0x2e000000
 8007ae4:	3ba3198a 	.word	0x3ba3198a
 8007ae8:	252049c1 	.word	0x252049c1
 8007aec:	397b839a 	.word	0x397b839a
 8007af0:	3fe921fb 	.word	0x3fe921fb
 8007af4:	4002d97b 	.word	0x4002d97b
 8007af8:	3ff921fb 	.word	0x3ff921fb
 8007afc:	413921fb 	.word	0x413921fb
 8007b00:	3fe00000 	.word	0x3fe00000
 8007b04:	08008a9c 	.word	0x08008a9c
 8007b08:	7fefffff 	.word	0x7fefffff
 8007b0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007b10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007b14:	ee10 0a10 	vmov	r0, s0
 8007b18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007b1c:	ee10 6a10 	vmov	r6, s0
 8007b20:	460f      	mov	r7, r1
 8007b22:	f7f8 ff23 	bl	800096c <__aeabi_d2iz>
 8007b26:	f7f8 fe2f 	bl	8000788 <__aeabi_i2d>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4630      	mov	r0, r6
 8007b30:	4639      	mov	r1, r7
 8007b32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b36:	f7f8 fcd9 	bl	80004ec <__aeabi_dsub>
 8007b3a:	4b22      	ldr	r3, [pc, #136]	; (8007bc4 <__ieee754_rem_pio2+0x40c>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f7f8 fba7 	bl	8000290 <__aeabi_dmul>
 8007b42:	460f      	mov	r7, r1
 8007b44:	4606      	mov	r6, r0
 8007b46:	f7f8 ff11 	bl	800096c <__aeabi_d2iz>
 8007b4a:	f7f8 fe1d 	bl	8000788 <__aeabi_i2d>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4630      	mov	r0, r6
 8007b54:	4639      	mov	r1, r7
 8007b56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b5a:	f7f8 fcc7 	bl	80004ec <__aeabi_dsub>
 8007b5e:	4b19      	ldr	r3, [pc, #100]	; (8007bc4 <__ieee754_rem_pio2+0x40c>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	f7f8 fb95 	bl	8000290 <__aeabi_dmul>
 8007b66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b6a:	ad04      	add	r5, sp, #16
 8007b6c:	f04f 0803 	mov.w	r8, #3
 8007b70:	46a9      	mov	r9, r5
 8007b72:	2600      	movs	r6, #0
 8007b74:	2700      	movs	r7, #0
 8007b76:	4632      	mov	r2, r6
 8007b78:	463b      	mov	r3, r7
 8007b7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007b7e:	46c3      	mov	fp, r8
 8007b80:	3d08      	subs	r5, #8
 8007b82:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b86:	f7f8 febf 	bl	8000908 <__aeabi_dcmpeq>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d1f3      	bne.n	8007b76 <__ieee754_rem_pio2+0x3be>
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <__ieee754_rem_pio2+0x410>)
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	2302      	movs	r3, #2
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	4622      	mov	r2, r4
 8007b98:	465b      	mov	r3, fp
 8007b9a:	4651      	mov	r1, sl
 8007b9c:	4648      	mov	r0, r9
 8007b9e:	f000 f8df 	bl	8007d60 <__kernel_rem_pio2>
 8007ba2:	9b02      	ldr	r3, [sp, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	4683      	mov	fp, r0
 8007ba8:	f6bf ae46 	bge.w	8007838 <__ieee754_rem_pio2+0x80>
 8007bac:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007bb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bb4:	f8ca 3004 	str.w	r3, [sl, #4]
 8007bb8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007bbc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007bc0:	e73a      	b.n	8007a38 <__ieee754_rem_pio2+0x280>
 8007bc2:	bf00      	nop
 8007bc4:	41700000 	.word	0x41700000
 8007bc8:	08008b1c 	.word	0x08008b1c
 8007bcc:	00000000 	.word	0x00000000

08007bd0 <__kernel_cos>:
 8007bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	ec57 6b10 	vmov	r6, r7, d0
 8007bd8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007bdc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007be0:	ed8d 1b00 	vstr	d1, [sp]
 8007be4:	da07      	bge.n	8007bf6 <__kernel_cos+0x26>
 8007be6:	ee10 0a10 	vmov	r0, s0
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 febe 	bl	800096c <__aeabi_d2iz>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f000 8088 	beq.w	8007d06 <__kernel_cos+0x136>
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	4639      	mov	r1, r7
 8007bfe:	f7f8 fb47 	bl	8000290 <__aeabi_dmul>
 8007c02:	4b51      	ldr	r3, [pc, #324]	; (8007d48 <__kernel_cos+0x178>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	4604      	mov	r4, r0
 8007c08:	460d      	mov	r5, r1
 8007c0a:	f7f8 fb41 	bl	8000290 <__aeabi_dmul>
 8007c0e:	a340      	add	r3, pc, #256	; (adr r3, 8007d10 <__kernel_cos+0x140>)
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	4682      	mov	sl, r0
 8007c16:	468b      	mov	fp, r1
 8007c18:	4620      	mov	r0, r4
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	f7f8 fb38 	bl	8000290 <__aeabi_dmul>
 8007c20:	a33d      	add	r3, pc, #244	; (adr r3, 8007d18 <__kernel_cos+0x148>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f7f8 fc63 	bl	80004f0 <__adddf3>
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	f7f8 fb2f 	bl	8000290 <__aeabi_dmul>
 8007c32:	a33b      	add	r3, pc, #236	; (adr r3, 8007d20 <__kernel_cos+0x150>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f7f8 fc58 	bl	80004ec <__aeabi_dsub>
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	462b      	mov	r3, r5
 8007c40:	f7f8 fb26 	bl	8000290 <__aeabi_dmul>
 8007c44:	a338      	add	r3, pc, #224	; (adr r3, 8007d28 <__kernel_cos+0x158>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 fc51 	bl	80004f0 <__adddf3>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	462b      	mov	r3, r5
 8007c52:	f7f8 fb1d 	bl	8000290 <__aeabi_dmul>
 8007c56:	a336      	add	r3, pc, #216	; (adr r3, 8007d30 <__kernel_cos+0x160>)
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	f7f8 fc46 	bl	80004ec <__aeabi_dsub>
 8007c60:	4622      	mov	r2, r4
 8007c62:	462b      	mov	r3, r5
 8007c64:	f7f8 fb14 	bl	8000290 <__aeabi_dmul>
 8007c68:	a333      	add	r3, pc, #204	; (adr r3, 8007d38 <__kernel_cos+0x168>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fc3f 	bl	80004f0 <__adddf3>
 8007c72:	4622      	mov	r2, r4
 8007c74:	462b      	mov	r3, r5
 8007c76:	f7f8 fb0b 	bl	8000290 <__aeabi_dmul>
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	462b      	mov	r3, r5
 8007c7e:	f7f8 fb07 	bl	8000290 <__aeabi_dmul>
 8007c82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c86:	4604      	mov	r4, r0
 8007c88:	460d      	mov	r5, r1
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	f7f8 faff 	bl	8000290 <__aeabi_dmul>
 8007c92:	460b      	mov	r3, r1
 8007c94:	4602      	mov	r2, r0
 8007c96:	4629      	mov	r1, r5
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f7f8 fc27 	bl	80004ec <__aeabi_dsub>
 8007c9e:	4b2b      	ldr	r3, [pc, #172]	; (8007d4c <__kernel_cos+0x17c>)
 8007ca0:	4598      	cmp	r8, r3
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	dc10      	bgt.n	8007cca <__kernel_cos+0xfa>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4650      	mov	r0, sl
 8007cae:	4659      	mov	r1, fp
 8007cb0:	f7f8 fc1c 	bl	80004ec <__aeabi_dsub>
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4926      	ldr	r1, [pc, #152]	; (8007d50 <__kernel_cos+0x180>)
 8007cb8:	4602      	mov	r2, r0
 8007cba:	2000      	movs	r0, #0
 8007cbc:	f7f8 fc16 	bl	80004ec <__aeabi_dsub>
 8007cc0:	ec41 0b10 	vmov	d0, r0, r1
 8007cc4:	b003      	add	sp, #12
 8007cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cca:	4b22      	ldr	r3, [pc, #136]	; (8007d54 <__kernel_cos+0x184>)
 8007ccc:	4920      	ldr	r1, [pc, #128]	; (8007d50 <__kernel_cos+0x180>)
 8007cce:	4598      	cmp	r8, r3
 8007cd0:	bfcc      	ite	gt
 8007cd2:	4d21      	ldrgt	r5, [pc, #132]	; (8007d58 <__kernel_cos+0x188>)
 8007cd4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007cd8:	2400      	movs	r4, #0
 8007cda:	4622      	mov	r2, r4
 8007cdc:	462b      	mov	r3, r5
 8007cde:	2000      	movs	r0, #0
 8007ce0:	f7f8 fc04 	bl	80004ec <__aeabi_dsub>
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	4689      	mov	r9, r1
 8007cea:	462b      	mov	r3, r5
 8007cec:	4650      	mov	r0, sl
 8007cee:	4659      	mov	r1, fp
 8007cf0:	f7f8 fbfc 	bl	80004ec <__aeabi_dsub>
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	f7f8 fbf8 	bl	80004ec <__aeabi_dsub>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4640      	mov	r0, r8
 8007d02:	4649      	mov	r1, r9
 8007d04:	e7da      	b.n	8007cbc <__kernel_cos+0xec>
 8007d06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007d40 <__kernel_cos+0x170>
 8007d0a:	e7db      	b.n	8007cc4 <__kernel_cos+0xf4>
 8007d0c:	f3af 8000 	nop.w
 8007d10:	be8838d4 	.word	0xbe8838d4
 8007d14:	bda8fae9 	.word	0xbda8fae9
 8007d18:	bdb4b1c4 	.word	0xbdb4b1c4
 8007d1c:	3e21ee9e 	.word	0x3e21ee9e
 8007d20:	809c52ad 	.word	0x809c52ad
 8007d24:	3e927e4f 	.word	0x3e927e4f
 8007d28:	19cb1590 	.word	0x19cb1590
 8007d2c:	3efa01a0 	.word	0x3efa01a0
 8007d30:	16c15177 	.word	0x16c15177
 8007d34:	3f56c16c 	.word	0x3f56c16c
 8007d38:	5555554c 	.word	0x5555554c
 8007d3c:	3fa55555 	.word	0x3fa55555
 8007d40:	00000000 	.word	0x00000000
 8007d44:	3ff00000 	.word	0x3ff00000
 8007d48:	3fe00000 	.word	0x3fe00000
 8007d4c:	3fd33332 	.word	0x3fd33332
 8007d50:	3ff00000 	.word	0x3ff00000
 8007d54:	3fe90000 	.word	0x3fe90000
 8007d58:	3fd20000 	.word	0x3fd20000
 8007d5c:	00000000 	.word	0x00000000

08007d60 <__kernel_rem_pio2>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	ed2d 8b02 	vpush	{d8}
 8007d68:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007d6c:	f112 0f14 	cmn.w	r2, #20
 8007d70:	9308      	str	r3, [sp, #32]
 8007d72:	9101      	str	r1, [sp, #4]
 8007d74:	4bc6      	ldr	r3, [pc, #792]	; (8008090 <__kernel_rem_pio2+0x330>)
 8007d76:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007d78:	9009      	str	r0, [sp, #36]	; 0x24
 8007d7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	9b08      	ldr	r3, [sp, #32]
 8007d82:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d86:	bfa8      	it	ge
 8007d88:	1ed4      	subge	r4, r2, #3
 8007d8a:	9306      	str	r3, [sp, #24]
 8007d8c:	bfb2      	itee	lt
 8007d8e:	2400      	movlt	r4, #0
 8007d90:	2318      	movge	r3, #24
 8007d92:	fb94 f4f3 	sdivge	r4, r4, r3
 8007d96:	f06f 0317 	mvn.w	r3, #23
 8007d9a:	fb04 3303 	mla	r3, r4, r3, r3
 8007d9e:	eb03 0a02 	add.w	sl, r3, r2
 8007da2:	9b04      	ldr	r3, [sp, #16]
 8007da4:	9a06      	ldr	r2, [sp, #24]
 8007da6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008080 <__kernel_rem_pio2+0x320>
 8007daa:	eb03 0802 	add.w	r8, r3, r2
 8007dae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007db0:	1aa7      	subs	r7, r4, r2
 8007db2:	ae20      	add	r6, sp, #128	; 0x80
 8007db4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007db8:	2500      	movs	r5, #0
 8007dba:	4545      	cmp	r5, r8
 8007dbc:	dd18      	ble.n	8007df0 <__kernel_rem_pio2+0x90>
 8007dbe:	9b08      	ldr	r3, [sp, #32]
 8007dc0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007dc4:	aa20      	add	r2, sp, #128	; 0x80
 8007dc6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008080 <__kernel_rem_pio2+0x320>
 8007dca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007dce:	f1c3 0301 	rsb	r3, r3, #1
 8007dd2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007dd6:	9307      	str	r3, [sp, #28]
 8007dd8:	9b07      	ldr	r3, [sp, #28]
 8007dda:	9a04      	ldr	r2, [sp, #16]
 8007ddc:	4443      	add	r3, r8
 8007dde:	429a      	cmp	r2, r3
 8007de0:	db2f      	blt.n	8007e42 <__kernel_rem_pio2+0xe2>
 8007de2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007de6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007dea:	462f      	mov	r7, r5
 8007dec:	2600      	movs	r6, #0
 8007dee:	e01b      	b.n	8007e28 <__kernel_rem_pio2+0xc8>
 8007df0:	42ef      	cmn	r7, r5
 8007df2:	d407      	bmi.n	8007e04 <__kernel_rem_pio2+0xa4>
 8007df4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007df8:	f7f8 fcc6 	bl	8000788 <__aeabi_i2d>
 8007dfc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007e00:	3501      	adds	r5, #1
 8007e02:	e7da      	b.n	8007dba <__kernel_rem_pio2+0x5a>
 8007e04:	ec51 0b18 	vmov	r0, r1, d8
 8007e08:	e7f8      	b.n	8007dfc <__kernel_rem_pio2+0x9c>
 8007e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e0e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007e12:	f7f8 fa3d 	bl	8000290 <__aeabi_dmul>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1e:	f7f8 fb67 	bl	80004f0 <__adddf3>
 8007e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e26:	3601      	adds	r6, #1
 8007e28:	9b06      	ldr	r3, [sp, #24]
 8007e2a:	429e      	cmp	r6, r3
 8007e2c:	f1a7 0708 	sub.w	r7, r7, #8
 8007e30:	ddeb      	ble.n	8007e0a <__kernel_rem_pio2+0xaa>
 8007e32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e36:	3508      	adds	r5, #8
 8007e38:	ecab 7b02 	vstmia	fp!, {d7}
 8007e3c:	f108 0801 	add.w	r8, r8, #1
 8007e40:	e7ca      	b.n	8007dd8 <__kernel_rem_pio2+0x78>
 8007e42:	9b04      	ldr	r3, [sp, #16]
 8007e44:	aa0c      	add	r2, sp, #48	; 0x30
 8007e46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e4c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007e4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e52:	9c04      	ldr	r4, [sp, #16]
 8007e54:	930a      	str	r3, [sp, #40]	; 0x28
 8007e56:	ab98      	add	r3, sp, #608	; 0x260
 8007e58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e5c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007e60:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007e64:	f8cd b008 	str.w	fp, [sp, #8]
 8007e68:	4625      	mov	r5, r4
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	dc78      	bgt.n	8007f60 <__kernel_rem_pio2+0x200>
 8007e6e:	ec47 6b10 	vmov	d0, r6, r7
 8007e72:	4650      	mov	r0, sl
 8007e74:	f000 fbfc 	bl	8008670 <scalbn>
 8007e78:	ec57 6b10 	vmov	r6, r7, d0
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007e82:	ee10 0a10 	vmov	r0, s0
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fa02 	bl	8000290 <__aeabi_dmul>
 8007e8c:	ec41 0b10 	vmov	d0, r0, r1
 8007e90:	f000 fb6e 	bl	8008570 <floor>
 8007e94:	4b7f      	ldr	r3, [pc, #508]	; (8008094 <__kernel_rem_pio2+0x334>)
 8007e96:	ec51 0b10 	vmov	r0, r1, d0
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f7f8 f9f8 	bl	8000290 <__aeabi_dmul>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	f7f8 fb20 	bl	80004ec <__aeabi_dsub>
 8007eac:	460f      	mov	r7, r1
 8007eae:	4606      	mov	r6, r0
 8007eb0:	f7f8 fd5c 	bl	800096c <__aeabi_d2iz>
 8007eb4:	9007      	str	r0, [sp, #28]
 8007eb6:	f7f8 fc67 	bl	8000788 <__aeabi_i2d>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	f7f8 fb13 	bl	80004ec <__aeabi_dsub>
 8007ec6:	f1ba 0f00 	cmp.w	sl, #0
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460f      	mov	r7, r1
 8007ece:	dd70      	ble.n	8007fb2 <__kernel_rem_pio2+0x252>
 8007ed0:	1e62      	subs	r2, r4, #1
 8007ed2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ed4:	9d07      	ldr	r5, [sp, #28]
 8007ed6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007eda:	f1ca 0118 	rsb	r1, sl, #24
 8007ede:	fa40 f301 	asr.w	r3, r0, r1
 8007ee2:	441d      	add	r5, r3
 8007ee4:	408b      	lsls	r3, r1
 8007ee6:	1ac0      	subs	r0, r0, r3
 8007ee8:	ab0c      	add	r3, sp, #48	; 0x30
 8007eea:	9507      	str	r5, [sp, #28]
 8007eec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007ef0:	f1ca 0317 	rsb	r3, sl, #23
 8007ef4:	fa40 f303 	asr.w	r3, r0, r3
 8007ef8:	9302      	str	r3, [sp, #8]
 8007efa:	9b02      	ldr	r3, [sp, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd66      	ble.n	8007fce <__kernel_rem_pio2+0x26e>
 8007f00:	9b07      	ldr	r3, [sp, #28]
 8007f02:	2200      	movs	r2, #0
 8007f04:	3301      	adds	r3, #1
 8007f06:	9307      	str	r3, [sp, #28]
 8007f08:	4615      	mov	r5, r2
 8007f0a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007f0e:	4294      	cmp	r4, r2
 8007f10:	f300 8099 	bgt.w	8008046 <__kernel_rem_pio2+0x2e6>
 8007f14:	f1ba 0f00 	cmp.w	sl, #0
 8007f18:	dd07      	ble.n	8007f2a <__kernel_rem_pio2+0x1ca>
 8007f1a:	f1ba 0f01 	cmp.w	sl, #1
 8007f1e:	f000 80a5 	beq.w	800806c <__kernel_rem_pio2+0x30c>
 8007f22:	f1ba 0f02 	cmp.w	sl, #2
 8007f26:	f000 80c1 	beq.w	80080ac <__kernel_rem_pio2+0x34c>
 8007f2a:	9b02      	ldr	r3, [sp, #8]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d14e      	bne.n	8007fce <__kernel_rem_pio2+0x26e>
 8007f30:	4632      	mov	r2, r6
 8007f32:	463b      	mov	r3, r7
 8007f34:	4958      	ldr	r1, [pc, #352]	; (8008098 <__kernel_rem_pio2+0x338>)
 8007f36:	2000      	movs	r0, #0
 8007f38:	f7f8 fad8 	bl	80004ec <__aeabi_dsub>
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	460f      	mov	r7, r1
 8007f40:	2d00      	cmp	r5, #0
 8007f42:	d044      	beq.n	8007fce <__kernel_rem_pio2+0x26e>
 8007f44:	4650      	mov	r0, sl
 8007f46:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008088 <__kernel_rem_pio2+0x328>
 8007f4a:	f000 fb91 	bl	8008670 <scalbn>
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	ec53 2b10 	vmov	r2, r3, d0
 8007f56:	f7f8 fac9 	bl	80004ec <__aeabi_dsub>
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	460f      	mov	r7, r1
 8007f5e:	e036      	b.n	8007fce <__kernel_rem_pio2+0x26e>
 8007f60:	4b4e      	ldr	r3, [pc, #312]	; (800809c <__kernel_rem_pio2+0x33c>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	f7f8 f992 	bl	8000290 <__aeabi_dmul>
 8007f6c:	f7f8 fcfe 	bl	800096c <__aeabi_d2iz>
 8007f70:	f7f8 fc0a 	bl	8000788 <__aeabi_i2d>
 8007f74:	4b4a      	ldr	r3, [pc, #296]	; (80080a0 <__kernel_rem_pio2+0x340>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	4680      	mov	r8, r0
 8007f7a:	4689      	mov	r9, r1
 8007f7c:	f7f8 f988 	bl	8000290 <__aeabi_dmul>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	f7f8 fab0 	bl	80004ec <__aeabi_dsub>
 8007f8c:	f7f8 fcee 	bl	800096c <__aeabi_d2iz>
 8007f90:	9b02      	ldr	r3, [sp, #8]
 8007f92:	f843 0b04 	str.w	r0, [r3], #4
 8007f96:	3d01      	subs	r5, #1
 8007f98:	9302      	str	r3, [sp, #8]
 8007f9a:	ab70      	add	r3, sp, #448	; 0x1c0
 8007f9c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	4640      	mov	r0, r8
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	f7f8 faa2 	bl	80004f0 <__adddf3>
 8007fac:	4606      	mov	r6, r0
 8007fae:	460f      	mov	r7, r1
 8007fb0:	e75b      	b.n	8007e6a <__kernel_rem_pio2+0x10a>
 8007fb2:	d105      	bne.n	8007fc0 <__kernel_rem_pio2+0x260>
 8007fb4:	1e63      	subs	r3, r4, #1
 8007fb6:	aa0c      	add	r2, sp, #48	; 0x30
 8007fb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007fbc:	15c3      	asrs	r3, r0, #23
 8007fbe:	e79b      	b.n	8007ef8 <__kernel_rem_pio2+0x198>
 8007fc0:	4b38      	ldr	r3, [pc, #224]	; (80080a4 <__kernel_rem_pio2+0x344>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f7f8 fcbe 	bl	8000944 <__aeabi_dcmpge>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d139      	bne.n	8008040 <__kernel_rem_pio2+0x2e0>
 8007fcc:	9002      	str	r0, [sp, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	f7f8 fc97 	bl	8000908 <__aeabi_dcmpeq>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	f000 80b4 	beq.w	8008148 <__kernel_rem_pio2+0x3e8>
 8007fe0:	f104 3bff 	add.w	fp, r4, #4294967295
 8007fe4:	465b      	mov	r3, fp
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	9904      	ldr	r1, [sp, #16]
 8007fea:	428b      	cmp	r3, r1
 8007fec:	da65      	bge.n	80080ba <__kernel_rem_pio2+0x35a>
 8007fee:	2a00      	cmp	r2, #0
 8007ff0:	d07b      	beq.n	80080ea <__kernel_rem_pio2+0x38a>
 8007ff2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ff4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007ff8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80a0 	beq.w	8008142 <__kernel_rem_pio2+0x3e2>
 8008002:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008088 <__kernel_rem_pio2+0x328>
 8008006:	4650      	mov	r0, sl
 8008008:	f000 fb32 	bl	8008670 <scalbn>
 800800c:	4f23      	ldr	r7, [pc, #140]	; (800809c <__kernel_rem_pio2+0x33c>)
 800800e:	ec55 4b10 	vmov	r4, r5, d0
 8008012:	46d8      	mov	r8, fp
 8008014:	2600      	movs	r6, #0
 8008016:	f1b8 0f00 	cmp.w	r8, #0
 800801a:	f280 80cf 	bge.w	80081bc <__kernel_rem_pio2+0x45c>
 800801e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008080 <__kernel_rem_pio2+0x320>
 8008022:	465f      	mov	r7, fp
 8008024:	f04f 0800 	mov.w	r8, #0
 8008028:	2f00      	cmp	r7, #0
 800802a:	f2c0 80fd 	blt.w	8008228 <__kernel_rem_pio2+0x4c8>
 800802e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008030:	f8df a074 	ldr.w	sl, [pc, #116]	; 80080a8 <__kernel_rem_pio2+0x348>
 8008034:	ec55 4b18 	vmov	r4, r5, d8
 8008038:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800803c:	2600      	movs	r6, #0
 800803e:	e0e5      	b.n	800820c <__kernel_rem_pio2+0x4ac>
 8008040:	2302      	movs	r3, #2
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	e75c      	b.n	8007f00 <__kernel_rem_pio2+0x1a0>
 8008046:	f8db 3000 	ldr.w	r3, [fp]
 800804a:	b955      	cbnz	r5, 8008062 <__kernel_rem_pio2+0x302>
 800804c:	b123      	cbz	r3, 8008058 <__kernel_rem_pio2+0x2f8>
 800804e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008052:	f8cb 3000 	str.w	r3, [fp]
 8008056:	2301      	movs	r3, #1
 8008058:	3201      	adds	r2, #1
 800805a:	f10b 0b04 	add.w	fp, fp, #4
 800805e:	461d      	mov	r5, r3
 8008060:	e755      	b.n	8007f0e <__kernel_rem_pio2+0x1ae>
 8008062:	1acb      	subs	r3, r1, r3
 8008064:	f8cb 3000 	str.w	r3, [fp]
 8008068:	462b      	mov	r3, r5
 800806a:	e7f5      	b.n	8008058 <__kernel_rem_pio2+0x2f8>
 800806c:	1e62      	subs	r2, r4, #1
 800806e:	ab0c      	add	r3, sp, #48	; 0x30
 8008070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008074:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008078:	a90c      	add	r1, sp, #48	; 0x30
 800807a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800807e:	e754      	b.n	8007f2a <__kernel_rem_pio2+0x1ca>
	...
 800808c:	3ff00000 	.word	0x3ff00000
 8008090:	08008c68 	.word	0x08008c68
 8008094:	40200000 	.word	0x40200000
 8008098:	3ff00000 	.word	0x3ff00000
 800809c:	3e700000 	.word	0x3e700000
 80080a0:	41700000 	.word	0x41700000
 80080a4:	3fe00000 	.word	0x3fe00000
 80080a8:	08008c28 	.word	0x08008c28
 80080ac:	1e62      	subs	r2, r4, #1
 80080ae:	ab0c      	add	r3, sp, #48	; 0x30
 80080b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80080b8:	e7de      	b.n	8008078 <__kernel_rem_pio2+0x318>
 80080ba:	a90c      	add	r1, sp, #48	; 0x30
 80080bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	430a      	orrs	r2, r1
 80080c4:	e790      	b.n	8007fe8 <__kernel_rem_pio2+0x288>
 80080c6:	3301      	adds	r3, #1
 80080c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d0fa      	beq.n	80080c6 <__kernel_rem_pio2+0x366>
 80080d0:	9a08      	ldr	r2, [sp, #32]
 80080d2:	18e3      	adds	r3, r4, r3
 80080d4:	18a6      	adds	r6, r4, r2
 80080d6:	aa20      	add	r2, sp, #128	; 0x80
 80080d8:	1c65      	adds	r5, r4, #1
 80080da:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80080de:	9302      	str	r3, [sp, #8]
 80080e0:	9b02      	ldr	r3, [sp, #8]
 80080e2:	42ab      	cmp	r3, r5
 80080e4:	da04      	bge.n	80080f0 <__kernel_rem_pio2+0x390>
 80080e6:	461c      	mov	r4, r3
 80080e8:	e6b5      	b.n	8007e56 <__kernel_rem_pio2+0xf6>
 80080ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080ec:	2301      	movs	r3, #1
 80080ee:	e7eb      	b.n	80080c8 <__kernel_rem_pio2+0x368>
 80080f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080f6:	f7f8 fb47 	bl	8000788 <__aeabi_i2d>
 80080fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	46b3      	mov	fp, r6
 8008102:	461c      	mov	r4, r3
 8008104:	2700      	movs	r7, #0
 8008106:	f04f 0800 	mov.w	r8, #0
 800810a:	f04f 0900 	mov.w	r9, #0
 800810e:	9b06      	ldr	r3, [sp, #24]
 8008110:	429f      	cmp	r7, r3
 8008112:	dd06      	ble.n	8008122 <__kernel_rem_pio2+0x3c2>
 8008114:	ab70      	add	r3, sp, #448	; 0x1c0
 8008116:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800811a:	e9c3 8900 	strd	r8, r9, [r3]
 800811e:	3501      	adds	r5, #1
 8008120:	e7de      	b.n	80080e0 <__kernel_rem_pio2+0x380>
 8008122:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008126:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800812a:	f7f8 f8b1 	bl	8000290 <__aeabi_dmul>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4640      	mov	r0, r8
 8008134:	4649      	mov	r1, r9
 8008136:	f7f8 f9db 	bl	80004f0 <__adddf3>
 800813a:	3701      	adds	r7, #1
 800813c:	4680      	mov	r8, r0
 800813e:	4689      	mov	r9, r1
 8008140:	e7e5      	b.n	800810e <__kernel_rem_pio2+0x3ae>
 8008142:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008146:	e754      	b.n	8007ff2 <__kernel_rem_pio2+0x292>
 8008148:	ec47 6b10 	vmov	d0, r6, r7
 800814c:	f1ca 0000 	rsb	r0, sl, #0
 8008150:	f000 fa8e 	bl	8008670 <scalbn>
 8008154:	ec57 6b10 	vmov	r6, r7, d0
 8008158:	4b9f      	ldr	r3, [pc, #636]	; (80083d8 <__kernel_rem_pio2+0x678>)
 800815a:	ee10 0a10 	vmov	r0, s0
 800815e:	2200      	movs	r2, #0
 8008160:	4639      	mov	r1, r7
 8008162:	f7f8 fbef 	bl	8000944 <__aeabi_dcmpge>
 8008166:	b300      	cbz	r0, 80081aa <__kernel_rem_pio2+0x44a>
 8008168:	4b9c      	ldr	r3, [pc, #624]	; (80083dc <__kernel_rem_pio2+0x67c>)
 800816a:	2200      	movs	r2, #0
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 f88e 	bl	8000290 <__aeabi_dmul>
 8008174:	f7f8 fbfa 	bl	800096c <__aeabi_d2iz>
 8008178:	4605      	mov	r5, r0
 800817a:	f7f8 fb05 	bl	8000788 <__aeabi_i2d>
 800817e:	4b96      	ldr	r3, [pc, #600]	; (80083d8 <__kernel_rem_pio2+0x678>)
 8008180:	2200      	movs	r2, #0
 8008182:	f7f8 f885 	bl	8000290 <__aeabi_dmul>
 8008186:	460b      	mov	r3, r1
 8008188:	4602      	mov	r2, r0
 800818a:	4639      	mov	r1, r7
 800818c:	4630      	mov	r0, r6
 800818e:	f7f8 f9ad 	bl	80004ec <__aeabi_dsub>
 8008192:	f7f8 fbeb 	bl	800096c <__aeabi_d2iz>
 8008196:	f104 0b01 	add.w	fp, r4, #1
 800819a:	ab0c      	add	r3, sp, #48	; 0x30
 800819c:	f10a 0a18 	add.w	sl, sl, #24
 80081a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081a4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80081a8:	e72b      	b.n	8008002 <__kernel_rem_pio2+0x2a2>
 80081aa:	4630      	mov	r0, r6
 80081ac:	4639      	mov	r1, r7
 80081ae:	f7f8 fbdd 	bl	800096c <__aeabi_d2iz>
 80081b2:	ab0c      	add	r3, sp, #48	; 0x30
 80081b4:	46a3      	mov	fp, r4
 80081b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80081ba:	e722      	b.n	8008002 <__kernel_rem_pio2+0x2a2>
 80081bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80081be:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80081c2:	ab0c      	add	r3, sp, #48	; 0x30
 80081c4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80081c8:	f7f8 fade 	bl	8000788 <__aeabi_i2d>
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	f7f8 f85e 	bl	8000290 <__aeabi_dmul>
 80081d4:	4632      	mov	r2, r6
 80081d6:	e9c9 0100 	strd	r0, r1, [r9]
 80081da:	463b      	mov	r3, r7
 80081dc:	4620      	mov	r0, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 f856 	bl	8000290 <__aeabi_dmul>
 80081e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80081e8:	4604      	mov	r4, r0
 80081ea:	460d      	mov	r5, r1
 80081ec:	e713      	b.n	8008016 <__kernel_rem_pio2+0x2b6>
 80081ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80081f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80081f6:	f7f8 f84b 	bl	8000290 <__aeabi_dmul>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4620      	mov	r0, r4
 8008200:	4629      	mov	r1, r5
 8008202:	f7f8 f975 	bl	80004f0 <__adddf3>
 8008206:	3601      	adds	r6, #1
 8008208:	4604      	mov	r4, r0
 800820a:	460d      	mov	r5, r1
 800820c:	9b04      	ldr	r3, [sp, #16]
 800820e:	429e      	cmp	r6, r3
 8008210:	dc01      	bgt.n	8008216 <__kernel_rem_pio2+0x4b6>
 8008212:	45b0      	cmp	r8, r6
 8008214:	daeb      	bge.n	80081ee <__kernel_rem_pio2+0x48e>
 8008216:	ab48      	add	r3, sp, #288	; 0x120
 8008218:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800821c:	e9c3 4500 	strd	r4, r5, [r3]
 8008220:	3f01      	subs	r7, #1
 8008222:	f108 0801 	add.w	r8, r8, #1
 8008226:	e6ff      	b.n	8008028 <__kernel_rem_pio2+0x2c8>
 8008228:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800822a:	2b02      	cmp	r3, #2
 800822c:	dc0b      	bgt.n	8008246 <__kernel_rem_pio2+0x4e6>
 800822e:	2b00      	cmp	r3, #0
 8008230:	dc6e      	bgt.n	8008310 <__kernel_rem_pio2+0x5b0>
 8008232:	d045      	beq.n	80082c0 <__kernel_rem_pio2+0x560>
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	f003 0007 	and.w	r0, r3, #7
 800823a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800823e:	ecbd 8b02 	vpop	{d8}
 8008242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008246:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008248:	2b03      	cmp	r3, #3
 800824a:	d1f3      	bne.n	8008234 <__kernel_rem_pio2+0x4d4>
 800824c:	ab48      	add	r3, sp, #288	; 0x120
 800824e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8008252:	46d0      	mov	r8, sl
 8008254:	46d9      	mov	r9, fp
 8008256:	f1b9 0f00 	cmp.w	r9, #0
 800825a:	f1a8 0808 	sub.w	r8, r8, #8
 800825e:	dc64      	bgt.n	800832a <__kernel_rem_pio2+0x5ca>
 8008260:	465c      	mov	r4, fp
 8008262:	2c01      	cmp	r4, #1
 8008264:	f1aa 0a08 	sub.w	sl, sl, #8
 8008268:	dc7e      	bgt.n	8008368 <__kernel_rem_pio2+0x608>
 800826a:	2000      	movs	r0, #0
 800826c:	2100      	movs	r1, #0
 800826e:	f1bb 0f01 	cmp.w	fp, #1
 8008272:	f300 8097 	bgt.w	80083a4 <__kernel_rem_pio2+0x644>
 8008276:	9b02      	ldr	r3, [sp, #8]
 8008278:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800827c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008280:	2b00      	cmp	r3, #0
 8008282:	f040 8099 	bne.w	80083b8 <__kernel_rem_pio2+0x658>
 8008286:	9b01      	ldr	r3, [sp, #4]
 8008288:	e9c3 5600 	strd	r5, r6, [r3]
 800828c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008290:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008294:	e7ce      	b.n	8008234 <__kernel_rem_pio2+0x4d4>
 8008296:	ab48      	add	r3, sp, #288	; 0x120
 8008298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f7f8 f926 	bl	80004f0 <__adddf3>
 80082a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082a8:	f1bb 0f00 	cmp.w	fp, #0
 80082ac:	daf3      	bge.n	8008296 <__kernel_rem_pio2+0x536>
 80082ae:	9b02      	ldr	r3, [sp, #8]
 80082b0:	b113      	cbz	r3, 80082b8 <__kernel_rem_pio2+0x558>
 80082b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082b6:	4619      	mov	r1, r3
 80082b8:	9b01      	ldr	r3, [sp, #4]
 80082ba:	e9c3 0100 	strd	r0, r1, [r3]
 80082be:	e7b9      	b.n	8008234 <__kernel_rem_pio2+0x4d4>
 80082c0:	2000      	movs	r0, #0
 80082c2:	2100      	movs	r1, #0
 80082c4:	e7f0      	b.n	80082a8 <__kernel_rem_pio2+0x548>
 80082c6:	ab48      	add	r3, sp, #288	; 0x120
 80082c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f8 f90e 	bl	80004f0 <__adddf3>
 80082d4:	3c01      	subs	r4, #1
 80082d6:	2c00      	cmp	r4, #0
 80082d8:	daf5      	bge.n	80082c6 <__kernel_rem_pio2+0x566>
 80082da:	9b02      	ldr	r3, [sp, #8]
 80082dc:	b1e3      	cbz	r3, 8008318 <__kernel_rem_pio2+0x5b8>
 80082de:	4602      	mov	r2, r0
 80082e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082e4:	9c01      	ldr	r4, [sp, #4]
 80082e6:	e9c4 2300 	strd	r2, r3, [r4]
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80082f2:	f7f8 f8fb 	bl	80004ec <__aeabi_dsub>
 80082f6:	ad4a      	add	r5, sp, #296	; 0x128
 80082f8:	2401      	movs	r4, #1
 80082fa:	45a3      	cmp	fp, r4
 80082fc:	da0f      	bge.n	800831e <__kernel_rem_pio2+0x5be>
 80082fe:	9b02      	ldr	r3, [sp, #8]
 8008300:	b113      	cbz	r3, 8008308 <__kernel_rem_pio2+0x5a8>
 8008302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008306:	4619      	mov	r1, r3
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800830e:	e791      	b.n	8008234 <__kernel_rem_pio2+0x4d4>
 8008310:	465c      	mov	r4, fp
 8008312:	2000      	movs	r0, #0
 8008314:	2100      	movs	r1, #0
 8008316:	e7de      	b.n	80082d6 <__kernel_rem_pio2+0x576>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	e7e2      	b.n	80082e4 <__kernel_rem_pio2+0x584>
 800831e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008322:	f7f8 f8e5 	bl	80004f0 <__adddf3>
 8008326:	3401      	adds	r4, #1
 8008328:	e7e7      	b.n	80082fa <__kernel_rem_pio2+0x59a>
 800832a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800832e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8008332:	4620      	mov	r0, r4
 8008334:	4632      	mov	r2, r6
 8008336:	463b      	mov	r3, r7
 8008338:	4629      	mov	r1, r5
 800833a:	f7f8 f8d9 	bl	80004f0 <__adddf3>
 800833e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f7f8 f8cf 	bl	80004ec <__aeabi_dsub>
 800834e:	4632      	mov	r2, r6
 8008350:	463b      	mov	r3, r7
 8008352:	f7f8 f8cd 	bl	80004f0 <__adddf3>
 8008356:	ed9d 7b04 	vldr	d7, [sp, #16]
 800835a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800835e:	ed88 7b00 	vstr	d7, [r8]
 8008362:	f109 39ff 	add.w	r9, r9, #4294967295
 8008366:	e776      	b.n	8008256 <__kernel_rem_pio2+0x4f6>
 8008368:	e9da 8900 	ldrd	r8, r9, [sl]
 800836c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008370:	4640      	mov	r0, r8
 8008372:	4632      	mov	r2, r6
 8008374:	463b      	mov	r3, r7
 8008376:	4649      	mov	r1, r9
 8008378:	f7f8 f8ba 	bl	80004f0 <__adddf3>
 800837c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4640      	mov	r0, r8
 8008386:	4649      	mov	r1, r9
 8008388:	f7f8 f8b0 	bl	80004ec <__aeabi_dsub>
 800838c:	4632      	mov	r2, r6
 800838e:	463b      	mov	r3, r7
 8008390:	f7f8 f8ae 	bl	80004f0 <__adddf3>
 8008394:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008398:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800839c:	ed8a 7b00 	vstr	d7, [sl]
 80083a0:	3c01      	subs	r4, #1
 80083a2:	e75e      	b.n	8008262 <__kernel_rem_pio2+0x502>
 80083a4:	ab48      	add	r3, sp, #288	; 0x120
 80083a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f8 f89f 	bl	80004f0 <__adddf3>
 80083b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083b6:	e75a      	b.n	800826e <__kernel_rem_pio2+0x50e>
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	9a01      	ldr	r2, [sp, #4]
 80083bc:	601d      	str	r5, [r3, #0]
 80083be:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80083c2:	605c      	str	r4, [r3, #4]
 80083c4:	609f      	str	r7, [r3, #8]
 80083c6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80083ca:	60d3      	str	r3, [r2, #12]
 80083cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083d0:	6110      	str	r0, [r2, #16]
 80083d2:	6153      	str	r3, [r2, #20]
 80083d4:	e72e      	b.n	8008234 <__kernel_rem_pio2+0x4d4>
 80083d6:	bf00      	nop
 80083d8:	41700000 	.word	0x41700000
 80083dc:	3e700000 	.word	0x3e700000

080083e0 <__kernel_sin>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	ed2d 8b04 	vpush	{d8-d9}
 80083e8:	eeb0 8a41 	vmov.f32	s16, s2
 80083ec:	eef0 8a61 	vmov.f32	s17, s3
 80083f0:	ec55 4b10 	vmov	r4, r5, d0
 80083f4:	b083      	sub	sp, #12
 80083f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80083fe:	9001      	str	r0, [sp, #4]
 8008400:	da06      	bge.n	8008410 <__kernel_sin+0x30>
 8008402:	ee10 0a10 	vmov	r0, s0
 8008406:	4629      	mov	r1, r5
 8008408:	f7f8 fab0 	bl	800096c <__aeabi_d2iz>
 800840c:	2800      	cmp	r0, #0
 800840e:	d051      	beq.n	80084b4 <__kernel_sin+0xd4>
 8008410:	4622      	mov	r2, r4
 8008412:	462b      	mov	r3, r5
 8008414:	4620      	mov	r0, r4
 8008416:	4629      	mov	r1, r5
 8008418:	f7f7 ff3a 	bl	8000290 <__aeabi_dmul>
 800841c:	4682      	mov	sl, r0
 800841e:	468b      	mov	fp, r1
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4620      	mov	r0, r4
 8008426:	4629      	mov	r1, r5
 8008428:	f7f7 ff32 	bl	8000290 <__aeabi_dmul>
 800842c:	a341      	add	r3, pc, #260	; (adr r3, 8008534 <__kernel_sin+0x154>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	4680      	mov	r8, r0
 8008434:	4689      	mov	r9, r1
 8008436:	4650      	mov	r0, sl
 8008438:	4659      	mov	r1, fp
 800843a:	f7f7 ff29 	bl	8000290 <__aeabi_dmul>
 800843e:	a33f      	add	r3, pc, #252	; (adr r3, 800853c <__kernel_sin+0x15c>)
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f7f8 f852 	bl	80004ec <__aeabi_dsub>
 8008448:	4652      	mov	r2, sl
 800844a:	465b      	mov	r3, fp
 800844c:	f7f7 ff20 	bl	8000290 <__aeabi_dmul>
 8008450:	a33c      	add	r3, pc, #240	; (adr r3, 8008544 <__kernel_sin+0x164>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	f7f8 f84b 	bl	80004f0 <__adddf3>
 800845a:	4652      	mov	r2, sl
 800845c:	465b      	mov	r3, fp
 800845e:	f7f7 ff17 	bl	8000290 <__aeabi_dmul>
 8008462:	a33a      	add	r3, pc, #232	; (adr r3, 800854c <__kernel_sin+0x16c>)
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	f7f8 f840 	bl	80004ec <__aeabi_dsub>
 800846c:	4652      	mov	r2, sl
 800846e:	465b      	mov	r3, fp
 8008470:	f7f7 ff0e 	bl	8000290 <__aeabi_dmul>
 8008474:	a337      	add	r3, pc, #220	; (adr r3, 8008554 <__kernel_sin+0x174>)
 8008476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847a:	f7f8 f839 	bl	80004f0 <__adddf3>
 800847e:	9b01      	ldr	r3, [sp, #4]
 8008480:	4606      	mov	r6, r0
 8008482:	460f      	mov	r7, r1
 8008484:	b9eb      	cbnz	r3, 80084c2 <__kernel_sin+0xe2>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4650      	mov	r0, sl
 800848c:	4659      	mov	r1, fp
 800848e:	f7f7 feff 	bl	8000290 <__aeabi_dmul>
 8008492:	a325      	add	r3, pc, #148	; (adr r3, 8008528 <__kernel_sin+0x148>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f7f8 f828 	bl	80004ec <__aeabi_dsub>
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	f7f7 fef6 	bl	8000290 <__aeabi_dmul>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4620      	mov	r0, r4
 80084aa:	4629      	mov	r1, r5
 80084ac:	f7f8 f820 	bl	80004f0 <__adddf3>
 80084b0:	4604      	mov	r4, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	ec45 4b10 	vmov	d0, r4, r5
 80084b8:	b003      	add	sp, #12
 80084ba:	ecbd 8b04 	vpop	{d8-d9}
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c2:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <__kernel_sin+0x150>)
 80084c4:	ec51 0b18 	vmov	r0, r1, d8
 80084c8:	2200      	movs	r2, #0
 80084ca:	f7f7 fee1 	bl	8000290 <__aeabi_dmul>
 80084ce:	4632      	mov	r2, r6
 80084d0:	ec41 0b19 	vmov	d9, r0, r1
 80084d4:	463b      	mov	r3, r7
 80084d6:	4640      	mov	r0, r8
 80084d8:	4649      	mov	r1, r9
 80084da:	f7f7 fed9 	bl	8000290 <__aeabi_dmul>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	ec51 0b19 	vmov	r0, r1, d9
 80084e6:	f7f8 f801 	bl	80004ec <__aeabi_dsub>
 80084ea:	4652      	mov	r2, sl
 80084ec:	465b      	mov	r3, fp
 80084ee:	f7f7 fecf 	bl	8000290 <__aeabi_dmul>
 80084f2:	ec53 2b18 	vmov	r2, r3, d8
 80084f6:	f7f7 fff9 	bl	80004ec <__aeabi_dsub>
 80084fa:	a30b      	add	r3, pc, #44	; (adr r3, 8008528 <__kernel_sin+0x148>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	4606      	mov	r6, r0
 8008502:	460f      	mov	r7, r1
 8008504:	4640      	mov	r0, r8
 8008506:	4649      	mov	r1, r9
 8008508:	f7f7 fec2 	bl	8000290 <__aeabi_dmul>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4630      	mov	r0, r6
 8008512:	4639      	mov	r1, r7
 8008514:	f7f7 ffec 	bl	80004f0 <__adddf3>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4620      	mov	r0, r4
 800851e:	4629      	mov	r1, r5
 8008520:	f7f7 ffe4 	bl	80004ec <__aeabi_dsub>
 8008524:	e7c4      	b.n	80084b0 <__kernel_sin+0xd0>
 8008526:	bf00      	nop
 8008528:	55555549 	.word	0x55555549
 800852c:	3fc55555 	.word	0x3fc55555
 8008530:	3fe00000 	.word	0x3fe00000
 8008534:	5acfd57c 	.word	0x5acfd57c
 8008538:	3de5d93a 	.word	0x3de5d93a
 800853c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008540:	3e5ae5e6 	.word	0x3e5ae5e6
 8008544:	57b1fe7d 	.word	0x57b1fe7d
 8008548:	3ec71de3 	.word	0x3ec71de3
 800854c:	19c161d5 	.word	0x19c161d5
 8008550:	3f2a01a0 	.word	0x3f2a01a0
 8008554:	1110f8a6 	.word	0x1110f8a6
 8008558:	3f811111 	.word	0x3f811111

0800855c <fabs>:
 800855c:	ec51 0b10 	vmov	r0, r1, d0
 8008560:	ee10 2a10 	vmov	r2, s0
 8008564:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008568:	ec43 2b10 	vmov	d0, r2, r3
 800856c:	4770      	bx	lr
	...

08008570 <floor>:
 8008570:	ec51 0b10 	vmov	r0, r1, d0
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800857c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008580:	2e13      	cmp	r6, #19
 8008582:	ee10 5a10 	vmov	r5, s0
 8008586:	ee10 8a10 	vmov	r8, s0
 800858a:	460c      	mov	r4, r1
 800858c:	dc32      	bgt.n	80085f4 <floor+0x84>
 800858e:	2e00      	cmp	r6, #0
 8008590:	da14      	bge.n	80085bc <floor+0x4c>
 8008592:	a333      	add	r3, pc, #204	; (adr r3, 8008660 <floor+0xf0>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	f7f7 ffaa 	bl	80004f0 <__adddf3>
 800859c:	2200      	movs	r2, #0
 800859e:	2300      	movs	r3, #0
 80085a0:	f7f8 f9da 	bl	8000958 <__aeabi_dcmpgt>
 80085a4:	b138      	cbz	r0, 80085b6 <floor+0x46>
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	da57      	bge.n	800865a <floor+0xea>
 80085aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80085ae:	431d      	orrs	r5, r3
 80085b0:	d001      	beq.n	80085b6 <floor+0x46>
 80085b2:	4c2d      	ldr	r4, [pc, #180]	; (8008668 <floor+0xf8>)
 80085b4:	2500      	movs	r5, #0
 80085b6:	4621      	mov	r1, r4
 80085b8:	4628      	mov	r0, r5
 80085ba:	e025      	b.n	8008608 <floor+0x98>
 80085bc:	4f2b      	ldr	r7, [pc, #172]	; (800866c <floor+0xfc>)
 80085be:	4137      	asrs	r7, r6
 80085c0:	ea01 0307 	and.w	r3, r1, r7
 80085c4:	4303      	orrs	r3, r0
 80085c6:	d01f      	beq.n	8008608 <floor+0x98>
 80085c8:	a325      	add	r3, pc, #148	; (adr r3, 8008660 <floor+0xf0>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f7 ff8f 	bl	80004f0 <__adddf3>
 80085d2:	2200      	movs	r2, #0
 80085d4:	2300      	movs	r3, #0
 80085d6:	f7f8 f9bf 	bl	8000958 <__aeabi_dcmpgt>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d0eb      	beq.n	80085b6 <floor+0x46>
 80085de:	2c00      	cmp	r4, #0
 80085e0:	bfbe      	ittt	lt
 80085e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80085e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80085ea:	19a4      	addlt	r4, r4, r6
 80085ec:	ea24 0407 	bic.w	r4, r4, r7
 80085f0:	2500      	movs	r5, #0
 80085f2:	e7e0      	b.n	80085b6 <floor+0x46>
 80085f4:	2e33      	cmp	r6, #51	; 0x33
 80085f6:	dd0b      	ble.n	8008610 <floor+0xa0>
 80085f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80085fc:	d104      	bne.n	8008608 <floor+0x98>
 80085fe:	ee10 2a10 	vmov	r2, s0
 8008602:	460b      	mov	r3, r1
 8008604:	f7f7 ff74 	bl	80004f0 <__adddf3>
 8008608:	ec41 0b10 	vmov	d0, r0, r1
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008610:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008614:	f04f 33ff 	mov.w	r3, #4294967295
 8008618:	fa23 f707 	lsr.w	r7, r3, r7
 800861c:	4207      	tst	r7, r0
 800861e:	d0f3      	beq.n	8008608 <floor+0x98>
 8008620:	a30f      	add	r3, pc, #60	; (adr r3, 8008660 <floor+0xf0>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f7f7 ff63 	bl	80004f0 <__adddf3>
 800862a:	2200      	movs	r2, #0
 800862c:	2300      	movs	r3, #0
 800862e:	f7f8 f993 	bl	8000958 <__aeabi_dcmpgt>
 8008632:	2800      	cmp	r0, #0
 8008634:	d0bf      	beq.n	80085b6 <floor+0x46>
 8008636:	2c00      	cmp	r4, #0
 8008638:	da02      	bge.n	8008640 <floor+0xd0>
 800863a:	2e14      	cmp	r6, #20
 800863c:	d103      	bne.n	8008646 <floor+0xd6>
 800863e:	3401      	adds	r4, #1
 8008640:	ea25 0507 	bic.w	r5, r5, r7
 8008644:	e7b7      	b.n	80085b6 <floor+0x46>
 8008646:	2301      	movs	r3, #1
 8008648:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800864c:	fa03 f606 	lsl.w	r6, r3, r6
 8008650:	4435      	add	r5, r6
 8008652:	4545      	cmp	r5, r8
 8008654:	bf38      	it	cc
 8008656:	18e4      	addcc	r4, r4, r3
 8008658:	e7f2      	b.n	8008640 <floor+0xd0>
 800865a:	2500      	movs	r5, #0
 800865c:	462c      	mov	r4, r5
 800865e:	e7aa      	b.n	80085b6 <floor+0x46>
 8008660:	8800759c 	.word	0x8800759c
 8008664:	7e37e43c 	.word	0x7e37e43c
 8008668:	bff00000 	.word	0xbff00000
 800866c:	000fffff 	.word	0x000fffff

08008670 <scalbn>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	ec55 4b10 	vmov	r4, r5, d0
 8008676:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800867a:	4606      	mov	r6, r0
 800867c:	462b      	mov	r3, r5
 800867e:	b99a      	cbnz	r2, 80086a8 <scalbn+0x38>
 8008680:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008684:	4323      	orrs	r3, r4
 8008686:	d036      	beq.n	80086f6 <scalbn+0x86>
 8008688:	4b39      	ldr	r3, [pc, #228]	; (8008770 <scalbn+0x100>)
 800868a:	4629      	mov	r1, r5
 800868c:	ee10 0a10 	vmov	r0, s0
 8008690:	2200      	movs	r2, #0
 8008692:	f7f7 fdfd 	bl	8000290 <__aeabi_dmul>
 8008696:	4b37      	ldr	r3, [pc, #220]	; (8008774 <scalbn+0x104>)
 8008698:	429e      	cmp	r6, r3
 800869a:	4604      	mov	r4, r0
 800869c:	460d      	mov	r5, r1
 800869e:	da10      	bge.n	80086c2 <scalbn+0x52>
 80086a0:	a32b      	add	r3, pc, #172	; (adr r3, 8008750 <scalbn+0xe0>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	e03a      	b.n	800871e <scalbn+0xae>
 80086a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80086ac:	428a      	cmp	r2, r1
 80086ae:	d10c      	bne.n	80086ca <scalbn+0x5a>
 80086b0:	ee10 2a10 	vmov	r2, s0
 80086b4:	4620      	mov	r0, r4
 80086b6:	4629      	mov	r1, r5
 80086b8:	f7f7 ff1a 	bl	80004f0 <__adddf3>
 80086bc:	4604      	mov	r4, r0
 80086be:	460d      	mov	r5, r1
 80086c0:	e019      	b.n	80086f6 <scalbn+0x86>
 80086c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80086c6:	460b      	mov	r3, r1
 80086c8:	3a36      	subs	r2, #54	; 0x36
 80086ca:	4432      	add	r2, r6
 80086cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80086d0:	428a      	cmp	r2, r1
 80086d2:	dd08      	ble.n	80086e6 <scalbn+0x76>
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	a120      	add	r1, pc, #128	; (adr r1, 8008758 <scalbn+0xe8>)
 80086d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086dc:	da1c      	bge.n	8008718 <scalbn+0xa8>
 80086de:	a120      	add	r1, pc, #128	; (adr r1, 8008760 <scalbn+0xf0>)
 80086e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086e4:	e018      	b.n	8008718 <scalbn+0xa8>
 80086e6:	2a00      	cmp	r2, #0
 80086e8:	dd08      	ble.n	80086fc <scalbn+0x8c>
 80086ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80086f6:	ec45 4b10 	vmov	d0, r4, r5
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008700:	da19      	bge.n	8008736 <scalbn+0xc6>
 8008702:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008706:	429e      	cmp	r6, r3
 8008708:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800870c:	dd0a      	ble.n	8008724 <scalbn+0xb4>
 800870e:	a112      	add	r1, pc, #72	; (adr r1, 8008758 <scalbn+0xe8>)
 8008710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e2      	bne.n	80086de <scalbn+0x6e>
 8008718:	a30f      	add	r3, pc, #60	; (adr r3, 8008758 <scalbn+0xe8>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 fdb7 	bl	8000290 <__aeabi_dmul>
 8008722:	e7cb      	b.n	80086bc <scalbn+0x4c>
 8008724:	a10a      	add	r1, pc, #40	; (adr r1, 8008750 <scalbn+0xe0>)
 8008726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0b8      	beq.n	80086a0 <scalbn+0x30>
 800872e:	a10e      	add	r1, pc, #56	; (adr r1, 8008768 <scalbn+0xf8>)
 8008730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008734:	e7b4      	b.n	80086a0 <scalbn+0x30>
 8008736:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800873a:	3236      	adds	r2, #54	; 0x36
 800873c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008740:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008744:	4620      	mov	r0, r4
 8008746:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <scalbn+0x108>)
 8008748:	2200      	movs	r2, #0
 800874a:	e7e8      	b.n	800871e <scalbn+0xae>
 800874c:	f3af 8000 	nop.w
 8008750:	c2f8f359 	.word	0xc2f8f359
 8008754:	01a56e1f 	.word	0x01a56e1f
 8008758:	8800759c 	.word	0x8800759c
 800875c:	7e37e43c 	.word	0x7e37e43c
 8008760:	8800759c 	.word	0x8800759c
 8008764:	fe37e43c 	.word	0xfe37e43c
 8008768:	c2f8f359 	.word	0xc2f8f359
 800876c:	81a56e1f 	.word	0x81a56e1f
 8008770:	43500000 	.word	0x43500000
 8008774:	ffff3cb0 	.word	0xffff3cb0
 8008778:	3c900000 	.word	0x3c900000

0800877c <_init>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	bf00      	nop
 8008780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008782:	bc08      	pop	{r3}
 8008784:	469e      	mov	lr, r3
 8008786:	4770      	bx	lr

08008788 <_fini>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	bf00      	nop
 800878c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878e:	bc08      	pop	{r3}
 8008790:	469e      	mov	lr, r3
 8008792:	4770      	bx	lr
